name: Publish Native Executables

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:

  setup-gitversion:
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for GitVersion

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v3
        with:
          versionSpec: '6.0.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"

  build-windows:
    needs: setup-gitversion
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for GitVersion

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 10.0.x

      - name: Compile and package for Windows
        shell: pwsh
        run: |
          $RepoRoot = "${{ github.workspace }}"

          & "$RepoRoot\etc\build-native-executable.ps1" `
              -SrcDir "$RepoRoot\src" `
              -RuntimeIdentifier "win-${{ matrix.arch }}" `
              -Configuration "Release" `
              -VersionPrefix "${{ needs.setup-gitversion.outputs.majorMinorPatch }}"

          if ($LASTEXITCODE -eq 0) {
            & "$RepoRoot\etc\package-native-executable.ps1" `
                -Platform windows `
                -Architecture ${{ matrix.arch }} `
                -InputFile "$RepoRoot\bin\aot-win-${{ matrix.arch }}\paradox-clausewitz-sav.exe" `
                -OutputDir "$RepoRoot\artifacts"
          } else {
            Write-Error "Build failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }

      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/paradox-clausewitz-sav_${{ needs.setup-gitversion.outputs.majorMinorPatch }}_windows_${{ matrix.arch }}.zip

  build-linux:
    needs: setup-gitversion
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for GitVersion     

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 10.0.x

      - name: Dagger AOT
        uses: dagger/dagger-for-github@8.0.0
        with:
          version: "latest"
          call: publish-aot --rid=linux-${{ matrix.arch }} export --path ./bin/aot-linux-${{ matrix.arch }}/paradox-clausewitz-sav --allow-parent-dir-path

      - name: Compile and package for Linux
        shell: bash
        run: |
          REPO_ROOT="${{ github.workspace }}"
          
          pwsh -File "${REPO_ROOT}/etc/package-native-executable.ps1" \
            -Platform linux \
            -Architecture ${{ matrix.arch }} \
            -InputFile "${REPO_ROOT}/bin/aot-linux-${{ matrix.arch }}/paradox-clausewitz-sav" \
            -OutputDir "${REPO_ROOT}/artifacts"

      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/paradox-clausewitz-sav_${{ needs.setup-gitversion.outputs.majorMinorPatch }}_linux_${{ matrix.arch }}.tar.gz

  build-macos:
    needs: setup-gitversion
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for GitVersion

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 10.0.x

      - name: Compile and package for MacOS
        shell: bash
        run: |
          REPO_ROOT="${{ github.workspace }}"
          
          pwsh -File "${REPO_ROOT}/etc/build-native-executable.ps1" \
            -SrcDir "${REPO_ROOT}/src" \
            -RuntimeIdentifier "osx-${{ matrix.arch }}" \
            -Configuration "Release" \
            -VersionPrefix "${{ needs.setup-gitversion.outputs.majorMinorPatch }}"
          
          BUILD_EXIT_CODE=$?
          if [ $BUILD_EXIT_CODE -eq 0 ]; then
            pwsh -File "${REPO_ROOT}/etc/package-native-executable.ps1" \
              -Platform macos \
              -Architecture ${{ matrix.arch }} \
              -InputFile "${REPO_ROOT}/bin/aot-osx-${{ matrix.arch }}/paradox-clausewitz-sav" \
              -OutputDir "${REPO_ROOT}/artifacts"
          else
            echo "Build failed with exit code $BUILD_EXIT_CODE"
            exit $BUILD_EXIT_CODE
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: ./artifacts/paradox-clausewitz-sav_${{ needs.setup-gitversion.outputs.majorMinorPatch }}_macos_${{ matrix.arch }}.tar.gz
          name: paradox-clausewitz-sav_${{ needs.setup-gitversion.outputs.majorMinorPatch }}_macos_${{ matrix.arch }}
          compression-level: 0

      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/paradox-clausewitz-sav_${{ needs.setup-gitversion.outputs.majorMinorPatch }}_macos_${{ matrix.arch }}.tar.gz