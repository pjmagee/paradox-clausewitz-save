// <auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
using MageeSoft.PDX.CE;

namespace MageeSoft.PDX.CE.Models
{
    // Generated from schema file: meta.csf
    public partial class Meta
    {
        /// <summary>
        /// </summary>
        public class MetaFlag
        {
            /// <summary>
            /// </summary>
            public class MetaFlagIcon
            {
                /// <summary>Property for 'category'</summary>
                public string? Category { get; set; }

                /// <summary>Property for 'file'</summary>
                public string? File { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static MetaFlagIcon? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    MetaFlagIcon model = new MetaFlagIcon();
                    model.SourceObject = obj;

                    model.Category = obj.TryGetString("category", out string categoryStringValue) && categoryStringValue != "none" ? categoryStringValue : null;

                    model.File = obj.TryGetString("file", out string fileStringValue) && fileStringValue != "none" ? fileStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'icon'</summary>
            public Meta.MetaFlag.MetaFlagIcon? Icon { get; set; }

            /// <summary>Property for 'background'</summary>
            public Meta.MetaFlag.MetaFlagIcon? Background { get; set; }

            /// <summary>Property for 'colors'</summary>
            public List<string>? Colors { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static MetaFlag? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                MetaFlag model = new MetaFlag();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("icon", out SaveObject iconNestedObj))
                    model.Icon = Meta.MetaFlag.MetaFlagIcon.Bind(iconNestedObj);

                if (obj.TryGetSaveObject("background", out SaveObject backgroundNestedObj))
                    model.Background = Meta.MetaFlag.MetaFlagIcon.Bind(backgroundNestedObj);

                // TODO: Bind complex type: Colors (List<string>)
                if (obj.TryGetSaveArray("colors", out SaveArray colorsArray) && colorsArray != null)
                    model.Colors = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (colorsArray != null)
                {
                    foreach (var item in colorsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.Colors.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }

        /// <summary>
        /// Gets the original SaveObject this instance was bound from.
        /// </summary>
        public SaveObject? SourceObject { get; private set; }

        /// <summary>
        /// Property for 'version'
        /// </summary>
        public string? AVersion { get; set; }

        /// <summary>
        /// Property for 'version_control_revision'
        /// </summary>
        public int? VersionControlRevision { get; set; }

        /// <summary>
        /// Property for 'name'
        /// </summary>
        public string? Name { get; set; }

        /// <summary>
        /// Property for 'date'
        /// </summary>
        public DateTime? Date { get; set; }

        /// <summary>
        /// Property for 'required_dlcs'
        /// </summary>
        public List<string>? RequiredDlcs { get; set; }

        /// <summary>
        /// Property for 'player_portrait'
        /// </summary>
        public string? PlayerPortrait { get; set; }

        /// <summary>
        /// Property for 'flag'
        /// </summary>
        public Meta.MetaFlag? Flag { get; set; }

        /// <summary>
        /// Property for 'meta_fleets'
        /// </summary>
        public int? MetaFleets { get; set; }

        /// <summary>
        /// Property for 'meta_planets'
        /// </summary>
        public int? MetaPlanets { get; set; }

        /// <summary>
        /// Property for 'ironman'
        /// </summary>
        public bool? Ironman { get; set; }

        /// <summary>
        /// Binds a SaveObject to a new instance of this partial class.
        /// </summary>
        /// <param name="obj">The SaveObject to bind. Can be null.</param>
        /// <returns>A new instance or null if input is null.</returns>
        public static Meta? Bind(SaveObject? obj)
        {
            if (obj == null) return null;

            Meta model = new Meta();
            model.SourceObject = obj; // Store reference to source object

            model.AVersion = obj.TryGetString("version", out string aversionStringValue) && aversionStringValue != "none" ? aversionStringValue : null;

            if (obj.TryGetInt("version_control_revision", out int versioncontrolrevisionValue))
                model.VersionControlRevision = versioncontrolrevisionValue;

            model.Name = obj.TryGetString("name", out string nameStringValue) && nameStringValue != "none" ? nameStringValue : null;

            if (obj.TryGetDateTime("date", out DateTime dateValue))
                model.Date = dateValue;

            // TODO: Bind complex type: RequiredDlcs (List<string>)
            if (obj.TryGetSaveArray("required_dlcs", out SaveArray requireddlcsArray) && requireddlcsArray != null)
                model.RequiredDlcs = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (requireddlcsArray != null)
                {
                    foreach (var item in requireddlcsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.RequiredDlcs.Add(scalarValue.Value);
                        }
                    }
                }

            model.PlayerPortrait = obj.TryGetString("player_portrait", out string playerportraitStringValue) && playerportraitStringValue != "none" ? playerportraitStringValue : null;

            if (obj.TryGetSaveObject("flag", out SaveObject flagNestedObj))
                model.Flag = Meta.MetaFlag.Bind(flagNestedObj);

            if (obj.TryGetInt("meta_fleets", out int metafleetsValue))
                model.MetaFleets = metafleetsValue;

            if (obj.TryGetInt("meta_planets", out int metaplanetsValue))
                model.MetaPlanets = metaplanetsValue;

            if (obj.TryGetBool("ironman", out bool ironmanValue))
                model.Ironman = ironmanValue;


            return model;
        }
    }
}

