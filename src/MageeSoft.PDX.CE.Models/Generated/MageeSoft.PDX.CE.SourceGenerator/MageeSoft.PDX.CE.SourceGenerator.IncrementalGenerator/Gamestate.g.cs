// <auto-generated/>
#nullable enable
using System;
using System.Collections.Generic;
using System.Linq;
using System.Globalization;
using MageeSoft.PDX.CE;

namespace MageeSoft.PDX.CE.Models
{
    // Generated from schema file: gamestate.csf
    public partial class Gamestate
    {
        /// <summary>
        /// </summary>
        public class GamestatePlayerItem
        {
            /// <summary>Property for 'name'</summary>
            public string? Name { get; set; }

            /// <summary>Property for 'country'</summary>
            public int? Country { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestatePlayerItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestatePlayerItem model = new GamestatePlayerItem();
                model.SourceObject = obj;

                model.Name = obj.TryGetString("name", out string nameStringValue) && nameStringValue != "none" ? nameStringValue : null;

                if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                    model.Country = countryValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateSpeciesDbItem
        {
            /// <summary>
            /// </summary>
            public class GamestateSpeciesDbItemTraits
            {
                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateSpeciesDbItemTraits? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateSpeciesDbItemTraits model = new GamestateSpeciesDbItemTraits();
                    model.SourceObject = obj;


                    return model;
                }
            }
            /// <summary>Property for 'traits'</summary>
            public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? Traits { get; set; }

            /// <summary>Property for 'extra_trait_points'</summary>
            public int? ExtraTraitPoints { get; set; }

            /// <summary>Property for 'gender'</summary>
            public string? Gender { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateSpeciesDbItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateSpeciesDbItem model = new GamestateSpeciesDbItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("traits", out SaveObject traitsNestedObj))
                    model.Traits = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(traitsNestedObj);

                if (obj.TryGetInt("extra_trait_points", out int extratraitpointsValue) && extratraitpointsValue != null)
                    model.ExtraTraitPoints = extratraitpointsValue;

                model.Gender = obj.TryGetString("gender", out string genderStringValue) && genderStringValue != "none" ? genderStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateSpyNetworks
        {
            /// <summary>
            /// </summary>
            public class GamestateSpyNetworksNone
            {
                /// <summary>Property for 'owner'</summary>
                public int? Owner { get; set; }

                /// <summary>Property for 'target'</summary>
                public int? Target { get; set; }

                /// <summary>Property for 'leader'</summary>
                public long? Leader { get; set; }

                /// <summary>Property for 'power'</summary>
                public int? Power { get; set; }

                /// <summary>Property for 'formed'</summary>
                public string? Formed { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateSpyNetworksNone? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateSpyNetworksNone model = new GamestateSpyNetworksNone();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                        model.Owner = ownerValue;

                    if (obj.TryGetInt("target", out int targetValue) && targetValue != null)
                        model.Target = targetValue;

                    if (obj.TryGetLong("leader", out long leaderValue) && leaderValue != null)
                        model.Leader = leaderValue;

                    if (obj.TryGetInt("power", out int powerValue) && powerValue != null)
                        model.Power = powerValue;

                    model.Formed = obj.TryGetString("formed", out string formedStringValue) && formedStringValue != "none" ? formedStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'none'</summary>
            public Gamestate.GamestateSpyNetworks.GamestateSpyNetworksNone? None { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateSpyNetworks? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateSpyNetworks model = new GamestateSpyNetworks();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                    model.None = Gamestate.GamestateSpyNetworks.GamestateSpyNetworksNone.Bind(noneNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateEspionageAssetsItem
        {
            /// <summary>
            /// </summary>
            public class GamestateEspionageAssetsItemName
            {
                /// <summary>Property for 'use_full_regnal_name'</summary>
                public bool? UseFullRegnalName { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateEspionageAssetsItemName? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateEspionageAssetsItemName model = new GamestateEspionageAssetsItemName();
                    model.SourceObject = obj;

                    if (obj.TryGetBool("use_full_regnal_name", out bool usefullregnalnameValue) && usefullregnalnameValue != null)
                        model.UseFullRegnalName = usefullregnalnameValue;


                    return model;
                }
            }
            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateEspionageAssetsItem.GamestateEspionageAssetsItemName? Name { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateEspionageAssetsItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateEspionageAssetsItem model = new GamestateEspionageAssetsItem();
                model.SourceObject = obj;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateEspionageAssetsItem.GamestateEspionageAssetsItemName.Bind(nameNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateVivariumCrittersItem
        {
            /// <summary>
            /// </summary>
            public class GamestateVivariumCrittersItemName
            {
                /// <summary>Property for 'key'</summary>
                public string? Key { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateVivariumCrittersItemName? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateVivariumCrittersItemName model = new GamestateVivariumCrittersItemName();
                    model.SourceObject = obj;

                    model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'rarity'</summary>
            public string? Rarity { get; set; }

            /// <summary>Property for 'design'</summary>
            public int? Design { get; set; }

            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

            /// <summary>Property for 'creation_date'</summary>
            public DateTime? CreationDate { get; set; }

            /// <summary>Property for 'maturation_date'</summary>
            public DateTime? MaturationDate { get; set; }

            /// <summary>Property for 'last_breeding_date'</summary>
            public DateTime? LastBreedingDate { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateVivariumCrittersItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateVivariumCrittersItem model = new GamestateVivariumCrittersItem();
                model.SourceObject = obj;

                model.Rarity = obj.TryGetString("rarity", out string rarityStringValue) && rarityStringValue != "none" ? rarityStringValue : null;

                if (obj.TryGetInt("design", out int designValue) && designValue != null)
                    model.Design = designValue;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                if (obj.TryGetDateTime("creation_date", out DateTime creationdateValue) && creationdateValue != null)
                    model.CreationDate = creationdateValue;

                if (obj.TryGetDateTime("maturation_date", out DateTime maturationdateValue) && maturationdateValue != null)
                    model.MaturationDate = maturationdateValue;

                if (obj.TryGetDateTime("last_breeding_date", out DateTime lastbreedingdateValue) && lastbreedingdateValue != null)
                    model.LastBreedingDate = lastbreedingdateValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateExhibitsItem
        {
            /// <summary>
            /// </summary>
            public class GamestateExhibitsItemSpecimen
            {
                /// <summary>Property for 'specimen'</summary>
                public string? Specimen { get; set; }

                /// <summary>Property for 'origin'</summary>
                public string? Origin { get; set; }

                /// <summary>Property for 'date_added'</summary>
                public DateTime? DateAdded { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateExhibitsItemSpecimen? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateExhibitsItemSpecimen model = new GamestateExhibitsItemSpecimen();
                    model.SourceObject = obj;

                    model.Specimen = obj.TryGetString("specimen", out string specimenStringValue) && specimenStringValue != "none" ? specimenStringValue : null;

                    model.Origin = obj.TryGetString("origin", out string originStringValue) && originStringValue != "none" ? originStringValue : null;

                    if (obj.TryGetDateTime("date_added", out DateTime dateaddedValue) && dateaddedValue != null)
                        model.DateAdded = dateaddedValue;


                    return model;
                }
            }
            /// <summary>Property for 'exhibit_state'</summary>
            public string? ExhibitState { get; set; }

            /// <summary>Property for 'specimen'</summary>
            public Gamestate.GamestateExhibitsItem.GamestateExhibitsItemSpecimen? Specimen { get; set; }

            /// <summary>Property for 'owner'</summary>
            public int? Owner { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateExhibitsItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateExhibitsItem model = new GamestateExhibitsItem();
                model.SourceObject = obj;

                model.ExhibitState = obj.TryGetString("exhibit_state", out string exhibitstateStringValue) && exhibitstateStringValue != "none" ? exhibitstateStringValue : null;

                if (obj.TryGetSaveObject("specimen", out SaveObject specimenNestedObj))
                    model.Specimen = Gamestate.GamestateExhibitsItem.GamestateExhibitsItemSpecimen.Bind(specimenNestedObj);

                if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                    model.Owner = ownerValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateNebula
        {
            /// <summary>
            /// </summary>
            public class GamestateNebulaCoordinate
            {
                /// <summary>Property for 'x'</summary>
                public float? X { get; set; }

                /// <summary>Property for 'y'</summary>
                public float? Y { get; set; }

                /// <summary>Property for 'origin'</summary>
                public long? Origin { get; set; }

                /// <summary>Property for 'randomized'</summary>
                public bool? Randomized { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateNebulaCoordinate? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateNebulaCoordinate model = new GamestateNebulaCoordinate();
                    model.SourceObject = obj;

                    if (obj.TryGetFloat("x", out float xValue) && xValue != null)
                        model.X = xValue;

                    if (obj.TryGetFloat("y", out float yValue) && yValue != null)
                        model.Y = yValue;

                    if (obj.TryGetLong("origin", out long originValue) && originValue != null)
                        model.Origin = originValue;

                    if (obj.TryGetBool("randomized", out bool randomizedValue) && randomizedValue != null)
                        model.Randomized = randomizedValue;


                    return model;
                }
            }
            /// <summary>Property for 'coordinate'</summary>
            public Gamestate.GamestateNebula.GamestateNebulaCoordinate? Coordinate { get; set; }

            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

            /// <summary>Property for 'radius'</summary>
            public int? Radius { get; set; }

            /// <summary>Property for 'galactic_object'</summary>
            public int? GalacticObject { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateNebula? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateNebula model = new GamestateNebula();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                    model.Coordinate = Gamestate.GamestateNebula.GamestateNebulaCoordinate.Bind(coordinateNestedObj);

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                if (obj.TryGetInt("radius", out int radiusValue) && radiusValue != null)
                    model.Radius = radiusValue;

                if (obj.TryGetInt("galactic_object", out int galacticobjectValue) && galacticobjectValue != null)
                    model.GalacticObject = galacticobjectValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestatePopItem
        {
            /// <summary>
            /// </summary>
            public class GamestatePopItemEthos
            {
                /// <summary>Property for 'ethic'</summary>
                public string? Ethic { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestatePopItemEthos? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestatePopItemEthos model = new GamestatePopItemEthos();
                    model.SourceObject = obj;

                    model.Ethic = obj.TryGetString("ethic", out string ethicStringValue) && ethicStringValue != "none" ? ethicStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'species'</summary>
            public int? Species { get; set; }

            /// <summary>Property for 'ethos'</summary>
            public Gamestate.GamestatePopItem.GamestatePopItemEthos? Ethos { get; set; }

            /// <summary>Property for 'pop_faction'</summary>
            public int? PopFaction { get; set; }

            /// <summary>Property for 'force_faction_evaluation'</summary>
            public bool? ForceFactionEvaluation { get; set; }

            /// <summary>Property for 'enslaved'</summary>
            public bool? Enslaved { get; set; }

            /// <summary>Property for 'job'</summary>
            public string? Job { get; set; }

            /// <summary>Property for 'category'</summary>
            public string? Category { get; set; }

            /// <summary>Property for 'planet'</summary>
            public int? Planet { get; set; }

            /// <summary>Property for 'crime'</summary>
            public float? Crime { get; set; }

            /// <summary>Property for 'power'</summary>
            public int? Power { get; set; }

            /// <summary>Property for 'diplomatic_weight'</summary>
            public float? DiplomaticWeight { get; set; }

            /// <summary>Property for 'happiness'</summary>
            public float? Happiness { get; set; }

            /// <summary>Property for 'can_migrate'</summary>
            public bool? CanMigrate { get; set; }

            /// <summary>Property for 'can_vote'</summary>
            public bool? CanVote { get; set; }

            /// <summary>Property for 'has_random_ethics'</summary>
            public bool? HasRandomEthics { get; set; }

            /// <summary>Property for 'can_fill_drone_job'</summary>
            public bool? CanFillDroneJob { get; set; }

            /// <summary>Property for 'can_fill_worker_job'</summary>
            public bool? CanFillWorkerJob { get; set; }

            /// <summary>Property for 'can_fill_specialist_job'</summary>
            public bool? CanFillSpecialistJob { get; set; }

            /// <summary>Property for 'can_fill_ruler_job'</summary>
            public bool? CanFillRulerJob { get; set; }

            /// <summary>Property for 'can_fill_precursor_job'</summary>
            public bool? CanFillPrecursorJob { get; set; }

            /// <summary>Property for 'amenities_usage'</summary>
            public int? AmenitiesUsage { get; set; }

            /// <summary>Property for 'housing_usage'</summary>
            public int? HousingUsage { get; set; }

            /// <summary>Property for 'approval_modifier'</summary>
            public string? ApprovalModifier { get; set; }

            /// <summary>Property for 'job_weights_cache'</summary>
            public List<int?>? JobWeightsCache { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestatePopItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestatePopItem model = new GamestatePopItem();
                model.SourceObject = obj;

                if (obj.TryGetInt("species", out int speciesValue) && speciesValue != null)
                    model.Species = speciesValue;

                if (obj.TryGetSaveObject("ethos", out SaveObject ethosNestedObj))
                    model.Ethos = Gamestate.GamestatePopItem.GamestatePopItemEthos.Bind(ethosNestedObj);

                if (obj.TryGetInt("pop_faction", out int popfactionValue) && popfactionValue != null)
                    model.PopFaction = popfactionValue;

                if (obj.TryGetBool("force_faction_evaluation", out bool forcefactionevaluationValue) && forcefactionevaluationValue != null)
                    model.ForceFactionEvaluation = forcefactionevaluationValue;

                if (obj.TryGetBool("enslaved", out bool enslavedValue) && enslavedValue != null)
                    model.Enslaved = enslavedValue;

                model.Job = obj.TryGetString("job", out string jobStringValue) && jobStringValue != "none" ? jobStringValue : null;

                model.Category = obj.TryGetString("category", out string categoryStringValue) && categoryStringValue != "none" ? categoryStringValue : null;

                if (obj.TryGetInt("planet", out int planetValue) && planetValue != null)
                    model.Planet = planetValue;

                if (obj.TryGetFloat("crime", out float crimeValue) && crimeValue != null)
                    model.Crime = crimeValue;

                if (obj.TryGetInt("power", out int powerValue) && powerValue != null)
                    model.Power = powerValue;

                if (obj.TryGetFloat("diplomatic_weight", out float diplomaticweightValue) && diplomaticweightValue != null)
                    model.DiplomaticWeight = diplomaticweightValue;

                if (obj.TryGetFloat("happiness", out float happinessValue) && happinessValue != null)
                    model.Happiness = happinessValue;

                if (obj.TryGetBool("can_migrate", out bool canmigrateValue) && canmigrateValue != null)
                    model.CanMigrate = canmigrateValue;

                if (obj.TryGetBool("can_vote", out bool canvoteValue) && canvoteValue != null)
                    model.CanVote = canvoteValue;

                if (obj.TryGetBool("has_random_ethics", out bool hasrandomethicsValue) && hasrandomethicsValue != null)
                    model.HasRandomEthics = hasrandomethicsValue;

                if (obj.TryGetBool("can_fill_drone_job", out bool canfilldronejobValue) && canfilldronejobValue != null)
                    model.CanFillDroneJob = canfilldronejobValue;

                if (obj.TryGetBool("can_fill_worker_job", out bool canfillworkerjobValue) && canfillworkerjobValue != null)
                    model.CanFillWorkerJob = canfillworkerjobValue;

                if (obj.TryGetBool("can_fill_specialist_job", out bool canfillspecialistjobValue) && canfillspecialistjobValue != null)
                    model.CanFillSpecialistJob = canfillspecialistjobValue;

                if (obj.TryGetBool("can_fill_ruler_job", out bool canfillrulerjobValue) && canfillrulerjobValue != null)
                    model.CanFillRulerJob = canfillrulerjobValue;

                if (obj.TryGetBool("can_fill_precursor_job", out bool canfillprecursorjobValue) && canfillprecursorjobValue != null)
                    model.CanFillPrecursorJob = canfillprecursorjobValue;

                if (obj.TryGetInt("amenities_usage", out int amenitiesusageValue) && amenitiesusageValue != null)
                    model.AmenitiesUsage = amenitiesusageValue;

                if (obj.TryGetInt("housing_usage", out int housingusageValue) && housingusageValue != null)
                    model.HousingUsage = housingusageValue;

                model.ApprovalModifier = obj.TryGetString("approval_modifier", out string approvalmodifierStringValue) && approvalmodifierStringValue != "none" ? approvalmodifierStringValue : null;

                // TODO: Bind complex type: JobWeightsCache (List<int?>)
                if (obj.TryGetSaveArray("job_weights_cache", out SaveArray jobweightscacheArray) && jobweightscacheArray != null)
                    model.JobWeightsCache = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (jobweightscacheArray != null)
                {
                    foreach (var item in jobweightscacheArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.JobWeightsCache.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateGalacticObjectItem
        {
            /// <summary>
            /// </summary>
            public class GamestateGalacticObjectItemHyperlaneItem
            {
                /// <summary>Property for 'to'</summary>
                public int? To { get; set; }

                /// <summary>Property for 'length'</summary>
                public int? Length { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateGalacticObjectItemHyperlaneItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateGalacticObjectItemHyperlaneItem model = new GamestateGalacticObjectItemHyperlaneItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("to", out int toValue) && toValue != null)
                        model.To = toValue;

                    if (obj.TryGetInt("length", out int lengthValue) && lengthValue != null)
                        model.Length = lengthValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateGalacticObjectItemFlags
            {
                /// <summary>Property for 'precursor_zroni_1'</summary>
                public int? PrecursorZroni1 { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateGalacticObjectItemFlags? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateGalacticObjectItemFlags model = new GamestateGalacticObjectItemFlags();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("precursor_zroni_1", out int precursorzroni1Value) && precursorzroni1Value != null)
                        model.PrecursorZroni1 = precursorzroni1Value;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateGalacticObjectItemTradeHub
            {
                /// <summary>Property for 'collected'</summary>
                public int? Collected { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateGalacticObjectItemTradeHub? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateGalacticObjectItemTradeHub model = new GamestateGalacticObjectItemTradeHub();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("collected", out int collectedValue) && collectedValue != null)
                        model.Collected = collectedValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateGalacticObjectItemTradePiracy
            {
                /// <summary>Property for 'throughput'</summary>
                public int? Throughput { get; set; }

                /// <summary>Property for 'total'</summary>
                public int? Total { get; set; }

                /// <summary>Property for 'max'</summary>
                public int? Max { get; set; }

                /// <summary>Property for 'active'</summary>
                public int? Active { get; set; }

                /// <summary>Property for 'used'</summary>
                public int? Used { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateGalacticObjectItemTradePiracy? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateGalacticObjectItemTradePiracy model = new GamestateGalacticObjectItemTradePiracy();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("throughput", out int throughputValue) && throughputValue != null)
                        model.Throughput = throughputValue;

                    if (obj.TryGetInt("total", out int totalValue) && totalValue != null)
                        model.Total = totalValue;

                    if (obj.TryGetInt("max", out int maxValue) && maxValue != null)
                        model.Max = maxValue;

                    if (obj.TryGetInt("active", out int activeValue) && activeValue != null)
                        model.Active = activeValue;

                    if (obj.TryGetInt("used", out int usedValue) && usedValue != null)
                        model.Used = usedValue;


                    return model;
                }
            }
            /// <summary>Property for 'coordinate'</summary>
            public Gamestate.GamestateNebula.GamestateNebulaCoordinate? Coordinate { get; set; }

            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

            /// <summary>Property for 'planet'</summary>
            public int? Planet { get; set; }

            /// <summary>Property for 'star_class'</summary>
            public string? StarClass { get; set; }

            /// <summary>Property for 'hyperlane'</summary>
            public List<Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemHyperlaneItem?>? Hyperlane { get; set; }

            /// <summary>Property for 'discovery'</summary>
            public List<int?>? Discovery { get; set; }

            /// <summary>Property for 'flags'</summary>
            public Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemFlags? Flags { get; set; }

            /// <summary>Property for 'initializer'</summary>
            public string? Initializer { get; set; }

            /// <summary>Property for 'inner_radius'</summary>
            public int? InnerRadius { get; set; }

            /// <summary>Property for 'outer_radius'</summary>
            public int? OuterRadius { get; set; }

            /// <summary>Property for 'starbases'</summary>
            public List<long?>? Starbases { get; set; }

            /// <summary>Property for 'trade_hub'</summary>
            public Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemTradeHub? TradeHub { get; set; }

            /// <summary>Property for 'trade_collection'</summary>
            public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? TradeCollection { get; set; }

            /// <summary>Property for 'trade_piracy'</summary>
            public Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemTradePiracy? TradePiracy { get; set; }

            /// <summary>Property for 'sector'</summary>
            public long? Sector { get; set; }

            /// <summary>Property for 'index'</summary>
            public int? Index { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateGalacticObjectItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateGalacticObjectItem model = new GamestateGalacticObjectItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                    model.Coordinate = Gamestate.GamestateNebula.GamestateNebulaCoordinate.Bind(coordinateNestedObj);

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                if (obj.TryGetInt("planet", out int planetValue) && planetValue != null)
                    model.Planet = planetValue;

                model.StarClass = obj.TryGetString("star_class", out string starclassStringValue) && starclassStringValue != "none" ? starclassStringValue : null;

                // TODO: Bind complex type: Hyperlane (List<Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemHyperlaneItem?>)
                if (obj.TryGetSaveArray("hyperlane", out SaveArray hyperlaneArray) && hyperlaneArray != null)
                    model.Hyperlane = new List<Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemHyperlaneItem?>(); // Initialize empty list

                // TODO: Bind complex type: Discovery (List<int?>)
                if (obj.TryGetSaveArray("discovery", out SaveArray discoveryArray) && discoveryArray != null)
                    model.Discovery = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (discoveryArray != null)
                {
                    foreach (var item in discoveryArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Discovery.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("flags", out SaveObject flagsNestedObj))
                    model.Flags = Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemFlags.Bind(flagsNestedObj);

                model.Initializer = obj.TryGetString("initializer", out string initializerStringValue) && initializerStringValue != "none" ? initializerStringValue : null;

                if (obj.TryGetInt("inner_radius", out int innerradiusValue) && innerradiusValue != null)
                    model.InnerRadius = innerradiusValue;

                if (obj.TryGetInt("outer_radius", out int outerradiusValue) && outerradiusValue != null)
                    model.OuterRadius = outerradiusValue;

                // TODO: Bind complex type: Starbases (List<long?>)
                if (obj.TryGetSaveArray("starbases", out SaveArray starbasesArray) && starbasesArray != null)
                    model.Starbases = new List<long?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (starbasesArray != null)
                {
                    foreach (var item in starbasesArray.Items)
                    {
                        if (item is Scalar<long> scalarValue)
                        {
                            model.Starbases.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("trade_hub", out SaveObject tradehubNestedObj))
                    model.TradeHub = Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemTradeHub.Bind(tradehubNestedObj);

                if (obj.TryGetSaveObject("trade_collection", out SaveObject tradecollectionNestedObj))
                    model.TradeCollection = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(tradecollectionNestedObj);

                if (obj.TryGetSaveObject("trade_piracy", out SaveObject tradepiracyNestedObj))
                    model.TradePiracy = Gamestate.GamestateGalacticObjectItem.GamestateGalacticObjectItemTradePiracy.Bind(tradepiracyNestedObj);

                if (obj.TryGetLong("sector", out long sectorValue) && sectorValue != null)
                    model.Sector = sectorValue;

                if (obj.TryGetInt("index", out int indexValue) && indexValue != null)
                    model.Index = indexValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateStarbaseMgr
        {
            /// <summary>
            /// </summary>
            public class GamestateStarbaseMgrStarbasesItem
            {
                /// <summary>
                /// </summary>
                public class GamestateStarbaseMgrStarbasesItemModules
                {
                    /// <summary>Property for 'shipyard'</summary>
                    public string? Shipyard { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateStarbaseMgrStarbasesItemModules? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateStarbaseMgrStarbasesItemModules model = new GamestateStarbaseMgrStarbasesItemModules();
                        model.SourceObject = obj;

                        model.Shipyard = obj.TryGetString("shipyard", out string shipyardStringValue) && shipyardStringValue != "none" ? shipyardStringValue : null;


                        return model;
                    }
                }
                /// <summary>Property for 'level'</summary>
                public string? Level { get; set; }

                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>Property for 'modules'</summary>
                public Gamestate.GamestateStarbaseMgr.GamestateStarbaseMgrStarbasesItem.GamestateStarbaseMgrStarbasesItemModules? Modules { get; set; }

                /// <summary>Property for 'buildings'</summary>
                public Dictionary<int, string>? Buildings { get; set; }

                /// <summary>Property for 'build_queue'</summary>
                public int? BuildQueue { get; set; }

                /// <summary>Property for 'shipyard_build_queue'</summary>
                public int? ShipyardBuildQueue { get; set; }

                /// <summary>Property for 'ship_design'</summary>
                public int? ShipDesign { get; set; }

                /// <summary>Property for 'station'</summary>
                public int? Station { get; set; }

                /// <summary>Property for 'orbitals'</summary>
                public Dictionary<long, long?>? Orbitals { get; set; }

                /// <summary>Property for 'construction_type'</summary>
                public string? ConstructionType { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateStarbaseMgrStarbasesItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateStarbaseMgrStarbasesItem model = new GamestateStarbaseMgrStarbasesItem();
                    model.SourceObject = obj;

                    model.Level = obj.TryGetString("level", out string levelStringValue) && levelStringValue != "none" ? levelStringValue : null;

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                    if (obj.TryGetSaveObject("modules", out SaveObject modulesNestedObj))
                        model.Modules = Gamestate.GamestateStarbaseMgr.GamestateStarbaseMgrStarbasesItem.GamestateStarbaseMgrStarbasesItemModules.Bind(modulesNestedObj);

                    // TODO: Bind complex type: Buildings (Dictionary<int, string>)
                    if (obj.TryGetSaveObject("buildings", out SaveObject buildingsDictObj) && buildingsDictObj != null)
                        model.Buildings = new Dictionary<int, string>(); // Initialize empty dictionary

                    if (obj.TryGetInt("build_queue", out int buildqueueValue) && buildqueueValue != null)
                        model.BuildQueue = buildqueueValue;

                    if (obj.TryGetInt("shipyard_build_queue", out int shipyardbuildqueueValue) && shipyardbuildqueueValue != null)
                        model.ShipyardBuildQueue = shipyardbuildqueueValue;

                    if (obj.TryGetInt("ship_design", out int shipdesignValue) && shipdesignValue != null)
                        model.ShipDesign = shipdesignValue;

                    if (obj.TryGetInt("station", out int stationValue) && stationValue != null)
                        model.Station = stationValue;

                    // TODO: Bind complex type: Orbitals (Dictionary<long, long?>)
                    if (obj.TryGetSaveObject("orbitals", out SaveObject orbitalsDictObj) && orbitalsDictObj != null)
                        model.Orbitals = new Dictionary<long, long?>(); // Initialize empty dictionary

                    model.ConstructionType = obj.TryGetString("construction_type", out string constructiontypeStringValue) && constructiontypeStringValue != "none" ? constructiontypeStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'starbases'</summary>
            public Dictionary<int, Gamestate.GamestateStarbaseMgr.GamestateStarbaseMgrStarbasesItem?>? Starbases { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateStarbaseMgr? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateStarbaseMgr model = new GamestateStarbaseMgr();
                model.SourceObject = obj;

                // TODO: Bind complex type: Starbases (Dictionary<int, Gamestate.GamestateStarbaseMgr.GamestateStarbaseMgrStarbasesItem?>)
                if (obj.TryGetSaveObject("starbases", out SaveObject starbasesDictObj) && starbasesDictObj != null)
                    model.Starbases = new Dictionary<int, Gamestate.GamestateStarbaseMgr.GamestateStarbaseMgrStarbasesItem?>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestatePlanets
        {
            /// <summary>
            /// </summary>
            public class GamestatePlanetsPlanet
            {
                /// <summary>
                /// </summary>
                public class GamestatePlanetsPlanetNone
                {
                    /// <summary>
                    /// </summary>
                    public class GamestatePlanetsPlanetNoneName
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestatePlanetsPlanetNoneNameVariablesItem
                        {
                            /// <summary>Property for 'key'</summary>
                            public string? Key { get; set; }

                            /// <summary>Property for 'value'</summary>
                            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Value { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestatePlanetsPlanetNoneNameVariablesItem? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestatePlanetsPlanetNoneNameVariablesItem model = new GamestatePlanetsPlanetNoneNameVariablesItem();
                                model.SourceObject = obj;

                                model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                                if (obj.TryGetSaveObject("value", out SaveObject valueNestedObj))
                                    model.Value = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(valueNestedObj);


                                return model;
                            }
                        }
                        /// <summary>Property for 'key'</summary>
                        public string? Key { get; set; }

                        /// <summary>Property for 'variables'</summary>
                        public List<Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.GamestatePlanetsPlanetNoneNameVariablesItem?>? Variables { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestatePlanetsPlanetNoneName? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestatePlanetsPlanetNoneName model = new GamestatePlanetsPlanetNoneName();
                            model.SourceObject = obj;

                            model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                            // TODO: Bind complex type: Variables (List<Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.GamestatePlanetsPlanetNoneNameVariablesItem?>)
                            if (obj.TryGetSaveArray("variables", out SaveArray variablesArray) && variablesArray != null)
                                model.Variables = new List<Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.GamestatePlanetsPlanetNoneNameVariablesItem?>(); // Initialize empty list


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestatePlanetsPlanetNoneCoordinate
                    {
                        /// <summary>Property for 'x'</summary>
                        public float? X { get; set; }

                        /// <summary>Property for 'y'</summary>
                        public float? Y { get; set; }

                        /// <summary>Property for 'origin'</summary>
                        public int? Origin { get; set; }

                        /// <summary>Property for 'randomized'</summary>
                        public bool? Randomized { get; set; }

                        /// <summary>Property for 'visual_height'</summary>
                        public float? VisualHeight { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestatePlanetsPlanetNoneCoordinate? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestatePlanetsPlanetNoneCoordinate model = new GamestatePlanetsPlanetNoneCoordinate();
                            model.SourceObject = obj;

                            if (obj.TryGetFloat("x", out float xValue) && xValue != null)
                                model.X = xValue;

                            if (obj.TryGetFloat("y", out float yValue) && yValue != null)
                                model.Y = yValue;

                            if (obj.TryGetInt("origin", out int originValue) && originValue != null)
                                model.Origin = originValue;

                            if (obj.TryGetBool("randomized", out bool randomizedValue) && randomizedValue != null)
                                model.Randomized = randomizedValue;

                            if (obj.TryGetFloat("visual_height", out float visualheightValue) && visualheightValue != null)
                                model.VisualHeight = visualheightValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'name'</summary>
                    public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName? Name { get; set; }

                    /// <summary>Property for 'planet_class'</summary>
                    public string? PlanetClass { get; set; }

                    /// <summary>Property for 'coordinate'</summary>
                    public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

                    /// <summary>Property for 'orbit'</summary>
                    public int? Orbit { get; set; }

                    /// <summary>Property for 'planet_size'</summary>
                    public int? PlanetSize { get; set; }

                    /// <summary>Property for 'bombardment_damage'</summary>
                    public int? BombardmentDamage { get; set; }

                    /// <summary>Property for 'last_bombardment'</summary>
                    public string? LastBombardment { get; set; }

                    /// <summary>Property for 'automated_development'</summary>
                    public bool? AutomatedDevelopment { get; set; }

                    /// <summary>Property for 'kill_pop'</summary>
                    public string? KillPop { get; set; }

                    /// <summary>Property for 'build_queue'</summary>
                    public int? BuildQueue { get; set; }

                    /// <summary>Property for 'army_build_queue'</summary>
                    public int? ArmyBuildQueue { get; set; }

                    /// <summary>Property for 'planet_orbitals'</summary>
                    public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? PlanetOrbitals { get; set; }

                    /// <summary>Property for 'entity'</summary>
                    public int? Entity { get; set; }

                    /// <summary>Property for 'favorite_jobs'</summary>
                    public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? FavoriteJobs { get; set; }

                    /// <summary>Property for 'stability'</summary>
                    public int? Stability { get; set; }

                    /// <summary>Property for 'migration'</summary>
                    public int? Migration { get; set; }

                    /// <summary>Property for 'crime'</summary>
                    public int? Crime { get; set; }

                    /// <summary>Property for 'amenities'</summary>
                    public int? Amenities { get; set; }

                    /// <summary>Property for 'amenities_usage'</summary>
                    public int? AmenitiesUsage { get; set; }

                    /// <summary>Property for 'free_amenities'</summary>
                    public int? FreeAmenities { get; set; }

                    /// <summary>Property for 'free_housing'</summary>
                    public int? FreeHousing { get; set; }

                    /// <summary>Property for 'total_housing'</summary>
                    public int? TotalHousing { get; set; }

                    /// <summary>Property for 'housing_usage'</summary>
                    public int? HousingUsage { get; set; }

                    /// <summary>Property for 'employable_pops'</summary>
                    public int? EmployablePops { get; set; }

                    /// <summary>Property for 'num_sapient_pops'</summary>
                    public int? NumSapientPops { get; set; }

                    /// <summary>Property for 'recalc_pops'</summary>
                    public bool? RecalcPops { get; set; }

                    /// <summary>Property for 'manual_designation_changed_date'</summary>
                    public string? ManualDesignationChangedDate { get; set; }

                    /// <summary>Property for 'ascension_tier'</summary>
                    public int? AscensionTier { get; set; }

                    /// <summary>Property for 'auto_slots_taken'</summary>
                    public List<bool?>? AutoSlotsTaken { get; set; }

                    /// <summary>Property for 'last_auto_mod_index'</summary>
                    public int? LastAutoModIndex { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestatePlanetsPlanetNone? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestatePlanetsPlanetNone model = new GamestatePlanetsPlanetNone();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                            model.Name = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.Bind(nameNestedObj);

                        model.PlanetClass = obj.TryGetString("planet_class", out string planetclassStringValue) && planetclassStringValue != "none" ? planetclassStringValue : null;

                        if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                            model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                        if (obj.TryGetInt("orbit", out int orbitValue) && orbitValue != null)
                            model.Orbit = orbitValue;

                        if (obj.TryGetInt("planet_size", out int planetsizeValue) && planetsizeValue != null)
                            model.PlanetSize = planetsizeValue;

                        if (obj.TryGetInt("bombardment_damage", out int bombardmentdamageValue) && bombardmentdamageValue != null)
                            model.BombardmentDamage = bombardmentdamageValue;

                        model.LastBombardment = obj.TryGetString("last_bombardment", out string lastbombardmentStringValue) && lastbombardmentStringValue != "none" ? lastbombardmentStringValue : null;

                        if (obj.TryGetBool("automated_development", out bool automateddevelopmentValue) && automateddevelopmentValue != null)
                            model.AutomatedDevelopment = automateddevelopmentValue;

                        model.KillPop = obj.TryGetString("kill_pop", out string killpopStringValue) && killpopStringValue != "none" ? killpopStringValue : null;

                        if (obj.TryGetInt("build_queue", out int buildqueueValue) && buildqueueValue != null)
                            model.BuildQueue = buildqueueValue;

                        if (obj.TryGetInt("army_build_queue", out int armybuildqueueValue) && armybuildqueueValue != null)
                            model.ArmyBuildQueue = armybuildqueueValue;

                        if (obj.TryGetSaveObject("planet_orbitals", out SaveObject planetorbitalsNestedObj))
                            model.PlanetOrbitals = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(planetorbitalsNestedObj);

                        if (obj.TryGetInt("entity", out int entityValue) && entityValue != null)
                            model.Entity = entityValue;

                        if (obj.TryGetSaveObject("favorite_jobs", out SaveObject favoritejobsNestedObj))
                            model.FavoriteJobs = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(favoritejobsNestedObj);

                        if (obj.TryGetInt("stability", out int stabilityValue) && stabilityValue != null)
                            model.Stability = stabilityValue;

                        if (obj.TryGetInt("migration", out int migrationValue) && migrationValue != null)
                            model.Migration = migrationValue;

                        if (obj.TryGetInt("crime", out int crimeValue) && crimeValue != null)
                            model.Crime = crimeValue;

                        if (obj.TryGetInt("amenities", out int amenitiesValue) && amenitiesValue != null)
                            model.Amenities = amenitiesValue;

                        if (obj.TryGetInt("amenities_usage", out int amenitiesusageValue) && amenitiesusageValue != null)
                            model.AmenitiesUsage = amenitiesusageValue;

                        if (obj.TryGetInt("free_amenities", out int freeamenitiesValue) && freeamenitiesValue != null)
                            model.FreeAmenities = freeamenitiesValue;

                        if (obj.TryGetInt("free_housing", out int freehousingValue) && freehousingValue != null)
                            model.FreeHousing = freehousingValue;

                        if (obj.TryGetInt("total_housing", out int totalhousingValue) && totalhousingValue != null)
                            model.TotalHousing = totalhousingValue;

                        if (obj.TryGetInt("housing_usage", out int housingusageValue) && housingusageValue != null)
                            model.HousingUsage = housingusageValue;

                        if (obj.TryGetInt("employable_pops", out int employablepopsValue) && employablepopsValue != null)
                            model.EmployablePops = employablepopsValue;

                        if (obj.TryGetInt("num_sapient_pops", out int numsapientpopsValue) && numsapientpopsValue != null)
                            model.NumSapientPops = numsapientpopsValue;

                        if (obj.TryGetBool("recalc_pops", out bool recalcpopsValue) && recalcpopsValue != null)
                            model.RecalcPops = recalcpopsValue;

                        model.ManualDesignationChangedDate = obj.TryGetString("manual_designation_changed_date", out string manualdesignationchangeddateStringValue) && manualdesignationchangeddateStringValue != "none" ? manualdesignationchangeddateStringValue : null;

                        if (obj.TryGetInt("ascension_tier", out int ascensiontierValue) && ascensiontierValue != null)
                            model.AscensionTier = ascensiontierValue;

                        // TODO: Bind complex type: AutoSlotsTaken (List<bool?>)
                        if (obj.TryGetSaveArray("auto_slots_taken", out SaveArray autoslotstakenArray) && autoslotstakenArray != null)
                            model.AutoSlotsTaken = new List<bool?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (autoslotstakenArray != null)
                {
                    foreach (var item in autoslotstakenArray.Items)
                    {
                        if (item is Scalar<bool> scalarValue)
                        {
                            model.AutoSlotsTaken.Add(scalarValue.Value);
                        }
                    }
                }

                        if (obj.TryGetInt("last_auto_mod_index", out int lastautomodindexValue) && lastautomodindexValue != null)
                            model.LastAutoModIndex = lastautomodindexValue;


                        return model;
                    }
                }
                /// <summary>Property for 'none'</summary>
                public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone? None { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestatePlanetsPlanet? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestatePlanetsPlanet model = new GamestatePlanetsPlanet();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                        model.None = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.Bind(noneNestedObj);


                    return model;
                }
            }
            /// <summary>Property for 'planet'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet? Planet { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestatePlanets? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestatePlanets model = new GamestatePlanets();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("planet", out SaveObject planetNestedObj))
                    model.Planet = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.Bind(planetNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateAstralRifts
        {
            /// <summary>
            /// </summary>
            public class GamestateAstralRiftsRiftsItem
            {
                /// <summary>
                /// </summary>
                public class GamestateAstralRiftsRiftsItemAEvent
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateAstralRiftsRiftsItemAEventScope
                    {
                        /// <summary>Property for 'type'</summary>
                        public string? AType { get; set; }

                        /// <summary>Property for 'id'</summary>
                        public int? Id { get; set; }

                        /// <summary>Property for 'opener_id'</summary>
                        public long? OpenerId { get; set; }

                        /// <summary>Property for 'random'</summary>
                        public List<int?>? Random { get; set; }

                        /// <summary>Property for 'random_allowed'</summary>
                        public bool? RandomAllowed { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateAstralRiftsRiftsItemAEventScope? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateAstralRiftsRiftsItemAEventScope model = new GamestateAstralRiftsRiftsItemAEventScope();
                            model.SourceObject = obj;

                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                            if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                model.Id = idValue;

                            if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                model.OpenerId = openeridValue;

                            // TODO: Bind complex type: Random (List<int?>)
                            if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                            if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                model.RandomAllowed = randomallowedValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'scope'</summary>
                    public Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent.GamestateAstralRiftsRiftsItemAEventScope? Scope { get; set; }

                    /// <summary>Property for 'effect'</summary>
                    public string? Effect { get; set; }

                    /// <summary>Property for 'picture'</summary>
                    public string? Picture { get; set; }

                    /// <summary>Property for 'index'</summary>
                    public int? Index { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateAstralRiftsRiftsItemAEvent? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateAstralRiftsRiftsItemAEvent model = new GamestateAstralRiftsRiftsItemAEvent();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("scope", out SaveObject scopeNestedObj))
                            model.Scope = Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent.GamestateAstralRiftsRiftsItemAEventScope.Bind(scopeNestedObj);

                        model.Effect = obj.TryGetString("effect", out string effectStringValue) && effectStringValue != "none" ? effectStringValue : null;

                        model.Picture = obj.TryGetString("picture", out string pictureStringValue) && pictureStringValue != "none" ? pictureStringValue : null;

                        if (obj.TryGetInt("index", out int indexValue) && indexValue != null)
                            model.Index = indexValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateAstralRiftsRiftsItemFlags
                {
                    /// <summary>Property for 'split_opened_rift'</summary>
                    public int? SplitOpenedRift { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateAstralRiftsRiftsItemFlags? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateAstralRiftsRiftsItemFlags model = new GamestateAstralRiftsRiftsItemFlags();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("split_opened_rift", out int splitopenedriftValue) && splitopenedriftValue != null)
                            model.SplitOpenedRift = splitopenedriftValue;


                        return model;
                    }
                }
                /// <summary>Property for 'name'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

                /// <summary>Property for 'coordinate'</summary>
                public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

                /// <summary>Property for 'owner'</summary>
                public int? Owner { get; set; }

                /// <summary>Property for 'explorer_fleet'</summary>
                public long? ExplorerFleet { get; set; }

                /// <summary>Property for 'leader'</summary>
                public long? Leader { get; set; }

                /// <summary>Property for 'explorer'</summary>
                public long? Explorer { get; set; }

                /// <summary>Property for 'clues'</summary>
                public int? Clues { get; set; }

                /// <summary>Property for 'last_roll'</summary>
                public int? LastRoll { get; set; }

                /// <summary>Property for 'days_left'</summary>
                public int? DaysLeft { get; set; }

                /// <summary>Property for 'difficulty'</summary>
                public int? Difficulty { get; set; }

                /// <summary>Property for 'event'</summary>
                public Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent? AEvent { get; set; }

                /// <summary>Property for 'event_choice'</summary>
                public string? EventChoice { get; set; }

                /// <summary>Property for 'on_roll_failed'</summary>
                public string? OnRollFailed { get; set; }

                /// <summary>Property for 'fail_probability'</summary>
                public int? FailProbability { get; set; }

                /// <summary>Property for 'cumulated_fail_probability'</summary>
                public int? CumulatedFailProbability { get; set; }

                /// <summary>Property for 'status'</summary>
                public string? Status { get; set; }

                /// <summary>Property for 'flags'</summary>
                public Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemFlags? Flags { get; set; }

                /// <summary>Property for 'interactable_by'</summary>
                public List<int?>? InteractableBy { get; set; }

                /// <summary>Property for 'astral_rift_orbitals'</summary>
                public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? AstralRiftOrbitals { get; set; }

                /// <summary>Property for 'shipclass_orbital_station'</summary>
                public int? ShipclassOrbitalStation { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateAstralRiftsRiftsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateAstralRiftsRiftsItem model = new GamestateAstralRiftsRiftsItem();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                        model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                    if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                        model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                    if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                        model.Owner = ownerValue;

                    if (obj.TryGetLong("explorer_fleet", out long explorerfleetValue) && explorerfleetValue != null)
                        model.ExplorerFleet = explorerfleetValue;

                    if (obj.TryGetLong("leader", out long leaderValue) && leaderValue != null)
                        model.Leader = leaderValue;

                    if (obj.TryGetLong("explorer", out long explorerValue) && explorerValue != null)
                        model.Explorer = explorerValue;

                    if (obj.TryGetInt("clues", out int cluesValue) && cluesValue != null)
                        model.Clues = cluesValue;

                    if (obj.TryGetInt("last_roll", out int lastrollValue) && lastrollValue != null)
                        model.LastRoll = lastrollValue;

                    if (obj.TryGetInt("days_left", out int daysleftValue) && daysleftValue != null)
                        model.DaysLeft = daysleftValue;

                    if (obj.TryGetInt("difficulty", out int difficultyValue) && difficultyValue != null)
                        model.Difficulty = difficultyValue;

                    if (obj.TryGetSaveObject("event", out SaveObject aeventNestedObj))
                        model.AEvent = Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent.Bind(aeventNestedObj);

                    model.EventChoice = obj.TryGetString("event_choice", out string eventchoiceStringValue) && eventchoiceStringValue != "none" ? eventchoiceStringValue : null;

                    model.OnRollFailed = obj.TryGetString("on_roll_failed", out string onrollfailedStringValue) && onrollfailedStringValue != "none" ? onrollfailedStringValue : null;

                    if (obj.TryGetInt("fail_probability", out int failprobabilityValue) && failprobabilityValue != null)
                        model.FailProbability = failprobabilityValue;

                    if (obj.TryGetInt("cumulated_fail_probability", out int cumulatedfailprobabilityValue) && cumulatedfailprobabilityValue != null)
                        model.CumulatedFailProbability = cumulatedfailprobabilityValue;

                    model.Status = obj.TryGetString("status", out string statusStringValue) && statusStringValue != "none" ? statusStringValue : null;

                    if (obj.TryGetSaveObject("flags", out SaveObject flagsNestedObj))
                        model.Flags = Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemFlags.Bind(flagsNestedObj);

                    // TODO: Bind complex type: InteractableBy (List<int?>)
                    if (obj.TryGetSaveArray("interactable_by", out SaveArray interactablebyArray) && interactablebyArray != null)
                        model.InteractableBy = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (interactablebyArray != null)
                {
                    foreach (var item in interactablebyArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.InteractableBy.Add(scalarValue.Value);
                        }
                    }
                }

                    if (obj.TryGetSaveObject("astral_rift_orbitals", out SaveObject astralriftorbitalsNestedObj))
                        model.AstralRiftOrbitals = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(astralriftorbitalsNestedObj);

                    if (obj.TryGetInt("shipclass_orbital_station", out int shipclassorbitalstationValue) && shipclassorbitalstationValue != null)
                        model.ShipclassOrbitalStation = shipclassorbitalstationValue;


                    return model;
                }
            }
            /// <summary>Property for 'rifts'</summary>
            public Dictionary<int, Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem?>? Rifts { get; set; }

            /// <summary>Property for 'astral_rift_event_pool'</summary>
            public Dictionary<int, List<string>>? AstralRiftEventPool { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateAstralRifts? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateAstralRifts model = new GamestateAstralRifts();
                model.SourceObject = obj;

                // TODO: Bind complex type: Rifts (Dictionary<int, Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem?>)
                if (obj.TryGetSaveObject("rifts", out SaveObject riftsDictObj) && riftsDictObj != null)
                    model.Rifts = new Dictionary<int, Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem?>(); // Initialize empty dictionary

                // TODO: Bind complex type: AstralRiftEventPool (Dictionary<int, List<string>>)
                if (obj.TryGetSaveObject("astral_rift_event_pool", out SaveObject astralrifteventpoolDictObj) && astralrifteventpoolDictObj != null)
                    model.AstralRiftEventPool = new Dictionary<int, List<string>>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateCountryItem
        {
            /// <summary>
            /// </summary>
            public class GamestateCountryItemFlag
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemFlagIcon
                {
                    /// <summary>Property for 'category'</summary>
                    public string? Category { get; set; }

                    /// <summary>Property for 'file'</summary>
                    public string? File { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemFlagIcon? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemFlagIcon model = new GamestateCountryItemFlagIcon();
                        model.SourceObject = obj;

                        model.Category = obj.TryGetString("category", out string categoryStringValue) && categoryStringValue != "none" ? categoryStringValue : null;

                        model.File = obj.TryGetString("file", out string fileStringValue) && fileStringValue != "none" ? fileStringValue : null;


                        return model;
                    }
                }
                /// <summary>Property for 'icon'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlag.GamestateCountryItemFlagIcon? Icon { get; set; }

                /// <summary>Property for 'background'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlag.GamestateCountryItemFlagIcon? Background { get; set; }

                /// <summary>Property for 'colors'</summary>
                public List<string>? Colors { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemFlag? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemFlag model = new GamestateCountryItemFlag();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("icon", out SaveObject iconNestedObj))
                        model.Icon = Gamestate.GamestateCountryItem.GamestateCountryItemFlag.GamestateCountryItemFlagIcon.Bind(iconNestedObj);

                    if (obj.TryGetSaveObject("background", out SaveObject backgroundNestedObj))
                        model.Background = Gamestate.GamestateCountryItem.GamestateCountryItemFlag.GamestateCountryItemFlagIcon.Bind(backgroundNestedObj);

                    // TODO: Bind complex type: Colors (List<string>)
                    if (obj.TryGetSaveArray("colors", out SaveArray colorsArray) && colorsArray != null)
                        model.Colors = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (colorsArray != null)
                {
                    foreach (var item in colorsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.Colors.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemTechStatus
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemTechStatusPhysicsQueueItem
                {
                    /// <summary>Property for 'progress'</summary>
                    public float? Progress { get; set; }

                    /// <summary>Property for 'technology'</summary>
                    public string? Technology { get; set; }

                    /// <summary>Property for 'date'</summary>
                    public DateTime? Date { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemTechStatusPhysicsQueueItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemTechStatusPhysicsQueueItem model = new GamestateCountryItemTechStatusPhysicsQueueItem();
                        model.SourceObject = obj;

                        if (obj.TryGetFloat("progress", out float progressValue) && progressValue != null)
                            model.Progress = progressValue;

                        model.Technology = obj.TryGetString("technology", out string technologyStringValue) && technologyStringValue != "none" ? technologyStringValue : null;

                        if (obj.TryGetDateTime("date", out DateTime dateValue) && dateValue != null)
                            model.Date = dateValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemTechStatusSocietyQueueItem
                {
                    /// <summary>Property for 'technology'</summary>
                    public string? Technology { get; set; }

                    /// <summary>Property for 'date'</summary>
                    public DateTime? Date { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemTechStatusSocietyQueueItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemTechStatusSocietyQueueItem model = new GamestateCountryItemTechStatusSocietyQueueItem();
                        model.SourceObject = obj;

                        model.Technology = obj.TryGetString("technology", out string technologyStringValue) && technologyStringValue != "none" ? technologyStringValue : null;

                        if (obj.TryGetDateTime("date", out DateTime dateValue) && dateValue != null)
                            model.Date = dateValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemTechStatusStoredTechpointsForTech
                {
                    /// <summary>Property for 'tech_terrestrial_sculpting'</summary>
                    public float? TechTerrestrialSculpting { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemTechStatusStoredTechpointsForTech? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemTechStatusStoredTechpointsForTech model = new GamestateCountryItemTechStatusStoredTechpointsForTech();
                        model.SourceObject = obj;

                        if (obj.TryGetFloat("tech_terrestrial_sculpting", out float techterrestrialsculptingValue) && techterrestrialsculptingValue != null)
                            model.TechTerrestrialSculpting = techterrestrialsculptingValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemTechStatusPotential
                {
                    /// <summary>Property for 'tech_arcane_deciphering'</summary>
                    public string? TechArcaneDeciphering { get; set; }

                    /// <summary>Property for 'tech_archeology_lab_ancrel'</summary>
                    public string? TechArcheologyLabAncrel { get; set; }

                    /// <summary>Property for 'tech_archaeostudies'</summary>
                    public string? TechArchaeostudies { get; set; }

                    /// <summary>Property for 'tech_rift_sphere'</summary>
                    public string? TechRiftSphere { get; set; }

                    /// <summary>Property for 'tech_astral_harvesting'</summary>
                    public string? TechAstralHarvesting { get; set; }

                    /// <summary>Property for 'tech_industrial_storm_protection'</summary>
                    public string? TechIndustrialStormProtection { get; set; }

                    /// <summary>Property for 'tech_gargantuan_evolution'</summary>
                    public string? TechGargantuanEvolution { get; set; }

                    /// <summary>Property for 'tech_lgate_activation'</summary>
                    public string? TechLgateActivation { get; set; }

                    /// <summary>Property for 'tech_cruisers'</summary>
                    public string? TechCruisers { get; set; }

                    /// <summary>Property for 'tech_corvette_hull_1'</summary>
                    public string? TechCorvetteHull1 { get; set; }

                    /// <summary>Property for 'tech_destroyer_build_speed'</summary>
                    public string? TechDestroyerBuildSpeed { get; set; }

                    /// <summary>Property for 'tech_destroyer_hull_1'</summary>
                    public string? TechDestroyerHull1 { get; set; }

                    /// <summary>Property for 'tech_starbase_4'</summary>
                    public string? TechStarbase4 { get; set; }

                    /// <summary>Property for 'tech_habitat_1'</summary>
                    public string? TechHabitat1 { get; set; }

                    /// <summary>Property for 'tech_modular_engineering'</summary>
                    public string? TechModularEngineering { get; set; }

                    /// <summary>Property for 'tech_strike_craft_2'</summary>
                    public string? TechStrikeCraft2 { get; set; }

                    /// <summary>Property for 'tech_ship_armor_4'</summary>
                    public string? TechShipArmor4 { get; set; }

                    /// <summary>Property for 'tech_thrusters_2'</summary>
                    public string? TechThrusters2 { get; set; }

                    /// <summary>Property for 'tech_defense_platform_hull_1'</summary>
                    public string? TechDefensePlatformHull1 { get; set; }

                    /// <summary>Property for 'tech_powered_exoskeletons'</summary>
                    public string? TechPoweredExoskeletons { get; set; }

                    /// <summary>Property for 'tech_space_mining_1'</summary>
                    public string? TechSpaceMining1 { get; set; }

                    /// <summary>Property for 'tech_mining_2'</summary>
                    public string? TechMining2 { get; set; }

                    /// <summary>Property for 'tech_mineral_purification_1'</summary>
                    public string? TechMineralPurification1 { get; set; }

                    /// <summary>Property for 'tech_alloys_1'</summary>
                    public string? TechAlloys1 { get; set; }

                    /// <summary>Property for 'tech_luxuries_1'</summary>
                    public string? TechLuxuries1 { get; set; }

                    /// <summary>Property for 'tech_afterburners_1'</summary>
                    public string? TechAfterburners1 { get; set; }

                    /// <summary>Property for 'tech_construction_templates'</summary>
                    public string? TechConstructionTemplates { get; set; }

                    /// <summary>Property for 'tech_housing_2'</summary>
                    public string? TechHousing2 { get; set; }

                    /// <summary>Property for 'tech_mass_drivers_2'</summary>
                    public string? TechMassDrivers2 { get; set; }

                    /// <summary>Property for 'tech_flak_batteries_2'</summary>
                    public string? TechFlakBatteries2 { get; set; }

                    /// <summary>Property for 'tech_missiles_2'</summary>
                    public string? TechMissiles2 { get; set; }

                    /// <summary>Property for 'tech_torpedoes_2'</summary>
                    public string? TechTorpedoes2 { get; set; }

                    /// <summary>Property for 'tech_subspace_drive'</summary>
                    public string? TechSubspaceDrive { get; set; }

                    /// <summary>Property for 'tech_unusual_senses'</summary>
                    public string? TechUnusualSenses { get; set; }

                    /// <summary>Property for 'tech_new_numbers'</summary>
                    public string? TechNewNumbers { get; set; }

                    /// <summary>Property for 'tech_trinary_computing'</summary>
                    public string? TechTrinaryComputing { get; set; }

                    /// <summary>Property for 'tech_atmospheric_orbital_mechanics'</summary>
                    public string? TechAtmosphericOrbitalMechanics { get; set; }

                    /// <summary>Property for 'tech_predatory_tactics'</summary>
                    public string? TechPredatoryTactics { get; set; }

                    /// <summary>Property for 'tech_satisfying_insults'</summary>
                    public string? TechSatisfyingInsults { get; set; }

                    /// <summary>Property for 'tech_compact_living'</summary>
                    public string? TechCompactLiving { get; set; }

                    /// <summary>Property for 'tech_alien_topography'</summary>
                    public string? TechAlienTopography { get; set; }

                    /// <summary>Property for 'tech_xeno_aesthetics'</summary>
                    public string? TechXenoAesthetics { get; set; }

                    /// <summary>Property for 'tech_lost_building_methods'</summary>
                    public string? TechLostBuildingMethods { get; set; }

                    /// <summary>Property for 'tech_supreme_alloy'</summary>
                    public string? TechSupremeAlloy { get; set; }

                    /// <summary>Property for 'tech_ordered_retreat'</summary>
                    public string? TechOrderedRetreat { get; set; }

                    /// <summary>Property for 'tech_temple_of_transportation'</summary>
                    public string? TechTempleOfTransportation { get; set; }

                    /// <summary>Property for 'tech_gravity_wells'</summary>
                    public string? TechGravityWells { get; set; }

                    /// <summary>Property for 'tech_asteroidal_carapace'</summary>
                    public string? TechAsteroidalCarapace { get; set; }

                    /// <summary>Property for 'tech_boarding_cables'</summary>
                    public string? TechBoardingCables { get; set; }

                    /// <summary>Property for 'tech_akx_worm_1'</summary>
                    public string? TechAkxWorm1 { get; set; }

                    /// <summary>Property for 'tech_orbital_arc_furnace'</summary>
                    public string? TechOrbitalArcFurnace { get; set; }

                    /// <summary>Property for 'tech_orbital_trash_dispersal'</summary>
                    public string? TechOrbitalTrashDispersal { get; set; }

                    /// <summary>Property for 'tech_basic_science_lab_2'</summary>
                    public string? TechBasicScienceLab2 { get; set; }

                    /// <summary>Property for 'tech_curator_lab'</summary>
                    public string? TechCuratorLab { get; set; }

                    /// <summary>Property for 'tech_space_science_1'</summary>
                    public string? TechSpaceScience1 { get; set; }

                    /// <summary>Property for 'tech_self_aware_logic'</summary>
                    public string? TechSelfAwareLogic { get; set; }

                    /// <summary>Property for 'tech_combat_computers_1'</summary>
                    public string? TechCombatComputers1 { get; set; }

                    /// <summary>Property for 'tech_cold_fusion_power'</summary>
                    public string? TechColdFusionPower { get; set; }

                    /// <summary>Property for 'tech_reactor_boosters_2'</summary>
                    public string? TechReactorBoosters2 { get; set; }

                    /// <summary>Property for 'tech_shields_2'</summary>
                    public string? TechShields2 { get; set; }

                    /// <summary>Property for 'tech_sensors_3'</summary>
                    public string? TechSensors3 { get; set; }

                    /// <summary>Property for 'tech_power_plant_3'</summary>
                    public string? TechPowerPlant3 { get; set; }

                    /// <summary>Property for 'tech_hyper_drive_2'</summary>
                    public string? TechHyperDrive2 { get; set; }

                    /// <summary>Property for 'tech_lasers_2'</summary>
                    public string? TechLasers2 { get; set; }

                    /// <summary>Property for 'tech_pd_tracking_2'</summary>
                    public string? TechPdTracking2 { get; set; }

                    /// <summary>Property for 'tech_mining_drone_weapon_1'</summary>
                    public string? TechMiningDroneWeapon1 { get; set; }

                    /// <summary>Property for 'tech_space_cloud_weapon_1'</summary>
                    public string? TechSpaceCloudWeapon1 { get; set; }

                    /// <summary>Property for 'null_void_beam'</summary>
                    public string? NullVoidBeam { get; set; }

                    /// <summary>Property for 'tech_eco_simulation'</summary>
                    public string? TechEcoSimulation { get; set; }

                    /// <summary>Property for 'tech_alien_life_studies'</summary>
                    public string? TechAlienLifeStudies { get; set; }

                    /// <summary>Property for 'tech_colonization_2'</summary>
                    public string? TechColonization2 { get; set; }

                    /// <summary>Property for 'tech_mountain_range'</summary>
                    public string? TechMountainRange { get; set; }

                    /// <summary>Property for 'tech_volcano'</summary>
                    public string? TechVolcano { get; set; }

                    /// <summary>Property for 'tech_dense_jungle'</summary>
                    public string? TechDenseJungle { get; set; }

                    /// <summary>Property for 'tech_quicksand_basin'</summary>
                    public string? TechQuicksandBasin { get; set; }

                    /// <summary>Property for 'tech_noxious_swamp'</summary>
                    public string? TechNoxiousSwamp { get; set; }

                    /// <summary>Property for 'tech_massive_glacier'</summary>
                    public string? TechMassiveGlacier { get; set; }

                    /// <summary>Property for 'tech_deep_sinkhole'</summary>
                    public string? TechDeepSinkhole { get; set; }

                    /// <summary>Property for 'tech_terrestrial_sculpting'</summary>
                    public string? TechTerrestrialSculpting { get; set; }

                    /// <summary>Property for 'tech_vitality_boosters'</summary>
                    public string? TechVitalityBoosters { get; set; }

                    /// <summary>Property for 'tech_epigenetic_triggers'</summary>
                    public string? TechEpigeneticTriggers { get; set; }

                    /// <summary>Property for 'tech_cloning'</summary>
                    public string? TechCloning { get; set; }

                    /// <summary>Property for 'tech_doctrine_fleet_size_1'</summary>
                    public string? TechDoctrineFleetSize1 { get; set; }

                    /// <summary>Property for 'tech_interstellar_fleet_traditions'</summary>
                    public string? TechInterstellarFleetTraditions { get; set; }

                    /// <summary>Property for 'tech_doctrine_navy_size_1'</summary>
                    public string? TechDoctrineNavySize1 { get; set; }

                    /// <summary>Property for 'tech_ground_defense_planning'</summary>
                    public string? TechGroundDefensePlanning { get; set; }

                    /// <summary>Property for 'tech_galactic_ambitions'</summary>
                    public string? TechGalacticAmbitions { get; set; }

                    /// <summary>Property for 'tech_neural_implants'</summary>
                    public string? TechNeuralImplants { get; set; }

                    /// <summary>Property for 'tech_heritage_site'</summary>
                    public string? TechHeritageSite { get; set; }

                    /// <summary>Property for 'tech_amoeba_strike_craft_1'</summary>
                    public string? TechAmoebaStrikeCraft1 { get; set; }

                    /// <summary>Property for 'tech_space_whale_weapon_1'</summary>
                    public string? TechSpaceWhaleWeapon1 { get; set; }

                    /// <summary>Property for 'tech_mine_betharian'</summary>
                    public string? TechMineBetharian { get; set; }

                    /// <summary>Property for 'tech_mine_volatile_motes'</summary>
                    public string? TechMineVolatileMotes { get; set; }

                    /// <summary>Property for 'tech_volatile_motes'</summary>
                    public string? TechVolatileMotes { get; set; }

                    /// <summary>Property for 'tech_mine_exotic_gases'</summary>
                    public string? TechMineExoticGases { get; set; }

                    /// <summary>Property for 'tech_mine_rare_crystals'</summary>
                    public string? TechMineRareCrystals { get; set; }

                    /// <summary>Property for 'tech_rare_crystals'</summary>
                    public string? TechRareCrystals { get; set; }

                    /// <summary>Property for 'tech_nanite_transmutation'</summary>
                    public string? TechNaniteTransmutation { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemTechStatusPotential? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemTechStatusPotential model = new GamestateCountryItemTechStatusPotential();
                        model.SourceObject = obj;

                        model.TechArcaneDeciphering = obj.TryGetString("tech_arcane_deciphering", out string techarcanedecipheringStringValue) && techarcanedecipheringStringValue != "none" ? techarcanedecipheringStringValue : null;

                        model.TechArcheologyLabAncrel = obj.TryGetString("tech_archeology_lab_ancrel", out string techarcheologylabancrelStringValue) && techarcheologylabancrelStringValue != "none" ? techarcheologylabancrelStringValue : null;

                        model.TechArchaeostudies = obj.TryGetString("tech_archaeostudies", out string techarchaeostudiesStringValue) && techarchaeostudiesStringValue != "none" ? techarchaeostudiesStringValue : null;

                        model.TechRiftSphere = obj.TryGetString("tech_rift_sphere", out string techriftsphereStringValue) && techriftsphereStringValue != "none" ? techriftsphereStringValue : null;

                        model.TechAstralHarvesting = obj.TryGetString("tech_astral_harvesting", out string techastralharvestingStringValue) && techastralharvestingStringValue != "none" ? techastralharvestingStringValue : null;

                        model.TechIndustrialStormProtection = obj.TryGetString("tech_industrial_storm_protection", out string techindustrialstormprotectionStringValue) && techindustrialstormprotectionStringValue != "none" ? techindustrialstormprotectionStringValue : null;

                        model.TechGargantuanEvolution = obj.TryGetString("tech_gargantuan_evolution", out string techgargantuanevolutionStringValue) && techgargantuanevolutionStringValue != "none" ? techgargantuanevolutionStringValue : null;

                        model.TechLgateActivation = obj.TryGetString("tech_lgate_activation", out string techlgateactivationStringValue) && techlgateactivationStringValue != "none" ? techlgateactivationStringValue : null;

                        model.TechCruisers = obj.TryGetString("tech_cruisers", out string techcruisersStringValue) && techcruisersStringValue != "none" ? techcruisersStringValue : null;

                        model.TechCorvetteHull1 = obj.TryGetString("tech_corvette_hull_1", out string techcorvettehull1StringValue) && techcorvettehull1StringValue != "none" ? techcorvettehull1StringValue : null;

                        model.TechDestroyerBuildSpeed = obj.TryGetString("tech_destroyer_build_speed", out string techdestroyerbuildspeedStringValue) && techdestroyerbuildspeedStringValue != "none" ? techdestroyerbuildspeedStringValue : null;

                        model.TechDestroyerHull1 = obj.TryGetString("tech_destroyer_hull_1", out string techdestroyerhull1StringValue) && techdestroyerhull1StringValue != "none" ? techdestroyerhull1StringValue : null;

                        model.TechStarbase4 = obj.TryGetString("tech_starbase_4", out string techstarbase4StringValue) && techstarbase4StringValue != "none" ? techstarbase4StringValue : null;

                        model.TechHabitat1 = obj.TryGetString("tech_habitat_1", out string techhabitat1StringValue) && techhabitat1StringValue != "none" ? techhabitat1StringValue : null;

                        model.TechModularEngineering = obj.TryGetString("tech_modular_engineering", out string techmodularengineeringStringValue) && techmodularengineeringStringValue != "none" ? techmodularengineeringStringValue : null;

                        model.TechStrikeCraft2 = obj.TryGetString("tech_strike_craft_2", out string techstrikecraft2StringValue) && techstrikecraft2StringValue != "none" ? techstrikecraft2StringValue : null;

                        model.TechShipArmor4 = obj.TryGetString("tech_ship_armor_4", out string techshiparmor4StringValue) && techshiparmor4StringValue != "none" ? techshiparmor4StringValue : null;

                        model.TechThrusters2 = obj.TryGetString("tech_thrusters_2", out string techthrusters2StringValue) && techthrusters2StringValue != "none" ? techthrusters2StringValue : null;

                        model.TechDefensePlatformHull1 = obj.TryGetString("tech_defense_platform_hull_1", out string techdefenseplatformhull1StringValue) && techdefenseplatformhull1StringValue != "none" ? techdefenseplatformhull1StringValue : null;

                        model.TechPoweredExoskeletons = obj.TryGetString("tech_powered_exoskeletons", out string techpoweredexoskeletonsStringValue) && techpoweredexoskeletonsStringValue != "none" ? techpoweredexoskeletonsStringValue : null;

                        model.TechSpaceMining1 = obj.TryGetString("tech_space_mining_1", out string techspacemining1StringValue) && techspacemining1StringValue != "none" ? techspacemining1StringValue : null;

                        model.TechMining2 = obj.TryGetString("tech_mining_2", out string techmining2StringValue) && techmining2StringValue != "none" ? techmining2StringValue : null;

                        model.TechMineralPurification1 = obj.TryGetString("tech_mineral_purification_1", out string techmineralpurification1StringValue) && techmineralpurification1StringValue != "none" ? techmineralpurification1StringValue : null;

                        model.TechAlloys1 = obj.TryGetString("tech_alloys_1", out string techalloys1StringValue) && techalloys1StringValue != "none" ? techalloys1StringValue : null;

                        model.TechLuxuries1 = obj.TryGetString("tech_luxuries_1", out string techluxuries1StringValue) && techluxuries1StringValue != "none" ? techluxuries1StringValue : null;

                        model.TechAfterburners1 = obj.TryGetString("tech_afterburners_1", out string techafterburners1StringValue) && techafterburners1StringValue != "none" ? techafterburners1StringValue : null;

                        model.TechConstructionTemplates = obj.TryGetString("tech_construction_templates", out string techconstructiontemplatesStringValue) && techconstructiontemplatesStringValue != "none" ? techconstructiontemplatesStringValue : null;

                        model.TechHousing2 = obj.TryGetString("tech_housing_2", out string techhousing2StringValue) && techhousing2StringValue != "none" ? techhousing2StringValue : null;

                        model.TechMassDrivers2 = obj.TryGetString("tech_mass_drivers_2", out string techmassdrivers2StringValue) && techmassdrivers2StringValue != "none" ? techmassdrivers2StringValue : null;

                        model.TechFlakBatteries2 = obj.TryGetString("tech_flak_batteries_2", out string techflakbatteries2StringValue) && techflakbatteries2StringValue != "none" ? techflakbatteries2StringValue : null;

                        model.TechMissiles2 = obj.TryGetString("tech_missiles_2", out string techmissiles2StringValue) && techmissiles2StringValue != "none" ? techmissiles2StringValue : null;

                        model.TechTorpedoes2 = obj.TryGetString("tech_torpedoes_2", out string techtorpedoes2StringValue) && techtorpedoes2StringValue != "none" ? techtorpedoes2StringValue : null;

                        model.TechSubspaceDrive = obj.TryGetString("tech_subspace_drive", out string techsubspacedriveStringValue) && techsubspacedriveStringValue != "none" ? techsubspacedriveStringValue : null;

                        model.TechUnusualSenses = obj.TryGetString("tech_unusual_senses", out string techunusualsensesStringValue) && techunusualsensesStringValue != "none" ? techunusualsensesStringValue : null;

                        model.TechNewNumbers = obj.TryGetString("tech_new_numbers", out string technewnumbersStringValue) && technewnumbersStringValue != "none" ? technewnumbersStringValue : null;

                        model.TechTrinaryComputing = obj.TryGetString("tech_trinary_computing", out string techtrinarycomputingStringValue) && techtrinarycomputingStringValue != "none" ? techtrinarycomputingStringValue : null;

                        model.TechAtmosphericOrbitalMechanics = obj.TryGetString("tech_atmospheric_orbital_mechanics", out string techatmosphericorbitalmechanicsStringValue) && techatmosphericorbitalmechanicsStringValue != "none" ? techatmosphericorbitalmechanicsStringValue : null;

                        model.TechPredatoryTactics = obj.TryGetString("tech_predatory_tactics", out string techpredatorytacticsStringValue) && techpredatorytacticsStringValue != "none" ? techpredatorytacticsStringValue : null;

                        model.TechSatisfyingInsults = obj.TryGetString("tech_satisfying_insults", out string techsatisfyinginsultsStringValue) && techsatisfyinginsultsStringValue != "none" ? techsatisfyinginsultsStringValue : null;

                        model.TechCompactLiving = obj.TryGetString("tech_compact_living", out string techcompactlivingStringValue) && techcompactlivingStringValue != "none" ? techcompactlivingStringValue : null;

                        model.TechAlienTopography = obj.TryGetString("tech_alien_topography", out string techalientopographyStringValue) && techalientopographyStringValue != "none" ? techalientopographyStringValue : null;

                        model.TechXenoAesthetics = obj.TryGetString("tech_xeno_aesthetics", out string techxenoaestheticsStringValue) && techxenoaestheticsStringValue != "none" ? techxenoaestheticsStringValue : null;

                        model.TechLostBuildingMethods = obj.TryGetString("tech_lost_building_methods", out string techlostbuildingmethodsStringValue) && techlostbuildingmethodsStringValue != "none" ? techlostbuildingmethodsStringValue : null;

                        model.TechSupremeAlloy = obj.TryGetString("tech_supreme_alloy", out string techsupremealloyStringValue) && techsupremealloyStringValue != "none" ? techsupremealloyStringValue : null;

                        model.TechOrderedRetreat = obj.TryGetString("tech_ordered_retreat", out string techorderedretreatStringValue) && techorderedretreatStringValue != "none" ? techorderedretreatStringValue : null;

                        model.TechTempleOfTransportation = obj.TryGetString("tech_temple_of_transportation", out string techtempleoftransportationStringValue) && techtempleoftransportationStringValue != "none" ? techtempleoftransportationStringValue : null;

                        model.TechGravityWells = obj.TryGetString("tech_gravity_wells", out string techgravitywellsStringValue) && techgravitywellsStringValue != "none" ? techgravitywellsStringValue : null;

                        model.TechAsteroidalCarapace = obj.TryGetString("tech_asteroidal_carapace", out string techasteroidalcarapaceStringValue) && techasteroidalcarapaceStringValue != "none" ? techasteroidalcarapaceStringValue : null;

                        model.TechBoardingCables = obj.TryGetString("tech_boarding_cables", out string techboardingcablesStringValue) && techboardingcablesStringValue != "none" ? techboardingcablesStringValue : null;

                        model.TechAkxWorm1 = obj.TryGetString("tech_akx_worm_1", out string techakxworm1StringValue) && techakxworm1StringValue != "none" ? techakxworm1StringValue : null;

                        model.TechOrbitalArcFurnace = obj.TryGetString("tech_orbital_arc_furnace", out string techorbitalarcfurnaceStringValue) && techorbitalarcfurnaceStringValue != "none" ? techorbitalarcfurnaceStringValue : null;

                        model.TechOrbitalTrashDispersal = obj.TryGetString("tech_orbital_trash_dispersal", out string techorbitaltrashdispersalStringValue) && techorbitaltrashdispersalStringValue != "none" ? techorbitaltrashdispersalStringValue : null;

                        model.TechBasicScienceLab2 = obj.TryGetString("tech_basic_science_lab_2", out string techbasicsciencelab2StringValue) && techbasicsciencelab2StringValue != "none" ? techbasicsciencelab2StringValue : null;

                        model.TechCuratorLab = obj.TryGetString("tech_curator_lab", out string techcuratorlabStringValue) && techcuratorlabStringValue != "none" ? techcuratorlabStringValue : null;

                        model.TechSpaceScience1 = obj.TryGetString("tech_space_science_1", out string techspacescience1StringValue) && techspacescience1StringValue != "none" ? techspacescience1StringValue : null;

                        model.TechSelfAwareLogic = obj.TryGetString("tech_self_aware_logic", out string techselfawarelogicStringValue) && techselfawarelogicStringValue != "none" ? techselfawarelogicStringValue : null;

                        model.TechCombatComputers1 = obj.TryGetString("tech_combat_computers_1", out string techcombatcomputers1StringValue) && techcombatcomputers1StringValue != "none" ? techcombatcomputers1StringValue : null;

                        model.TechColdFusionPower = obj.TryGetString("tech_cold_fusion_power", out string techcoldfusionpowerStringValue) && techcoldfusionpowerStringValue != "none" ? techcoldfusionpowerStringValue : null;

                        model.TechReactorBoosters2 = obj.TryGetString("tech_reactor_boosters_2", out string techreactorboosters2StringValue) && techreactorboosters2StringValue != "none" ? techreactorboosters2StringValue : null;

                        model.TechShields2 = obj.TryGetString("tech_shields_2", out string techshields2StringValue) && techshields2StringValue != "none" ? techshields2StringValue : null;

                        model.TechSensors3 = obj.TryGetString("tech_sensors_3", out string techsensors3StringValue) && techsensors3StringValue != "none" ? techsensors3StringValue : null;

                        model.TechPowerPlant3 = obj.TryGetString("tech_power_plant_3", out string techpowerplant3StringValue) && techpowerplant3StringValue != "none" ? techpowerplant3StringValue : null;

                        model.TechHyperDrive2 = obj.TryGetString("tech_hyper_drive_2", out string techhyperdrive2StringValue) && techhyperdrive2StringValue != "none" ? techhyperdrive2StringValue : null;

                        model.TechLasers2 = obj.TryGetString("tech_lasers_2", out string techlasers2StringValue) && techlasers2StringValue != "none" ? techlasers2StringValue : null;

                        model.TechPdTracking2 = obj.TryGetString("tech_pd_tracking_2", out string techpdtracking2StringValue) && techpdtracking2StringValue != "none" ? techpdtracking2StringValue : null;

                        model.TechMiningDroneWeapon1 = obj.TryGetString("tech_mining_drone_weapon_1", out string techminingdroneweapon1StringValue) && techminingdroneweapon1StringValue != "none" ? techminingdroneweapon1StringValue : null;

                        model.TechSpaceCloudWeapon1 = obj.TryGetString("tech_space_cloud_weapon_1", out string techspacecloudweapon1StringValue) && techspacecloudweapon1StringValue != "none" ? techspacecloudweapon1StringValue : null;

                        model.NullVoidBeam = obj.TryGetString("null_void_beam", out string nullvoidbeamStringValue) && nullvoidbeamStringValue != "none" ? nullvoidbeamStringValue : null;

                        model.TechEcoSimulation = obj.TryGetString("tech_eco_simulation", out string techecosimulationStringValue) && techecosimulationStringValue != "none" ? techecosimulationStringValue : null;

                        model.TechAlienLifeStudies = obj.TryGetString("tech_alien_life_studies", out string techalienlifestudiesStringValue) && techalienlifestudiesStringValue != "none" ? techalienlifestudiesStringValue : null;

                        model.TechColonization2 = obj.TryGetString("tech_colonization_2", out string techcolonization2StringValue) && techcolonization2StringValue != "none" ? techcolonization2StringValue : null;

                        model.TechMountainRange = obj.TryGetString("tech_mountain_range", out string techmountainrangeStringValue) && techmountainrangeStringValue != "none" ? techmountainrangeStringValue : null;

                        model.TechVolcano = obj.TryGetString("tech_volcano", out string techvolcanoStringValue) && techvolcanoStringValue != "none" ? techvolcanoStringValue : null;

                        model.TechDenseJungle = obj.TryGetString("tech_dense_jungle", out string techdensejungleStringValue) && techdensejungleStringValue != "none" ? techdensejungleStringValue : null;

                        model.TechQuicksandBasin = obj.TryGetString("tech_quicksand_basin", out string techquicksandbasinStringValue) && techquicksandbasinStringValue != "none" ? techquicksandbasinStringValue : null;

                        model.TechNoxiousSwamp = obj.TryGetString("tech_noxious_swamp", out string technoxiousswampStringValue) && technoxiousswampStringValue != "none" ? technoxiousswampStringValue : null;

                        model.TechMassiveGlacier = obj.TryGetString("tech_massive_glacier", out string techmassiveglacierStringValue) && techmassiveglacierStringValue != "none" ? techmassiveglacierStringValue : null;

                        model.TechDeepSinkhole = obj.TryGetString("tech_deep_sinkhole", out string techdeepsinkholeStringValue) && techdeepsinkholeStringValue != "none" ? techdeepsinkholeStringValue : null;

                        model.TechTerrestrialSculpting = obj.TryGetString("tech_terrestrial_sculpting", out string techterrestrialsculptingStringValue) && techterrestrialsculptingStringValue != "none" ? techterrestrialsculptingStringValue : null;

                        model.TechVitalityBoosters = obj.TryGetString("tech_vitality_boosters", out string techvitalityboostersStringValue) && techvitalityboostersStringValue != "none" ? techvitalityboostersStringValue : null;

                        model.TechEpigeneticTriggers = obj.TryGetString("tech_epigenetic_triggers", out string techepigenetictriggersStringValue) && techepigenetictriggersStringValue != "none" ? techepigenetictriggersStringValue : null;

                        model.TechCloning = obj.TryGetString("tech_cloning", out string techcloningStringValue) && techcloningStringValue != "none" ? techcloningStringValue : null;

                        model.TechDoctrineFleetSize1 = obj.TryGetString("tech_doctrine_fleet_size_1", out string techdoctrinefleetsize1StringValue) && techdoctrinefleetsize1StringValue != "none" ? techdoctrinefleetsize1StringValue : null;

                        model.TechInterstellarFleetTraditions = obj.TryGetString("tech_interstellar_fleet_traditions", out string techinterstellarfleettraditionsStringValue) && techinterstellarfleettraditionsStringValue != "none" ? techinterstellarfleettraditionsStringValue : null;

                        model.TechDoctrineNavySize1 = obj.TryGetString("tech_doctrine_navy_size_1", out string techdoctrinenavysize1StringValue) && techdoctrinenavysize1StringValue != "none" ? techdoctrinenavysize1StringValue : null;

                        model.TechGroundDefensePlanning = obj.TryGetString("tech_ground_defense_planning", out string techgrounddefenseplanningStringValue) && techgrounddefenseplanningStringValue != "none" ? techgrounddefenseplanningStringValue : null;

                        model.TechGalacticAmbitions = obj.TryGetString("tech_galactic_ambitions", out string techgalacticambitionsStringValue) && techgalacticambitionsStringValue != "none" ? techgalacticambitionsStringValue : null;

                        model.TechNeuralImplants = obj.TryGetString("tech_neural_implants", out string techneuralimplantsStringValue) && techneuralimplantsStringValue != "none" ? techneuralimplantsStringValue : null;

                        model.TechHeritageSite = obj.TryGetString("tech_heritage_site", out string techheritagesiteStringValue) && techheritagesiteStringValue != "none" ? techheritagesiteStringValue : null;

                        model.TechAmoebaStrikeCraft1 = obj.TryGetString("tech_amoeba_strike_craft_1", out string techamoebastrikecraft1StringValue) && techamoebastrikecraft1StringValue != "none" ? techamoebastrikecraft1StringValue : null;

                        model.TechSpaceWhaleWeapon1 = obj.TryGetString("tech_space_whale_weapon_1", out string techspacewhaleweapon1StringValue) && techspacewhaleweapon1StringValue != "none" ? techspacewhaleweapon1StringValue : null;

                        model.TechMineBetharian = obj.TryGetString("tech_mine_betharian", out string techminebetharianStringValue) && techminebetharianStringValue != "none" ? techminebetharianStringValue : null;

                        model.TechMineVolatileMotes = obj.TryGetString("tech_mine_volatile_motes", out string techminevolatilemotesStringValue) && techminevolatilemotesStringValue != "none" ? techminevolatilemotesStringValue : null;

                        model.TechVolatileMotes = obj.TryGetString("tech_volatile_motes", out string techvolatilemotesStringValue) && techvolatilemotesStringValue != "none" ? techvolatilemotesStringValue : null;

                        model.TechMineExoticGases = obj.TryGetString("tech_mine_exotic_gases", out string techmineexoticgasesStringValue) && techmineexoticgasesStringValue != "none" ? techmineexoticgasesStringValue : null;

                        model.TechMineRareCrystals = obj.TryGetString("tech_mine_rare_crystals", out string techminerarecrystalsStringValue) && techminerarecrystalsStringValue != "none" ? techminerarecrystalsStringValue : null;

                        model.TechRareCrystals = obj.TryGetString("tech_rare_crystals", out string techrarecrystalsStringValue) && techrarecrystalsStringValue != "none" ? techrarecrystalsStringValue : null;

                        model.TechNaniteTransmutation = obj.TryGetString("tech_nanite_transmutation", out string technanitetransmutationStringValue) && technanitetransmutationStringValue != "none" ? technanitetransmutationStringValue : null;


                        return model;
                    }
                }
                /// <summary>Property for 'technology'</summary>
                public string? Technology { get; set; }

                /// <summary>Property for 'level'</summary>
                public int? Level { get; set; }

                /// <summary>Property for 'physics_queue'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPhysicsQueueItem?>? PhysicsQueue { get; set; }

                /// <summary>Property for 'society_queue'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusSocietyQueueItem?>? SocietyQueue { get; set; }

                /// <summary>Property for 'engineering_queue'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPhysicsQueueItem?>? EngineeringQueue { get; set; }

                /// <summary>Property for 'stored_techpoints_for_tech'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusStoredTechpointsForTech? StoredTechpointsForTech { get; set; }

                /// <summary>Property for 'stored_techpoints'</summary>
                public List<float?>? StoredTechpoints { get; set; }

                /// <summary>Property for 'alternatives'</summary>
                public Dictionary<string, List<string>>? Alternatives { get; set; }

                /// <summary>Property for 'potential'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPotential? Potential { get; set; }

                /// <summary>Property for 'auto_researching_physics'</summary>
                public bool? AutoResearchingPhysics { get; set; }

                /// <summary>Property for 'auto_researching_society'</summary>
                public bool? AutoResearchingSociety { get; set; }

                /// <summary>Property for 'auto_researching_engineering'</summary>
                public bool? AutoResearchingEngineering { get; set; }

                /// <summary>Property for 'always_available_tech'</summary>
                public string? AlwaysAvailableTech { get; set; }

                /// <summary>Property for 'last_increased_tech'</summary>
                public string? LastIncreasedTech { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemTechStatus? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemTechStatus model = new GamestateCountryItemTechStatus();
                    model.SourceObject = obj;

                    model.Technology = obj.TryGetString("technology", out string technologyStringValue) && technologyStringValue != "none" ? technologyStringValue : null;

                    if (obj.TryGetInt("level", out int levelValue) && levelValue != null)
                        model.Level = levelValue;

                    // TODO: Bind complex type: PhysicsQueue (List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPhysicsQueueItem?>)
                    if (obj.TryGetSaveArray("physics_queue", out SaveArray physicsqueueArray) && physicsqueueArray != null)
                        model.PhysicsQueue = new List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPhysicsQueueItem?>(); // Initialize empty list

                    // TODO: Bind complex type: SocietyQueue (List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusSocietyQueueItem?>)
                    if (obj.TryGetSaveArray("society_queue", out SaveArray societyqueueArray) && societyqueueArray != null)
                        model.SocietyQueue = new List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusSocietyQueueItem?>(); // Initialize empty list

                    // TODO: Bind complex type: EngineeringQueue (List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPhysicsQueueItem?>)
                    if (obj.TryGetSaveArray("engineering_queue", out SaveArray engineeringqueueArray) && engineeringqueueArray != null)
                        model.EngineeringQueue = new List<Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPhysicsQueueItem?>(); // Initialize empty list

                    if (obj.TryGetSaveObject("stored_techpoints_for_tech", out SaveObject storedtechpointsfortechNestedObj))
                        model.StoredTechpointsForTech = Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusStoredTechpointsForTech.Bind(storedtechpointsfortechNestedObj);

                    // TODO: Bind complex type: StoredTechpoints (List<float?>)
                    if (obj.TryGetSaveArray("stored_techpoints", out SaveArray storedtechpointsArray) && storedtechpointsArray != null)
                        model.StoredTechpoints = new List<float?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (storedtechpointsArray != null)
                {
                    foreach (var item in storedtechpointsArray.Items)
                    {
                        if (item is Scalar<float> scalarValue)
                        {
                            model.StoredTechpoints.Add(scalarValue.Value);
                        }
                    }
                }

                    // TODO: Bind complex type: Alternatives (Dictionary<string, List<string>>)
                    if (obj.TryGetSaveObject("alternatives", out SaveObject alternativesDictObj) && alternativesDictObj != null)
                        model.Alternatives = new Dictionary<string, List<string>>(); // Initialize empty dictionary

                    if (obj.TryGetSaveObject("potential", out SaveObject potentialNestedObj))
                        model.Potential = Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.GamestateCountryItemTechStatusPotential.Bind(potentialNestedObj);

                    if (obj.TryGetBool("auto_researching_physics", out bool autoresearchingphysicsValue) && autoresearchingphysicsValue != null)
                        model.AutoResearchingPhysics = autoresearchingphysicsValue;

                    if (obj.TryGetBool("auto_researching_society", out bool autoresearchingsocietyValue) && autoresearchingsocietyValue != null)
                        model.AutoResearchingSociety = autoresearchingsocietyValue;

                    if (obj.TryGetBool("auto_researching_engineering", out bool autoresearchingengineeringValue) && autoresearchingengineeringValue != null)
                        model.AutoResearchingEngineering = autoresearchingengineeringValue;

                    model.AlwaysAvailableTech = obj.TryGetString("always_available_tech", out string alwaysavailabletechStringValue) && alwaysavailabletechStringValue != "none" ? alwaysavailabletechStringValue : null;

                    model.LastIncreasedTech = obj.TryGetString("last_increased_tech", out string lastincreasedtechStringValue) && lastincreasedtechStringValue != "none" ? lastincreasedtechStringValue : null;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemBudget
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemBudgetCurrentMonth
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemBudgetCurrentMonthIncome
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomeCountryBase
                        {
                            /// <summary>Property for 'energy'</summary>
                            public int? Energy { get; set; }

                            /// <summary>Property for 'minerals'</summary>
                            public int? Minerals { get; set; }

                            /// <summary>Property for 'food'</summary>
                            public int? Food { get; set; }

                            /// <summary>Property for 'physics_research'</summary>
                            public int? PhysicsResearch { get; set; }

                            /// <summary>Property for 'society_research'</summary>
                            public int? SocietyResearch { get; set; }

                            /// <summary>Property for 'engineering_research'</summary>
                            public int? EngineeringResearch { get; set; }

                            /// <summary>Property for 'influence'</summary>
                            public int? Influence { get; set; }

                            /// <summary>Property for 'unity'</summary>
                            public float? Unity { get; set; }

                            /// <summary>Property for 'consumer_goods'</summary>
                            public int? ConsumerGoods { get; set; }

                            /// <summary>Property for 'alloys'</summary>
                            public int? Alloys { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomeCountryBase? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomeCountryBase model = new GamestateCountryItemBudgetCurrentMonthIncomeCountryBase();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("energy", out int energyValue) && energyValue != null)
                                    model.Energy = energyValue;

                                if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                    model.Minerals = mineralsValue;

                                if (obj.TryGetInt("food", out int foodValue) && foodValue != null)
                                    model.Food = foodValue;

                                if (obj.TryGetInt("physics_research", out int physicsresearchValue) && physicsresearchValue != null)
                                    model.PhysicsResearch = physicsresearchValue;

                                if (obj.TryGetInt("society_research", out int societyresearchValue) && societyresearchValue != null)
                                    model.SocietyResearch = societyresearchValue;

                                if (obj.TryGetInt("engineering_research", out int engineeringresearchValue) && engineeringresearchValue != null)
                                    model.EngineeringResearch = engineeringresearchValue;

                                if (obj.TryGetInt("influence", out int influenceValue) && influenceValue != null)
                                    model.Influence = influenceValue;

                                if (obj.TryGetFloat("unity", out float unityValue) && unityValue != null)
                                    model.Unity = unityValue;

                                if (obj.TryGetInt("consumer_goods", out int consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;

                                if (obj.TryGetInt("alloys", out int alloysValue) && alloysValue != null)
                                    model.Alloys = alloysValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes
                        {
                            /// <summary>Property for 'energy'</summary>
                            public float? Energy { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes model = new GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("energy", out float energyValue) && energyValue != null)
                                    model.Energy = energyValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs
                        {
                            /// <summary>Property for 'food'</summary>
                            public float? Food { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs model = new GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("food", out float foodValue) && foodValue != null)
                                    model.Food = foodValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners
                        {
                            /// <summary>Property for 'minerals'</summary>
                            public int? Minerals { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners model = new GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                    model.Minerals = mineralsValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians
                        {
                            /// <summary>Property for 'unity'</summary>
                            public float? Unity { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians model = new GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("unity", out float unityValue) && unityValue != null)
                                    model.Unity = unityValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomePlanetResearchers
                        {
                            /// <summary>Property for 'physics_research'</summary>
                            public int? PhysicsResearch { get; set; }

                            /// <summary>Property for 'society_research'</summary>
                            public int? SocietyResearch { get; set; }

                            /// <summary>Property for 'engineering_research'</summary>
                            public int? EngineeringResearch { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomePlanetResearchers? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomePlanetResearchers model = new GamestateCountryItemBudgetCurrentMonthIncomePlanetResearchers();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("physics_research", out int physicsresearchValue) && physicsresearchValue != null)
                                    model.PhysicsResearch = physicsresearchValue;

                                if (obj.TryGetInt("society_research", out int societyresearchValue) && societyresearchValue != null)
                                    model.SocietyResearch = societyresearchValue;

                                if (obj.TryGetInt("engineering_research", out int engineeringresearchValue) && engineeringresearchValue != null)
                                    model.EngineeringResearch = engineeringresearchValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomePlanetMetallurgists
                        {
                            /// <summary>Property for 'alloys'</summary>
                            public float? Alloys { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomePlanetMetallurgists? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomePlanetMetallurgists model = new GamestateCountryItemBudgetCurrentMonthIncomePlanetMetallurgists();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("alloys", out float alloysValue) && alloysValue != null)
                                    model.Alloys = alloysValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomePlanetRefiners
                        {
                            /// <summary>Property for 'exotic_gases'</summary>
                            public float? ExoticGases { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomePlanetRefiners? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomePlanetRefiners model = new GamestateCountryItemBudgetCurrentMonthIncomePlanetRefiners();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("exotic_gases", out float exoticgasesValue) && exoticgasesValue != null)
                                    model.ExoticGases = exoticgasesValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans
                        {
                            /// <summary>Property for 'consumer_goods'</summary>
                            public int? ConsumerGoods { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans model = new GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("consumer_goods", out int consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits
                        {
                            /// <summary>Property for 'energy'</summary>
                            public int? Energy { get; set; }

                            /// <summary>Property for 'minerals'</summary>
                            public int? Minerals { get; set; }

                            /// <summary>Property for 'alloys'</summary>
                            public int? Alloys { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits model = new GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("energy", out int energyValue) && energyValue != null)
                                    model.Energy = energyValue;

                                if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                    model.Minerals = mineralsValue;

                                if (obj.TryGetInt("alloys", out int alloysValue) && alloysValue != null)
                                    model.Alloys = alloysValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits
                        {
                            /// <summary>Property for 'physics_research'</summary>
                            public float? PhysicsResearch { get; set; }

                            /// <summary>Property for 'society_research'</summary>
                            public float? SocietyResearch { get; set; }

                            /// <summary>Property for 'engineering_research'</summary>
                            public int? EngineeringResearch { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits model = new GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("physics_research", out float physicsresearchValue) && physicsresearchValue != null)
                                    model.PhysicsResearch = physicsresearchValue;

                                if (obj.TryGetFloat("society_research", out float societyresearchValue) && societyresearchValue != null)
                                    model.SocietyResearch = societyresearchValue;

                                if (obj.TryGetInt("engineering_research", out int engineeringresearchValue) && engineeringresearchValue != null)
                                    model.EngineeringResearch = engineeringresearchValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection
                        {
                            /// <summary>Property for 'influence'</summary>
                            public float? Influence { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection model = new GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("influence", out float influenceValue) && influenceValue != null)
                                    model.Influence = influenceValue;


                                return model;
                            }
                        }
                        /// <summary>Property for 'none'</summary>
                        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? None { get; set; }

                        /// <summary>Property for 'country_base'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryBase? CountryBase { get; set; }

                        /// <summary>Property for 'trade_routes'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? TradeRoutes { get; set; }

                        /// <summary>Property for 'planet_jobs'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs? PlanetJobs { get; set; }

                        /// <summary>Property for 'planet_farmers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs? PlanetFarmers { get; set; }

                        /// <summary>Property for 'planet_miners'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners? PlanetMiners { get; set; }

                        /// <summary>Property for 'planet_technician'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? PlanetTechnician { get; set; }

                        /// <summary>Property for 'planet_politicians'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians? PlanetPoliticians { get; set; }

                        /// <summary>Property for 'planet_administrators'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians? PlanetAdministrators { get; set; }

                        /// <summary>Property for 'planet_researchers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetResearchers? PlanetResearchers { get; set; }

                        /// <summary>Property for 'planet_metallurgists'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMetallurgists? PlanetMetallurgists { get; set; }

                        /// <summary>Property for 'planet_refiners'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetRefiners? PlanetRefiners { get; set; }

                        /// <summary>Property for 'planet_artisans'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetArtisans { get; set; }

                        /// <summary>Property for 'orbital_mining_deposits'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits? OrbitalMiningDeposits { get; set; }

                        /// <summary>Property for 'orbital_research_deposits'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits? OrbitalResearchDeposits { get; set; }

                        /// <summary>Property for 'country_power_projection'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection? CountryPowerProjection { get; set; }

                        /// <summary>Property for 'pop_factions'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians? PopFactions { get; set; }

                        /// <summary>Property for 'diplomatic_networking'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians? DiplomaticNetworking { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemBudgetCurrentMonthIncome? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemBudgetCurrentMonthIncome model = new GamestateCountryItemBudgetCurrentMonthIncome();
                            model.SourceObject = obj;

                            if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                                model.None = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(noneNestedObj);

                            if (obj.TryGetSaveObject("country_base", out SaveObject countrybaseNestedObj))
                                model.CountryBase = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryBase.Bind(countrybaseNestedObj);

                            if (obj.TryGetSaveObject("trade_routes", out SaveObject traderoutesNestedObj))
                                model.TradeRoutes = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(traderoutesNestedObj);

                            if (obj.TryGetSaveObject("planet_jobs", out SaveObject planetjobsNestedObj))
                                model.PlanetJobs = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs.Bind(planetjobsNestedObj);

                            if (obj.TryGetSaveObject("planet_farmers", out SaveObject planetfarmersNestedObj))
                                model.PlanetFarmers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs.Bind(planetfarmersNestedObj);

                            if (obj.TryGetSaveObject("planet_miners", out SaveObject planetminersNestedObj))
                                model.PlanetMiners = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners.Bind(planetminersNestedObj);

                            if (obj.TryGetSaveObject("planet_technician", out SaveObject planettechnicianNestedObj))
                                model.PlanetTechnician = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(planettechnicianNestedObj);

                            if (obj.TryGetSaveObject("planet_politicians", out SaveObject planetpoliticiansNestedObj))
                                model.PlanetPoliticians = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians.Bind(planetpoliticiansNestedObj);

                            if (obj.TryGetSaveObject("planet_administrators", out SaveObject planetadministratorsNestedObj))
                                model.PlanetAdministrators = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians.Bind(planetadministratorsNestedObj);

                            if (obj.TryGetSaveObject("planet_researchers", out SaveObject planetresearchersNestedObj))
                                model.PlanetResearchers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetResearchers.Bind(planetresearchersNestedObj);

                            if (obj.TryGetSaveObject("planet_metallurgists", out SaveObject planetmetallurgistsNestedObj))
                                model.PlanetMetallurgists = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMetallurgists.Bind(planetmetallurgistsNestedObj);

                            if (obj.TryGetSaveObject("planet_refiners", out SaveObject planetrefinersNestedObj))
                                model.PlanetRefiners = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetRefiners.Bind(planetrefinersNestedObj);

                            if (obj.TryGetSaveObject("planet_artisans", out SaveObject planetartisansNestedObj))
                                model.PlanetArtisans = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planetartisansNestedObj);

                            if (obj.TryGetSaveObject("orbital_mining_deposits", out SaveObject orbitalminingdepositsNestedObj))
                                model.OrbitalMiningDeposits = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits.Bind(orbitalminingdepositsNestedObj);

                            if (obj.TryGetSaveObject("orbital_research_deposits", out SaveObject orbitalresearchdepositsNestedObj))
                                model.OrbitalResearchDeposits = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits.Bind(orbitalresearchdepositsNestedObj);

                            if (obj.TryGetSaveObject("country_power_projection", out SaveObject countrypowerprojectionNestedObj))
                                model.CountryPowerProjection = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection.Bind(countrypowerprojectionNestedObj);

                            if (obj.TryGetSaveObject("pop_factions", out SaveObject popfactionsNestedObj))
                                model.PopFactions = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians.Bind(popfactionsNestedObj);

                            if (obj.TryGetSaveObject("diplomatic_networking", out SaveObject diplomaticnetworkingNestedObj))
                                model.DiplomaticNetworking = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians.Bind(diplomaticnetworkingNestedObj);


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemBudgetCurrentMonthExpenses
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthExpensesShips
                        {
                            /// <summary>Property for 'energy'</summary>
                            public float? Energy { get; set; }

                            /// <summary>Property for 'alloys'</summary>
                            public float? Alloys { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthExpensesShips? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthExpensesShips model = new GamestateCountryItemBudgetCurrentMonthExpensesShips();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("energy", out float energyValue) && energyValue != null)
                                    model.Energy = energyValue;

                                if (obj.TryGetFloat("alloys", out float alloysValue) && alloysValue != null)
                                    model.Alloys = alloysValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers
                        {
                            /// <summary>Property for 'energy'</summary>
                            public int? Energy { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers model = new GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("energy", out int energyValue) && energyValue != null)
                                    model.Energy = energyValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers
                        {
                            /// <summary>Property for 'food'</summary>
                            public float? Food { get; set; }

                            /// <summary>Property for 'consumer_goods'</summary>
                            public float? ConsumerGoods { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers model = new GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("food", out float foodValue) && foodValue != null)
                                    model.Food = foodValue;

                                if (obj.TryGetFloat("consumer_goods", out float consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders
                        {
                            /// <summary>Property for 'unity'</summary>
                            public int? Unity { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders model = new GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("unity", out int unityValue) && unityValue != null)
                                    model.Unity = unityValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists
                        {
                            /// <summary>Property for 'unity'</summary>
                            public int? Unity { get; set; }

                            /// <summary>Property for 'consumer_goods'</summary>
                            public float? ConsumerGoods { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists model = new GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("unity", out int unityValue) && unityValue != null)
                                    model.Unity = unityValue;

                                if (obj.TryGetFloat("consumer_goods", out float consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;


                                return model;
                            }
                        }
                        /// <summary>Property for 'none'</summary>
                        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? None { get; set; }

                        /// <summary>Property for 'ships'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips? Ships { get; set; }

                        /// <summary>Property for 'ship_components'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips? ShipComponents { get; set; }

                        /// <summary>Property for 'station_gatherers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? StationGatherers { get; set; }

                        /// <summary>Property for 'station_researchers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? StationResearchers { get; set; }

                        /// <summary>Property for 'starbase_stations'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? StarbaseStations { get; set; }

                        /// <summary>Property for 'starbase_buildings'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? StarbaseBuildings { get; set; }

                        /// <summary>Property for 'starbase_modules'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? StarbaseModules { get; set; }

                        /// <summary>Property for 'planet_buildings'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetBuildings { get; set; }

                        /// <summary>Property for 'planet_districts_farming'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsFarming { get; set; }

                        /// <summary>Property for 'planet_districts_mining'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsMining { get; set; }

                        /// <summary>Property for 'planet_districts_generator'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsGenerator { get; set; }

                        /// <summary>Property for 'planet_districts_cities'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsCities { get; set; }

                        /// <summary>Property for 'planet_districts_industrial'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsIndustrial { get; set; }

                        /// <summary>Property for 'planet_politicians'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetPoliticians { get; set; }

                        /// <summary>Property for 'planet_administrators'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetAdministrators { get; set; }

                        /// <summary>Property for 'planet_researchers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetResearchers { get; set; }

                        /// <summary>Property for 'planet_metallurgists'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners? PlanetMetallurgists { get; set; }

                        /// <summary>Property for 'planet_traders'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetTraders { get; set; }

                        /// <summary>Property for 'planet_doctors'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetDoctors { get; set; }

                        /// <summary>Property for 'planet_refiners'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners? PlanetRefiners { get; set; }

                        /// <summary>Property for 'planet_artisans'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners? PlanetArtisans { get; set; }

                        /// <summary>Property for 'pop_category_workers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers? PopCategoryWorkers { get; set; }

                        /// <summary>Property for 'pop_category_specialists'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers? PopCategorySpecialists { get; set; }

                        /// <summary>Property for 'pop_category_rulers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers? PopCategoryRulers { get; set; }

                        /// <summary>Property for 'leader_commanders'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders? LeaderCommanders { get; set; }

                        /// <summary>Property for 'leader_scientists'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists? LeaderScientists { get; set; }

                        /// <summary>Property for 'leader_officials'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders? LeaderOfficials { get; set; }

                        /// <summary>Property for 'non_aggression_pacts'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection? NonAggressionPacts { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemBudgetCurrentMonthExpenses? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemBudgetCurrentMonthExpenses model = new GamestateCountryItemBudgetCurrentMonthExpenses();
                            model.SourceObject = obj;

                            if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                                model.None = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(noneNestedObj);

                            if (obj.TryGetSaveObject("ships", out SaveObject shipsNestedObj))
                                model.Ships = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips.Bind(shipsNestedObj);

                            if (obj.TryGetSaveObject("ship_components", out SaveObject shipcomponentsNestedObj))
                                model.ShipComponents = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips.Bind(shipcomponentsNestedObj);

                            if (obj.TryGetSaveObject("station_gatherers", out SaveObject stationgatherersNestedObj))
                                model.StationGatherers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(stationgatherersNestedObj);

                            if (obj.TryGetSaveObject("station_researchers", out SaveObject stationresearchersNestedObj))
                                model.StationResearchers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(stationresearchersNestedObj);

                            if (obj.TryGetSaveObject("starbase_stations", out SaveObject starbasestationsNestedObj))
                                model.StarbaseStations = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(starbasestationsNestedObj);

                            if (obj.TryGetSaveObject("starbase_buildings", out SaveObject starbasebuildingsNestedObj))
                                model.StarbaseBuildings = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(starbasebuildingsNestedObj);

                            if (obj.TryGetSaveObject("starbase_modules", out SaveObject starbasemodulesNestedObj))
                                model.StarbaseModules = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(starbasemodulesNestedObj);

                            if (obj.TryGetSaveObject("planet_buildings", out SaveObject planetbuildingsNestedObj))
                                model.PlanetBuildings = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetbuildingsNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_farming", out SaveObject planetdistrictsfarmingNestedObj))
                                model.PlanetDistrictsFarming = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsfarmingNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_mining", out SaveObject planetdistrictsminingNestedObj))
                                model.PlanetDistrictsMining = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsminingNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_generator", out SaveObject planetdistrictsgeneratorNestedObj))
                                model.PlanetDistrictsGenerator = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsgeneratorNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_cities", out SaveObject planetdistrictscitiesNestedObj))
                                model.PlanetDistrictsCities = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictscitiesNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_industrial", out SaveObject planetdistrictsindustrialNestedObj))
                                model.PlanetDistrictsIndustrial = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsindustrialNestedObj);

                            if (obj.TryGetSaveObject("planet_politicians", out SaveObject planetpoliticiansNestedObj))
                                model.PlanetPoliticians = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planetpoliticiansNestedObj);

                            if (obj.TryGetSaveObject("planet_administrators", out SaveObject planetadministratorsNestedObj))
                                model.PlanetAdministrators = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planetadministratorsNestedObj);

                            if (obj.TryGetSaveObject("planet_researchers", out SaveObject planetresearchersNestedObj))
                                model.PlanetResearchers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planetresearchersNestedObj);

                            if (obj.TryGetSaveObject("planet_metallurgists", out SaveObject planetmetallurgistsNestedObj))
                                model.PlanetMetallurgists = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners.Bind(planetmetallurgistsNestedObj);

                            if (obj.TryGetSaveObject("planet_traders", out SaveObject planettradersNestedObj))
                                model.PlanetTraders = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planettradersNestedObj);

                            if (obj.TryGetSaveObject("planet_doctors", out SaveObject planetdoctorsNestedObj))
                                model.PlanetDoctors = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planetdoctorsNestedObj);

                            if (obj.TryGetSaveObject("planet_refiners", out SaveObject planetrefinersNestedObj))
                                model.PlanetRefiners = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners.Bind(planetrefinersNestedObj);

                            if (obj.TryGetSaveObject("planet_artisans", out SaveObject planetartisansNestedObj))
                                model.PlanetArtisans = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners.Bind(planetartisansNestedObj);

                            if (obj.TryGetSaveObject("pop_category_workers", out SaveObject popcategoryworkersNestedObj))
                                model.PopCategoryWorkers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers.Bind(popcategoryworkersNestedObj);

                            if (obj.TryGetSaveObject("pop_category_specialists", out SaveObject popcategoryspecialistsNestedObj))
                                model.PopCategorySpecialists = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers.Bind(popcategoryspecialistsNestedObj);

                            if (obj.TryGetSaveObject("pop_category_rulers", out SaveObject popcategoryrulersNestedObj))
                                model.PopCategoryRulers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers.Bind(popcategoryrulersNestedObj);

                            if (obj.TryGetSaveObject("leader_commanders", out SaveObject leadercommandersNestedObj))
                                model.LeaderCommanders = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders.Bind(leadercommandersNestedObj);

                            if (obj.TryGetSaveObject("leader_scientists", out SaveObject leaderscientistsNestedObj))
                                model.LeaderScientists = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists.Bind(leaderscientistsNestedObj);

                            if (obj.TryGetSaveObject("leader_officials", out SaveObject leaderofficialsNestedObj))
                                model.LeaderOfficials = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders.Bind(leaderofficialsNestedObj);

                            if (obj.TryGetSaveObject("non_aggression_pacts", out SaveObject nonaggressionpactsNestedObj))
                                model.NonAggressionPacts = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection.Bind(nonaggressionpactsNestedObj);


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemBudgetCurrentMonthBalance
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians
                        {
                            /// <summary>Property for 'unity'</summary>
                            public float? Unity { get; set; }

                            /// <summary>Property for 'consumer_goods'</summary>
                            public int? ConsumerGoods { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians model = new GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("unity", out float unityValue) && unityValue != null)
                                    model.Unity = unityValue;

                                if (obj.TryGetInt("consumer_goods", out int consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthBalancePlanetResearchers
                        {
                            /// <summary>Property for 'physics_research'</summary>
                            public int? PhysicsResearch { get; set; }

                            /// <summary>Property for 'society_research'</summary>
                            public int? SocietyResearch { get; set; }

                            /// <summary>Property for 'engineering_research'</summary>
                            public int? EngineeringResearch { get; set; }

                            /// <summary>Property for 'consumer_goods'</summary>
                            public int? ConsumerGoods { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthBalancePlanetResearchers? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthBalancePlanetResearchers model = new GamestateCountryItemBudgetCurrentMonthBalancePlanetResearchers();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("physics_research", out int physicsresearchValue) && physicsresearchValue != null)
                                    model.PhysicsResearch = physicsresearchValue;

                                if (obj.TryGetInt("society_research", out int societyresearchValue) && societyresearchValue != null)
                                    model.SocietyResearch = societyresearchValue;

                                if (obj.TryGetInt("engineering_research", out int engineeringresearchValue) && engineeringresearchValue != null)
                                    model.EngineeringResearch = engineeringresearchValue;

                                if (obj.TryGetInt("consumer_goods", out int consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthBalancePlanetMetallurgists
                        {
                            /// <summary>Property for 'minerals'</summary>
                            public int? Minerals { get; set; }

                            /// <summary>Property for 'alloys'</summary>
                            public float? Alloys { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthBalancePlanetMetallurgists? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthBalancePlanetMetallurgists model = new GamestateCountryItemBudgetCurrentMonthBalancePlanetMetallurgists();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                    model.Minerals = mineralsValue;

                                if (obj.TryGetFloat("alloys", out float alloysValue) && alloysValue != null)
                                    model.Alloys = alloysValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthBalancePlanetRefiners
                        {
                            /// <summary>Property for 'minerals'</summary>
                            public int? Minerals { get; set; }

                            /// <summary>Property for 'exotic_gases'</summary>
                            public float? ExoticGases { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthBalancePlanetRefiners? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthBalancePlanetRefiners model = new GamestateCountryItemBudgetCurrentMonthBalancePlanetRefiners();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                    model.Minerals = mineralsValue;

                                if (obj.TryGetFloat("exotic_gases", out float exoticgasesValue) && exoticgasesValue != null)
                                    model.ExoticGases = exoticgasesValue;


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetCurrentMonthBalancePlanetArtisans
                        {
                            /// <summary>Property for 'minerals'</summary>
                            public int? Minerals { get; set; }

                            /// <summary>Property for 'consumer_goods'</summary>
                            public int? ConsumerGoods { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetCurrentMonthBalancePlanetArtisans? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetCurrentMonthBalancePlanetArtisans model = new GamestateCountryItemBudgetCurrentMonthBalancePlanetArtisans();
                                model.SourceObject = obj;

                                if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                    model.Minerals = mineralsValue;

                                if (obj.TryGetInt("consumer_goods", out int consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;


                                return model;
                            }
                        }
                        /// <summary>Property for 'none'</summary>
                        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? None { get; set; }

                        /// <summary>Property for 'country_base'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryBase? CountryBase { get; set; }

                        /// <summary>Property for 'trade_routes'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? TradeRoutes { get; set; }

                        /// <summary>Property for 'ships'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips? Ships { get; set; }

                        /// <summary>Property for 'ship_components'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips? ShipComponents { get; set; }

                        /// <summary>Property for 'station_gatherers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? StationGatherers { get; set; }

                        /// <summary>Property for 'station_researchers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? StationResearchers { get; set; }

                        /// <summary>Property for 'starbase_stations'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? StarbaseStations { get; set; }

                        /// <summary>Property for 'starbase_buildings'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? StarbaseBuildings { get; set; }

                        /// <summary>Property for 'starbase_modules'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? StarbaseModules { get; set; }

                        /// <summary>Property for 'planet_buildings'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetBuildings { get; set; }

                        /// <summary>Property for 'planet_districts_farming'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsFarming { get; set; }

                        /// <summary>Property for 'planet_districts_mining'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsMining { get; set; }

                        /// <summary>Property for 'planet_districts_generator'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsGenerator { get; set; }

                        /// <summary>Property for 'planet_districts_cities'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsCities { get; set; }

                        /// <summary>Property for 'planet_districts_industrial'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers? PlanetDistrictsIndustrial { get; set; }

                        /// <summary>Property for 'planet_jobs'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs? PlanetJobs { get; set; }

                        /// <summary>Property for 'planet_farmers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs? PlanetFarmers { get; set; }

                        /// <summary>Property for 'planet_miners'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners? PlanetMiners { get; set; }

                        /// <summary>Property for 'planet_technician'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes? PlanetTechnician { get; set; }

                        /// <summary>Property for 'planet_politicians'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians? PlanetPoliticians { get; set; }

                        /// <summary>Property for 'planet_administrators'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians? PlanetAdministrators { get; set; }

                        /// <summary>Property for 'planet_researchers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetResearchers? PlanetResearchers { get; set; }

                        /// <summary>Property for 'planet_metallurgists'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetMetallurgists? PlanetMetallurgists { get; set; }

                        /// <summary>Property for 'planet_traders'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetTraders { get; set; }

                        /// <summary>Property for 'planet_doctors'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans? PlanetDoctors { get; set; }

                        /// <summary>Property for 'planet_refiners'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetRefiners? PlanetRefiners { get; set; }

                        /// <summary>Property for 'planet_artisans'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetArtisans? PlanetArtisans { get; set; }

                        /// <summary>Property for 'pop_category_workers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers? PopCategoryWorkers { get; set; }

                        /// <summary>Property for 'pop_category_specialists'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers? PopCategorySpecialists { get; set; }

                        /// <summary>Property for 'pop_category_rulers'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers? PopCategoryRulers { get; set; }

                        /// <summary>Property for 'orbital_mining_deposits'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits? OrbitalMiningDeposits { get; set; }

                        /// <summary>Property for 'orbital_research_deposits'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits? OrbitalResearchDeposits { get; set; }

                        /// <summary>Property for 'leader_commanders'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders? LeaderCommanders { get; set; }

                        /// <summary>Property for 'leader_scientists'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists? LeaderScientists { get; set; }

                        /// <summary>Property for 'leader_officials'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders? LeaderOfficials { get; set; }

                        /// <summary>Property for 'country_power_projection'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection? CountryPowerProjection { get; set; }

                        /// <summary>Property for 'pop_factions'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians? PopFactions { get; set; }

                        /// <summary>Property for 'non_aggression_pacts'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection? NonAggressionPacts { get; set; }

                        /// <summary>Property for 'diplomatic_networking'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians? DiplomaticNetworking { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemBudgetCurrentMonthBalance? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemBudgetCurrentMonthBalance model = new GamestateCountryItemBudgetCurrentMonthBalance();
                            model.SourceObject = obj;

                            if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                                model.None = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(noneNestedObj);

                            if (obj.TryGetSaveObject("country_base", out SaveObject countrybaseNestedObj))
                                model.CountryBase = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryBase.Bind(countrybaseNestedObj);

                            if (obj.TryGetSaveObject("trade_routes", out SaveObject traderoutesNestedObj))
                                model.TradeRoutes = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(traderoutesNestedObj);

                            if (obj.TryGetSaveObject("ships", out SaveObject shipsNestedObj))
                                model.Ships = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips.Bind(shipsNestedObj);

                            if (obj.TryGetSaveObject("ship_components", out SaveObject shipcomponentsNestedObj))
                                model.ShipComponents = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesShips.Bind(shipcomponentsNestedObj);

                            if (obj.TryGetSaveObject("station_gatherers", out SaveObject stationgatherersNestedObj))
                                model.StationGatherers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(stationgatherersNestedObj);

                            if (obj.TryGetSaveObject("station_researchers", out SaveObject stationresearchersNestedObj))
                                model.StationResearchers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(stationresearchersNestedObj);

                            if (obj.TryGetSaveObject("starbase_stations", out SaveObject starbasestationsNestedObj))
                                model.StarbaseStations = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(starbasestationsNestedObj);

                            if (obj.TryGetSaveObject("starbase_buildings", out SaveObject starbasebuildingsNestedObj))
                                model.StarbaseBuildings = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(starbasebuildingsNestedObj);

                            if (obj.TryGetSaveObject("starbase_modules", out SaveObject starbasemodulesNestedObj))
                                model.StarbaseModules = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(starbasemodulesNestedObj);

                            if (obj.TryGetSaveObject("planet_buildings", out SaveObject planetbuildingsNestedObj))
                                model.PlanetBuildings = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetbuildingsNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_farming", out SaveObject planetdistrictsfarmingNestedObj))
                                model.PlanetDistrictsFarming = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsfarmingNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_mining", out SaveObject planetdistrictsminingNestedObj))
                                model.PlanetDistrictsMining = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsminingNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_generator", out SaveObject planetdistrictsgeneratorNestedObj))
                                model.PlanetDistrictsGenerator = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsgeneratorNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_cities", out SaveObject planetdistrictscitiesNestedObj))
                                model.PlanetDistrictsCities = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictscitiesNestedObj);

                            if (obj.TryGetSaveObject("planet_districts_industrial", out SaveObject planetdistrictsindustrialNestedObj))
                                model.PlanetDistrictsIndustrial = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesStationGatherers.Bind(planetdistrictsindustrialNestedObj);

                            if (obj.TryGetSaveObject("planet_jobs", out SaveObject planetjobsNestedObj))
                                model.PlanetJobs = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs.Bind(planetjobsNestedObj);

                            if (obj.TryGetSaveObject("planet_farmers", out SaveObject planetfarmersNestedObj))
                                model.PlanetFarmers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetJobs.Bind(planetfarmersNestedObj);

                            if (obj.TryGetSaveObject("planet_miners", out SaveObject planetminersNestedObj))
                                model.PlanetMiners = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners.Bind(planetminersNestedObj);

                            if (obj.TryGetSaveObject("planet_technician", out SaveObject planettechnicianNestedObj))
                                model.PlanetTechnician = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeTradeRoutes.Bind(planettechnicianNestedObj);

                            if (obj.TryGetSaveObject("planet_politicians", out SaveObject planetpoliticiansNestedObj))
                                model.PlanetPoliticians = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians.Bind(planetpoliticiansNestedObj);

                            if (obj.TryGetSaveObject("planet_administrators", out SaveObject planetadministratorsNestedObj))
                                model.PlanetAdministrators = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetPoliticians.Bind(planetadministratorsNestedObj);

                            if (obj.TryGetSaveObject("planet_researchers", out SaveObject planetresearchersNestedObj))
                                model.PlanetResearchers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetResearchers.Bind(planetresearchersNestedObj);

                            if (obj.TryGetSaveObject("planet_metallurgists", out SaveObject planetmetallurgistsNestedObj))
                                model.PlanetMetallurgists = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetMetallurgists.Bind(planetmetallurgistsNestedObj);

                            if (obj.TryGetSaveObject("planet_traders", out SaveObject planettradersNestedObj))
                                model.PlanetTraders = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planettradersNestedObj);

                            if (obj.TryGetSaveObject("planet_doctors", out SaveObject planetdoctorsNestedObj))
                                model.PlanetDoctors = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetArtisans.Bind(planetdoctorsNestedObj);

                            if (obj.TryGetSaveObject("planet_refiners", out SaveObject planetrefinersNestedObj))
                                model.PlanetRefiners = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetRefiners.Bind(planetrefinersNestedObj);

                            if (obj.TryGetSaveObject("planet_artisans", out SaveObject planetartisansNestedObj))
                                model.PlanetArtisans = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.GamestateCountryItemBudgetCurrentMonthBalancePlanetArtisans.Bind(planetartisansNestedObj);

                            if (obj.TryGetSaveObject("pop_category_workers", out SaveObject popcategoryworkersNestedObj))
                                model.PopCategoryWorkers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers.Bind(popcategoryworkersNestedObj);

                            if (obj.TryGetSaveObject("pop_category_specialists", out SaveObject popcategoryspecialistsNestedObj))
                                model.PopCategorySpecialists = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers.Bind(popcategoryspecialistsNestedObj);

                            if (obj.TryGetSaveObject("pop_category_rulers", out SaveObject popcategoryrulersNestedObj))
                                model.PopCategoryRulers = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesPopCategoryWorkers.Bind(popcategoryrulersNestedObj);

                            if (obj.TryGetSaveObject("orbital_mining_deposits", out SaveObject orbitalminingdepositsNestedObj))
                                model.OrbitalMiningDeposits = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalMiningDeposits.Bind(orbitalminingdepositsNestedObj);

                            if (obj.TryGetSaveObject("orbital_research_deposits", out SaveObject orbitalresearchdepositsNestedObj))
                                model.OrbitalResearchDeposits = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeOrbitalResearchDeposits.Bind(orbitalresearchdepositsNestedObj);

                            if (obj.TryGetSaveObject("leader_commanders", out SaveObject leadercommandersNestedObj))
                                model.LeaderCommanders = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders.Bind(leadercommandersNestedObj);

                            if (obj.TryGetSaveObject("leader_scientists", out SaveObject leaderscientistsNestedObj))
                                model.LeaderScientists = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderScientists.Bind(leaderscientistsNestedObj);

                            if (obj.TryGetSaveObject("leader_officials", out SaveObject leaderofficialsNestedObj))
                                model.LeaderOfficials = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.GamestateCountryItemBudgetCurrentMonthExpensesLeaderCommanders.Bind(leaderofficialsNestedObj);

                            if (obj.TryGetSaveObject("country_power_projection", out SaveObject countrypowerprojectionNestedObj))
                                model.CountryPowerProjection = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection.Bind(countrypowerprojectionNestedObj);

                            if (obj.TryGetSaveObject("pop_factions", out SaveObject popfactionsNestedObj))
                                model.PopFactions = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians.Bind(popfactionsNestedObj);

                            if (obj.TryGetSaveObject("non_aggression_pacts", out SaveObject nonaggressionpactsNestedObj))
                                model.NonAggressionPacts = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomeCountryPowerProjection.Bind(nonaggressionpactsNestedObj);

                            if (obj.TryGetSaveObject("diplomatic_networking", out SaveObject diplomaticnetworkingNestedObj))
                                model.DiplomaticNetworking = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetPoliticians.Bind(diplomaticnetworkingNestedObj);


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemBudgetCurrentMonthExtraIncome
                    {
                        /// <summary>Property for 'none'</summary>
                        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? None { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemBudgetCurrentMonthExtraIncome? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemBudgetCurrentMonthExtraIncome model = new GamestateCountryItemBudgetCurrentMonthExtraIncome();
                            model.SourceObject = obj;

                            if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                                model.None = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(noneNestedObj);


                            return model;
                        }
                    }
                    /// <summary>Property for 'income'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome? Income { get; set; }

                    /// <summary>Property for 'expenses'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses? Expenses { get; set; }

                    /// <summary>Property for 'balance'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance? Balance { get; set; }

                    /// <summary>Property for 'extra_income'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome? ExtraIncome { get; set; }

                    /// <summary>Property for 'extra_expenses'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome? ExtraExpenses { get; set; }

                    /// <summary>Property for 'extra_balance'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome? ExtraBalance { get; set; }

                    /// <summary>Property for 'trade_income'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome? TradeIncome { get; set; }

                    /// <summary>Property for 'trade_expenses'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome? TradeExpenses { get; set; }

                    /// <summary>Property for 'trade_balance'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome? TradeBalance { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemBudgetCurrentMonth? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemBudgetCurrentMonth model = new GamestateCountryItemBudgetCurrentMonth();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("income", out SaveObject incomeNestedObj))
                            model.Income = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.Bind(incomeNestedObj);

                        if (obj.TryGetSaveObject("expenses", out SaveObject expensesNestedObj))
                            model.Expenses = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExpenses.Bind(expensesNestedObj);

                        if (obj.TryGetSaveObject("balance", out SaveObject balanceNestedObj))
                            model.Balance = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthBalance.Bind(balanceNestedObj);

                        if (obj.TryGetSaveObject("extra_income", out SaveObject extraincomeNestedObj))
                            model.ExtraIncome = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome.Bind(extraincomeNestedObj);

                        if (obj.TryGetSaveObject("extra_expenses", out SaveObject extraexpensesNestedObj))
                            model.ExtraExpenses = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome.Bind(extraexpensesNestedObj);

                        if (obj.TryGetSaveObject("extra_balance", out SaveObject extrabalanceNestedObj))
                            model.ExtraBalance = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome.Bind(extrabalanceNestedObj);

                        if (obj.TryGetSaveObject("trade_income", out SaveObject tradeincomeNestedObj))
                            model.TradeIncome = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome.Bind(tradeincomeNestedObj);

                        if (obj.TryGetSaveObject("trade_expenses", out SaveObject tradeexpensesNestedObj))
                            model.TradeExpenses = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome.Bind(tradeexpensesNestedObj);

                        if (obj.TryGetSaveObject("trade_balance", out SaveObject tradebalanceNestedObj))
                            model.TradeBalance = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthExtraIncome.Bind(tradebalanceNestedObj);


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemBudgetIncomeHighWaterMark
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemBudgetIncomeHighWaterMarkHistory
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemBudgetIncomeHighWaterMarkHistoryResources
                        {
                            /// <summary>Property for 'energy'</summary>
                            public float? Energy { get; set; }

                            /// <summary>Property for 'minerals'</summary>
                            public int? Minerals { get; set; }

                            /// <summary>Property for 'food'</summary>
                            public float? Food { get; set; }

                            /// <summary>Property for 'physics_research'</summary>
                            public float? PhysicsResearch { get; set; }

                            /// <summary>Property for 'society_research'</summary>
                            public float? SocietyResearch { get; set; }

                            /// <summary>Property for 'engineering_research'</summary>
                            public int? EngineeringResearch { get; set; }

                            /// <summary>Property for 'influence'</summary>
                            public float? Influence { get; set; }

                            /// <summary>Property for 'unity'</summary>
                            public float? Unity { get; set; }

                            /// <summary>Property for 'consumer_goods'</summary>
                            public int? ConsumerGoods { get; set; }

                            /// <summary>Property for 'alloys'</summary>
                            public float? Alloys { get; set; }

                            /// <summary>Property for 'exotic_gases'</summary>
                            public float? ExoticGases { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemBudgetIncomeHighWaterMarkHistoryResources? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemBudgetIncomeHighWaterMarkHistoryResources model = new GamestateCountryItemBudgetIncomeHighWaterMarkHistoryResources();
                                model.SourceObject = obj;

                                if (obj.TryGetFloat("energy", out float energyValue) && energyValue != null)
                                    model.Energy = energyValue;

                                if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                    model.Minerals = mineralsValue;

                                if (obj.TryGetFloat("food", out float foodValue) && foodValue != null)
                                    model.Food = foodValue;

                                if (obj.TryGetFloat("physics_research", out float physicsresearchValue) && physicsresearchValue != null)
                                    model.PhysicsResearch = physicsresearchValue;

                                if (obj.TryGetFloat("society_research", out float societyresearchValue) && societyresearchValue != null)
                                    model.SocietyResearch = societyresearchValue;

                                if (obj.TryGetInt("engineering_research", out int engineeringresearchValue) && engineeringresearchValue != null)
                                    model.EngineeringResearch = engineeringresearchValue;

                                if (obj.TryGetFloat("influence", out float influenceValue) && influenceValue != null)
                                    model.Influence = influenceValue;

                                if (obj.TryGetFloat("unity", out float unityValue) && unityValue != null)
                                    model.Unity = unityValue;

                                if (obj.TryGetInt("consumer_goods", out int consumergoodsValue) && consumergoodsValue != null)
                                    model.ConsumerGoods = consumergoodsValue;

                                if (obj.TryGetFloat("alloys", out float alloysValue) && alloysValue != null)
                                    model.Alloys = alloysValue;

                                if (obj.TryGetFloat("exotic_gases", out float exoticgasesValue) && exoticgasesValue != null)
                                    model.ExoticGases = exoticgasesValue;


                                return model;
                            }
                        }
                        /// <summary>Property for 'resources'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetIncomeHighWaterMark.GamestateCountryItemBudgetIncomeHighWaterMarkHistory.GamestateCountryItemBudgetIncomeHighWaterMarkHistoryResources? Resources { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemBudgetIncomeHighWaterMarkHistory? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemBudgetIncomeHighWaterMarkHistory model = new GamestateCountryItemBudgetIncomeHighWaterMarkHistory();
                            model.SourceObject = obj;

                            if (obj.TryGetSaveObject("resources", out SaveObject resourcesNestedObj))
                                model.Resources = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetIncomeHighWaterMark.GamestateCountryItemBudgetIncomeHighWaterMarkHistory.GamestateCountryItemBudgetIncomeHighWaterMarkHistoryResources.Bind(resourcesNestedObj);


                            return model;
                        }
                    }
                    /// <summary>Property for 'current'</summary>
                    public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? Current { get; set; }

                    /// <summary>Property for 'length'</summary>
                    public int? Length { get; set; }

                    /// <summary>Property for 'history'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetIncomeHighWaterMark.GamestateCountryItemBudgetIncomeHighWaterMarkHistory? History { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemBudgetIncomeHighWaterMark? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemBudgetIncomeHighWaterMark model = new GamestateCountryItemBudgetIncomeHighWaterMark();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("current", out SaveObject currentNestedObj))
                            model.Current = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(currentNestedObj);

                        if (obj.TryGetInt("length", out int lengthValue) && lengthValue != null)
                            model.Length = lengthValue;

                        if (obj.TryGetSaveObject("history", out SaveObject historyNestedObj))
                            model.History = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetIncomeHighWaterMark.GamestateCountryItemBudgetIncomeHighWaterMarkHistory.Bind(historyNestedObj);


                        return model;
                    }
                }
                /// <summary>Property for 'current_month'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth? CurrentMonth { get; set; }

                /// <summary>Property for 'last_month'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth? LastMonth { get; set; }

                /// <summary>Property for 'income_high_water_mark'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetIncomeHighWaterMark? IncomeHighWaterMark { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemBudget? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemBudget model = new GamestateCountryItemBudget();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("current_month", out SaveObject currentmonthNestedObj))
                        model.CurrentMonth = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.Bind(currentmonthNestedObj);

                    if (obj.TryGetSaveObject("last_month", out SaveObject lastmonthNestedObj))
                        model.LastMonth = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.Bind(lastmonthNestedObj);

                    if (obj.TryGetSaveObject("income_high_water_mark", out SaveObject incomehighwatermarkNestedObj))
                        model.IncomeHighWaterMark = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetIncomeHighWaterMark.Bind(incomehighwatermarkNestedObj);


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemEvents
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemEventsPoiItem
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemEventsPoiItemScope
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemEventsPoiItemScopeRoot
                        {
                            /// <summary>
                            /// </summary>
                            public class GamestateCountryItemEventsPoiItemScopeRootFrom
                            {
                                /// <summary>
                                /// </summary>
                                public class GamestateCountryItemEventsPoiItemScopeRootFromFrom
                                {
                                    /// <summary>
                                    /// </summary>
                                    public class GamestateCountryItemEventsPoiItemScopeRootFromFromFrom
                                    {
                                        /// <summary>
                                        /// </summary>
                                        public class GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget
                                        {
                                            /// <summary>Property for 'type'</summary>
                                            public string? AType { get; set; }

                                            /// <summary>Property for 'id'</summary>
                                            public int? Id { get; set; }

                                            /// <summary>Property for 'opener_id'</summary>
                                            public long? OpenerId { get; set; }

                                            /// <summary>Property for 'name'</summary>
                                            public string? Name { get; set; }

                                            /// <summary>The source SaveObject this instance was bound from</summary>
                                            public SaveObject? SourceObject { get; private set; }

                                            /// <summary>Binds a SaveObject to a new instance</summary>
                                            public static GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget? Bind(SaveObject? obj)
                                            {
                                                if (obj == null) return null;
                                                GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget model = new GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget();
                                                model.SourceObject = obj;

                                                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                                if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                                    model.Id = idValue;

                                                if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                                    model.OpenerId = openeridValue;

                                                model.Name = obj.TryGetString("name", out string nameStringValue) && nameStringValue != "none" ? nameStringValue : null;


                                                return model;
                                            }
                                        }
                                        /// <summary>Property for 'type'</summary>
                                        public string? AType { get; set; }

                                        /// <summary>Property for 'id'</summary>
                                        public int? Id { get; set; }

                                        /// <summary>Property for 'opener_id'</summary>
                                        public long? OpenerId { get; set; }

                                        /// <summary>Property for 'random'</summary>
                                        public List<int?>? Random { get; set; }

                                        /// <summary>Property for 'random_allowed'</summary>
                                        public bool? RandomAllowed { get; set; }

                                        /// <summary>Property for 'saved_event_target'</summary>
                                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget? SavedEventTarget { get; set; }

                                        /// <summary>The source SaveObject this instance was bound from</summary>
                                        public SaveObject? SourceObject { get; private set; }

                                        /// <summary>Binds a SaveObject to a new instance</summary>
                                        public static GamestateCountryItemEventsPoiItemScopeRootFromFromFrom? Bind(SaveObject? obj)
                                        {
                                            if (obj == null) return null;
                                            GamestateCountryItemEventsPoiItemScopeRootFromFromFrom model = new GamestateCountryItemEventsPoiItemScopeRootFromFromFrom();
                                            model.SourceObject = obj;

                                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                            if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                                model.Id = idValue;

                                            if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                                model.OpenerId = openeridValue;

                                            // TODO: Bind complex type: Random (List<int?>)
                                            if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                                model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                            if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                                model.RandomAllowed = randomallowedValue;

                                            if (obj.TryGetSaveObject("saved_event_target", out SaveObject savedeventtargetNestedObj))
                                                model.SavedEventTarget = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget.Bind(savedeventtargetNestedObj);


                                            return model;
                                        }
                                    }
                                    /// <summary>Property for 'type'</summary>
                                    public string? AType { get; set; }

                                    /// <summary>Property for 'id'</summary>
                                    public int? Id { get; set; }

                                    /// <summary>Property for 'opener_id'</summary>
                                    public long? OpenerId { get; set; }

                                    /// <summary>Property for 'random'</summary>
                                    public List<int?>? Random { get; set; }

                                    /// <summary>Property for 'random_allowed'</summary>
                                    public bool? RandomAllowed { get; set; }

                                    /// <summary>Property for 'from'</summary>
                                    public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom? From { get; set; }

                                    /// <summary>The source SaveObject this instance was bound from</summary>
                                    public SaveObject? SourceObject { get; private set; }

                                    /// <summary>Binds a SaveObject to a new instance</summary>
                                    public static GamestateCountryItemEventsPoiItemScopeRootFromFrom? Bind(SaveObject? obj)
                                    {
                                        if (obj == null) return null;
                                        GamestateCountryItemEventsPoiItemScopeRootFromFrom model = new GamestateCountryItemEventsPoiItemScopeRootFromFrom();
                                        model.SourceObject = obj;

                                        model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                        if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                            model.Id = idValue;

                                        if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                            model.OpenerId = openeridValue;

                                        // TODO: Bind complex type: Random (List<int?>)
                                        if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                            model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                        if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                            model.RandomAllowed = randomallowedValue;

                                        if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                            model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom.Bind(fromNestedObj);


                                        return model;
                                    }
                                }
                                /// <summary>Property for 'type'</summary>
                                public string? AType { get; set; }

                                /// <summary>Property for 'id'</summary>
                                public int? Id { get; set; }

                                /// <summary>Property for 'opener_id'</summary>
                                public long? OpenerId { get; set; }

                                /// <summary>Property for 'random'</summary>
                                public List<int?>? Random { get; set; }

                                /// <summary>Property for 'random_allowed'</summary>
                                public bool? RandomAllowed { get; set; }

                                /// <summary>Property for 'from'</summary>
                                public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom? From { get; set; }

                                /// <summary>The source SaveObject this instance was bound from</summary>
                                public SaveObject? SourceObject { get; private set; }

                                /// <summary>Binds a SaveObject to a new instance</summary>
                                public static GamestateCountryItemEventsPoiItemScopeRootFrom? Bind(SaveObject? obj)
                                {
                                    if (obj == null) return null;
                                    GamestateCountryItemEventsPoiItemScopeRootFrom model = new GamestateCountryItemEventsPoiItemScopeRootFrom();
                                    model.SourceObject = obj;

                                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                    if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                        model.Id = idValue;

                                    if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                        model.OpenerId = openeridValue;

                                    // TODO: Bind complex type: Random (List<int?>)
                                    if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                        model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                    if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                        model.RandomAllowed = randomallowedValue;

                                    if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                        model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.Bind(fromNestedObj);


                                    return model;
                                }
                            }
                            /// <summary>Property for 'type'</summary>
                            public string? AType { get; set; }

                            /// <summary>Property for 'id'</summary>
                            public int? Id { get; set; }

                            /// <summary>Property for 'opener_id'</summary>
                            public long? OpenerId { get; set; }

                            /// <summary>Property for 'random'</summary>
                            public List<int?>? Random { get; set; }

                            /// <summary>Property for 'random_allowed'</summary>
                            public bool? RandomAllowed { get; set; }

                            /// <summary>Property for 'from'</summary>
                            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom? From { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemEventsPoiItemScopeRoot? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemEventsPoiItemScopeRoot model = new GamestateCountryItemEventsPoiItemScopeRoot();
                                model.SourceObject = obj;

                                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                    model.Id = idValue;

                                if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                    model.OpenerId = openeridValue;

                                // TODO: Bind complex type: Random (List<int?>)
                                if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                    model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                    model.RandomAllowed = randomallowedValue;

                                if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                    model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.Bind(fromNestedObj);


                                return model;
                            }
                        }
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemEventsPoiItemScopePrev
                        {
                            /// <summary>
                            /// </summary>
                            public class GamestateCountryItemEventsPoiItemScopePrevPrev
                            {
                                /// <summary>Property for 'type'</summary>
                                public string? AType { get; set; }

                                /// <summary>Property for 'id'</summary>
                                public int? Id { get; set; }

                                /// <summary>Property for 'opener_id'</summary>
                                public long? OpenerId { get; set; }

                                /// <summary>Property for 'random'</summary>
                                public List<int?>? Random { get; set; }

                                /// <summary>Property for 'random_allowed'</summary>
                                public bool? RandomAllowed { get; set; }

                                /// <summary>Property for 'root'</summary>
                                public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot? Root { get; set; }

                                /// <summary>Property for 'from'</summary>
                                public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom? From { get; set; }

                                /// <summary>Property for 'prev'</summary>
                                public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot? Prev { get; set; }

                                /// <summary>The source SaveObject this instance was bound from</summary>
                                public SaveObject? SourceObject { get; private set; }

                                /// <summary>Binds a SaveObject to a new instance</summary>
                                public static GamestateCountryItemEventsPoiItemScopePrevPrev? Bind(SaveObject? obj)
                                {
                                    if (obj == null) return null;
                                    GamestateCountryItemEventsPoiItemScopePrevPrev model = new GamestateCountryItemEventsPoiItemScopePrevPrev();
                                    model.SourceObject = obj;

                                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                    if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                        model.Id = idValue;

                                    if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                        model.OpenerId = openeridValue;

                                    // TODO: Bind complex type: Random (List<int?>)
                                    if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                        model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                    if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                        model.RandomAllowed = randomallowedValue;

                                    if (obj.TryGetSaveObject("root", out SaveObject rootNestedObj))
                                        model.Root = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.Bind(rootNestedObj);

                                    if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                        model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.Bind(fromNestedObj);

                                    if (obj.TryGetSaveObject("prev", out SaveObject prevNestedObj))
                                        model.Prev = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.Bind(prevNestedObj);


                                    return model;
                                }
                            }
                            /// <summary>Property for 'type'</summary>
                            public string? AType { get; set; }

                            /// <summary>Property for 'id'</summary>
                            public int? Id { get; set; }

                            /// <summary>Property for 'opener_id'</summary>
                            public long? OpenerId { get; set; }

                            /// <summary>Property for 'random'</summary>
                            public List<int?>? Random { get; set; }

                            /// <summary>Property for 'random_allowed'</summary>
                            public bool? RandomAllowed { get; set; }

                            /// <summary>Property for 'root'</summary>
                            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot? Root { get; set; }

                            /// <summary>Property for 'from'</summary>
                            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom? From { get; set; }

                            /// <summary>Property for 'prev'</summary>
                            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopePrev.GamestateCountryItemEventsPoiItemScopePrevPrev? Prev { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemEventsPoiItemScopePrev? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemEventsPoiItemScopePrev model = new GamestateCountryItemEventsPoiItemScopePrev();
                                model.SourceObject = obj;

                                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                    model.Id = idValue;

                                if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                    model.OpenerId = openeridValue;

                                // TODO: Bind complex type: Random (List<int?>)
                                if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                    model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                    model.RandomAllowed = randomallowedValue;

                                if (obj.TryGetSaveObject("root", out SaveObject rootNestedObj))
                                    model.Root = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.Bind(rootNestedObj);

                                if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                    model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.Bind(fromNestedObj);

                                if (obj.TryGetSaveObject("prev", out SaveObject prevNestedObj))
                                    model.Prev = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopePrev.GamestateCountryItemEventsPoiItemScopePrevPrev.Bind(prevNestedObj);


                                return model;
                            }
                        }
                        /// <summary>Property for 'type'</summary>
                        public string? AType { get; set; }

                        /// <summary>Property for 'id'</summary>
                        public int? Id { get; set; }

                        /// <summary>Property for 'opener_id'</summary>
                        public long? OpenerId { get; set; }

                        /// <summary>Property for 'random'</summary>
                        public List<int?>? Random { get; set; }

                        /// <summary>Property for 'random_allowed'</summary>
                        public bool? RandomAllowed { get; set; }

                        /// <summary>Property for 'root'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot? Root { get; set; }

                        /// <summary>Property for 'from'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom? From { get; set; }

                        /// <summary>Property for 'prev'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopePrev? Prev { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemEventsPoiItemScope? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemEventsPoiItemScope model = new GamestateCountryItemEventsPoiItemScope();
                            model.SourceObject = obj;

                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                            if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                model.Id = idValue;

                            if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                model.OpenerId = openeridValue;

                            // TODO: Bind complex type: Random (List<int?>)
                            if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                            if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                model.RandomAllowed = randomallowedValue;

                            if (obj.TryGetSaveObject("root", out SaveObject rootNestedObj))
                                model.Root = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.Bind(rootNestedObj);

                            if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.Bind(fromNestedObj);

                            if (obj.TryGetSaveObject("prev", out SaveObject prevNestedObj))
                                model.Prev = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopePrev.Bind(prevNestedObj);


                            return model;
                        }
                    }
                    /// <summary>Property for 'id'</summary>
                    public string? Id { get; set; }

                    /// <summary>Property for 'name'</summary>
                    public string? Name { get; set; }

                    /// <summary>Property for 'desc'</summary>
                    public string? Desc { get; set; }

                    /// <summary>Property for 'event_chain'</summary>
                    public string? EventChain { get; set; }

                    /// <summary>Property for 'location'</summary>
                    public string? Location { get; set; }

                    /// <summary>Property for 'scope'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope? Scope { get; set; }

                    /// <summary>Property for 'has_location'</summary>
                    public bool? HasLocation { get; set; }

                    /// <summary>Property for 'picture'</summary>
                    public string? Picture { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemEventsPoiItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemEventsPoiItem model = new GamestateCountryItemEventsPoiItem();
                        model.SourceObject = obj;

                        model.Id = obj.TryGetString("id", out string idStringValue) && idStringValue != "none" ? idStringValue : null;

                        model.Name = obj.TryGetString("name", out string nameStringValue) && nameStringValue != "none" ? nameStringValue : null;

                        model.Desc = obj.TryGetString("desc", out string descStringValue) && descStringValue != "none" ? descStringValue : null;

                        model.EventChain = obj.TryGetString("event_chain", out string eventchainStringValue) && eventchainStringValue != "none" ? eventchainStringValue : null;

                        model.Location = obj.TryGetString("location", out string locationStringValue) && locationStringValue != "none" ? locationStringValue : null;

                        if (obj.TryGetSaveObject("scope", out SaveObject scopeNestedObj))
                            model.Scope = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.Bind(scopeNestedObj);

                        if (obj.TryGetBool("has_location", out bool haslocationValue) && haslocationValue != null)
                            model.HasLocation = haslocationValue;

                        model.Picture = obj.TryGetString("picture", out string pictureStringValue) && pictureStringValue != "none" ? pictureStringValue : null;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemEventsSpecialProject
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemEventsSpecialProjectScope
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemEventsSpecialProjectScopeFrom
                        {
                            /// <summary>Property for 'type'</summary>
                            public string? AType { get; set; }

                            /// <summary>Property for 'id'</summary>
                            public int? Id { get; set; }

                            /// <summary>Property for 'opener_id'</summary>
                            public long? OpenerId { get; set; }

                            /// <summary>Property for 'random'</summary>
                            public List<int?>? Random { get; set; }

                            /// <summary>Property for 'random_allowed'</summary>
                            public bool? RandomAllowed { get; set; }

                            /// <summary>Property for 'saved_event_target'</summary>
                            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget? SavedEventTarget { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemEventsSpecialProjectScopeFrom? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemEventsSpecialProjectScopeFrom model = new GamestateCountryItemEventsSpecialProjectScopeFrom();
                                model.SourceObject = obj;

                                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                    model.Id = idValue;

                                if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                    model.OpenerId = openeridValue;

                                // TODO: Bind complex type: Random (List<int?>)
                                if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                    model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                    model.RandomAllowed = randomallowedValue;

                                if (obj.TryGetSaveObject("saved_event_target", out SaveObject savedeventtargetNestedObj))
                                    model.SavedEventTarget = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget.Bind(savedeventtargetNestedObj);


                                return model;
                            }
                        }
                        /// <summary>Property for 'type'</summary>
                        public string? AType { get; set; }

                        /// <summary>Property for 'id'</summary>
                        public int? Id { get; set; }

                        /// <summary>Property for 'opener_id'</summary>
                        public long? OpenerId { get; set; }

                        /// <summary>Property for 'random'</summary>
                        public List<int?>? Random { get; set; }

                        /// <summary>Property for 'random_allowed'</summary>
                        public bool? RandomAllowed { get; set; }

                        /// <summary>Property for 'from'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectScope.GamestateCountryItemEventsSpecialProjectScopeFrom? From { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemEventsSpecialProjectScope? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemEventsSpecialProjectScope model = new GamestateCountryItemEventsSpecialProjectScope();
                            model.SourceObject = obj;

                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                            if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                model.Id = idValue;

                            if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                model.OpenerId = openeridValue;

                            // TODO: Bind complex type: Random (List<int?>)
                            if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                            if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                model.RandomAllowed = randomallowedValue;

                            if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectScope.GamestateCountryItemEventsSpecialProjectScopeFrom.Bind(fromNestedObj);


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemEventsSpecialProjectCoordinate
                    {
                        /// <summary>Property for 'type'</summary>
                        public int? AType { get; set; }

                        /// <summary>Property for 'id'</summary>
                        public int? Id { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemEventsSpecialProjectCoordinate? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemEventsSpecialProjectCoordinate model = new GamestateCountryItemEventsSpecialProjectCoordinate();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("type", out int atypeValue) && atypeValue != null)
                                model.AType = atypeValue;

                            if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                model.Id = idValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'id'</summary>
                    public int? Id { get; set; }

                    /// <summary>Property for 'special_project'</summary>
                    public string? SpecialProject { get; set; }

                    /// <summary>Property for 'scope'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectScope? Scope { get; set; }

                    /// <summary>Property for 'coordinate'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate? Coordinate { get; set; }

                    /// <summary>Property for 'planet'</summary>
                    public int? Planet { get; set; }

                    /// <summary>Property for 'ai_research_date'</summary>
                    public DateTime? AiResearchDate { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemEventsSpecialProject? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemEventsSpecialProject model = new GamestateCountryItemEventsSpecialProject();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("id", out int idValue) && idValue != null)
                            model.Id = idValue;

                        model.SpecialProject = obj.TryGetString("special_project", out string specialprojectStringValue) && specialprojectStringValue != "none" ? specialprojectStringValue : null;

                        if (obj.TryGetSaveObject("scope", out SaveObject scopeNestedObj))
                            model.Scope = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectScope.Bind(scopeNestedObj);

                        if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                            model.Coordinate = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate.Bind(coordinateNestedObj);

                        if (obj.TryGetInt("planet", out int planetValue) && planetValue != null)
                            model.Planet = planetValue;

                        if (obj.TryGetDateTime("ai_research_date", out DateTime airesearchdateValue) && airesearchdateValue != null)
                            model.AiResearchDate = airesearchdateValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemEventsEventChain
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemEventsEventChainScope
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemEventsEventChainScopeFrom
                        {
                            /// <summary>Property for 'type'</summary>
                            public string? AType { get; set; }

                            /// <summary>Property for 'id'</summary>
                            public int? Id { get; set; }

                            /// <summary>Property for 'opener_id'</summary>
                            public long? OpenerId { get; set; }

                            /// <summary>Property for 'random'</summary>
                            public List<int?>? Random { get; set; }

                            /// <summary>Property for 'random_allowed'</summary>
                            public bool? RandomAllowed { get; set; }

                            /// <summary>Property for 'from'</summary>
                            public Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent.GamestateAstralRiftsRiftsItemAEventScope? From { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemEventsEventChainScopeFrom? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemEventsEventChainScopeFrom model = new GamestateCountryItemEventsEventChainScopeFrom();
                                model.SourceObject = obj;

                                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                    model.Id = idValue;

                                if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                    model.OpenerId = openeridValue;

                                // TODO: Bind complex type: Random (List<int?>)
                                if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                    model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                                if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                    model.RandomAllowed = randomallowedValue;

                                if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                    model.From = Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent.GamestateAstralRiftsRiftsItemAEventScope.Bind(fromNestedObj);


                                return model;
                            }
                        }
                        /// <summary>Property for 'type'</summary>
                        public string? AType { get; set; }

                        /// <summary>Property for 'id'</summary>
                        public int? Id { get; set; }

                        /// <summary>Property for 'opener_id'</summary>
                        public long? OpenerId { get; set; }

                        /// <summary>Property for 'random'</summary>
                        public List<int?>? Random { get; set; }

                        /// <summary>Property for 'random_allowed'</summary>
                        public bool? RandomAllowed { get; set; }

                        /// <summary>Property for 'from'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope.GamestateCountryItemEventsEventChainScopeFrom? From { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemEventsEventChainScope? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemEventsEventChainScope model = new GamestateCountryItemEventsEventChainScope();
                            model.SourceObject = obj;

                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                            if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                model.Id = idValue;

                            if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                model.OpenerId = openeridValue;

                            // TODO: Bind complex type: Random (List<int?>)
                            if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                            if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                model.RandomAllowed = randomallowedValue;

                            if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                model.From = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope.GamestateCountryItemEventsEventChainScopeFrom.Bind(fromNestedObj);


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemEventsEventChainCounter
                    {
                        /// <summary>Property for 'massex_analyzed'</summary>
                        public int? MassexAnalyzed { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemEventsEventChainCounter? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemEventsEventChainCounter model = new GamestateCountryItemEventsEventChainCounter();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("massex_analyzed", out int massexanalyzedValue) && massexanalyzedValue != null)
                                model.MassexAnalyzed = massexanalyzedValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'event_chain'</summary>
                    public string? EventChain { get; set; }

                    /// <summary>Property for 'scope'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope? Scope { get; set; }

                    /// <summary>Property for 'counter'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainCounter? Counter { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemEventsEventChain? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemEventsEventChain model = new GamestateCountryItemEventsEventChain();
                        model.SourceObject = obj;

                        model.EventChain = obj.TryGetString("event_chain", out string eventchainStringValue) && eventchainStringValue != "none" ? eventchainStringValue : null;

                        if (obj.TryGetSaveObject("scope", out SaveObject scopeNestedObj))
                            model.Scope = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope.Bind(scopeNestedObj);

                        if (obj.TryGetSaveObject("counter", out SaveObject counterNestedObj))
                            model.Counter = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainCounter.Bind(counterNestedObj);


                        return model;
                    }
                }
                /// <summary>Property for 'poi'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem?>? Poi { get; set; }

                /// <summary>Property for 'special_project'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject? SpecialProject { get; set; }

                /// <summary>Property for 'next_special_project_id'</summary>
                public int? NextSpecialProjectId { get; set; }

                /// <summary>Property for 'event_chain'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain? EventChain { get; set; }

                /// <summary>Property for 'completed_event_chain'</summary>
                public string? CompletedEventChain { get; set; }

                /// <summary>Property for 'anomalies'</summary>
                public List<int?>? Anomalies { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemEvents? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemEvents model = new GamestateCountryItemEvents();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: Poi (List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem?>)
                    if (obj.TryGetSaveArray("poi", out SaveArray poiArray) && poiArray != null)
                        model.Poi = new List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem?>(); // Initialize empty list

                    if (obj.TryGetSaveObject("special_project", out SaveObject specialprojectNestedObj))
                        model.SpecialProject = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.Bind(specialprojectNestedObj);

                    if (obj.TryGetInt("next_special_project_id", out int nextspecialprojectidValue) && nextspecialprojectidValue != null)
                        model.NextSpecialProjectId = nextspecialprojectidValue;

                    if (obj.TryGetSaveObject("event_chain", out SaveObject eventchainNestedObj))
                        model.EventChain = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.Bind(eventchainNestedObj);

                    model.CompletedEventChain = obj.TryGetString("completed_event_chain", out string completedeventchainStringValue) && completedeventchainStringValue != "none" ? completedeventchainStringValue : null;

                    // TODO: Bind complex type: Anomalies (List<int?>)
                    if (obj.TryGetSaveArray("anomalies", out SaveArray anomaliesArray) && anomaliesArray != null)
                        model.Anomalies = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (anomaliesArray != null)
                {
                    foreach (var item in anomaliesArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Anomalies.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemTerraIncognita
            {
                /// <summary>Property for 'size'</summary>
                public int? Size { get; set; }

                /// <summary>Property for 'data'</summary>
                public List<int?>? Data { get; set; }

                /// <summary>Property for 'systems'</summary>
                public List<int?>? Systems { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemTerraIncognita? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemTerraIncognita model = new GamestateCountryItemTerraIncognita();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("size", out int sizeValue) && sizeValue != null)
                        model.Size = sizeValue;

                    // TODO: Bind complex type: Data (List<int?>)
                    if (obj.TryGetSaveArray("data", out SaveArray dataArray) && dataArray != null)
                        model.Data = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (dataArray != null)
                {
                    foreach (var item in dataArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Data.Add(scalarValue.Value);
                        }
                    }
                }

                    // TODO: Bind complex type: Systems (List<int?>)
                    if (obj.TryGetSaveArray("systems", out SaveArray systemsArray) && systemsArray != null)
                        model.Systems = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (systemsArray != null)
                {
                    foreach (var item in systemsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Systems.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemAi
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemAiStrategy
                {
                    /// <summary>Property for 'id'</summary>
                    public int? Id { get; set; }

                    /// <summary>Property for 'target'</summary>
                    public int? Target { get; set; }

                    /// <summary>Property for 'value'</summary>
                    public int? Value { get; set; }

                    /// <summary>Property for 'type'</summary>
                    public int? AType { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemAiStrategy? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemAiStrategy model = new GamestateCountryItemAiStrategy();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("id", out int idValue) && idValue != null)
                            model.Id = idValue;

                        if (obj.TryGetInt("target", out int targetValue) && targetValue != null)
                            model.Target = targetValue;

                        if (obj.TryGetInt("value", out int valueValue) && valueValue != null)
                            model.Value = valueValue;

                        if (obj.TryGetInt("type", out int atypeValue) && atypeValue != null)
                            model.AType = atypeValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemAiAttitudeItem
                {
                    /// <summary>Property for 'country'</summary>
                    public int? Country { get; set; }

                    /// <summary>Property for 'attitude'</summary>
                    public string? Attitude { get; set; }

                    /// <summary>Property for 'weight'</summary>
                    public int? Weight { get; set; }

                    /// <summary>Property for 'priority'</summary>
                    public int? Priority { get; set; }

                    /// <summary>Property for 'date'</summary>
                    public DateTime? Date { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemAiAttitudeItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemAiAttitudeItem model = new GamestateCountryItemAiAttitudeItem();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                            model.Country = countryValue;

                        model.Attitude = obj.TryGetString("attitude", out string attitudeStringValue) && attitudeStringValue != "none" ? attitudeStringValue : null;

                        if (obj.TryGetInt("weight", out int weightValue) && weightValue != null)
                            model.Weight = weightValue;

                        if (obj.TryGetInt("priority", out int priorityValue) && priorityValue != null)
                            model.Priority = priorityValue;

                        if (obj.TryGetDateTime("date", out DateTime dateValue) && dateValue != null)
                            model.Date = dateValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemAiLastDiploActionsItem
                {
                    /// <summary>Property for 'country'</summary>
                    public int? Country { get; set; }

                    /// <summary>Property for 'action'</summary>
                    public string? Action { get; set; }

                    /// <summary>Property for 'creation_date'</summary>
                    public DateTime? CreationDate { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemAiLastDiploActionsItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemAiLastDiploActionsItem model = new GamestateCountryItemAiLastDiploActionsItem();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                            model.Country = countryValue;

                        model.Action = obj.TryGetString("action", out string actionStringValue) && actionStringValue != "none" ? actionStringValue : null;

                        if (obj.TryGetDateTime("creation_date", out DateTime creationdateValue) && creationdateValue != null)
                            model.CreationDate = creationdateValue;


                        return model;
                    }
                }
                /// <summary>Property for 'initialized'</summary>
                public bool? Initialized { get; set; }

                /// <summary>Property for 'colonize'</summary>
                public bool? Colonize { get; set; }

                /// <summary>Property for 'budget'</summary>
                public List<int?>? Budget { get; set; }

                /// <summary>Property for 'strategy'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiStrategy? Strategy { get; set; }

                /// <summary>Property for 'prepare_war_date_start'</summary>
                public string? PrepareWarDateStart { get; set; }

                /// <summary>Property for 'prepare_war_date'</summary>
                public string? PrepareWarDate { get; set; }

                /// <summary>Property for 'robot_colonies'</summary>
                public int? RobotColonies { get; set; }

                /// <summary>Property for 'robot_colonies_with_free_buildings'</summary>
                public int? RobotColoniesWithFreeBuildings { get; set; }

                /// <summary>Property for 'target'</summary>
                public long? Target { get; set; }

                /// <summary>Property for 'nemesis'</summary>
                public long? Nemesis { get; set; }

                /// <summary>Property for 'attitude'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiAttitudeItem?>? Attitude { get; set; }

                /// <summary>Property for 'random_seed'</summary>
                public int? RandomSeed { get; set; }

                /// <summary>Property for 'random_count'</summary>
                public int? RandomCount { get; set; }

                /// <summary>Property for 'synced_random_seed'</summary>
                public int? SyncedRandomSeed { get; set; }

                /// <summary>Property for 'synced_random_count'</summary>
                public int? SyncedRandomCount { get; set; }

                /// <summary>Property for 'ai_resource_target_records'</summary>
                public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? AiResourceTargetRecords { get; set; }

                /// <summary>Property for 'last_diplo_actions'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiLastDiploActionsItem?>? LastDiploActions { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemAi? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemAi model = new GamestateCountryItemAi();
                    model.SourceObject = obj;

                    if (obj.TryGetBool("initialized", out bool initializedValue) && initializedValue != null)
                        model.Initialized = initializedValue;

                    if (obj.TryGetBool("colonize", out bool colonizeValue) && colonizeValue != null)
                        model.Colonize = colonizeValue;

                    // TODO: Bind complex type: Budget (List<int?>)
                    if (obj.TryGetSaveArray("budget", out SaveArray budgetArray) && budgetArray != null)
                        model.Budget = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (budgetArray != null)
                {
                    foreach (var item in budgetArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Budget.Add(scalarValue.Value);
                        }
                    }
                }

                    if (obj.TryGetSaveObject("strategy", out SaveObject strategyNestedObj))
                        model.Strategy = Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiStrategy.Bind(strategyNestedObj);

                    model.PrepareWarDateStart = obj.TryGetString("prepare_war_date_start", out string preparewardatestartStringValue) && preparewardatestartStringValue != "none" ? preparewardatestartStringValue : null;

                    model.PrepareWarDate = obj.TryGetString("prepare_war_date", out string preparewardateStringValue) && preparewardateStringValue != "none" ? preparewardateStringValue : null;

                    if (obj.TryGetInt("robot_colonies", out int robotcoloniesValue) && robotcoloniesValue != null)
                        model.RobotColonies = robotcoloniesValue;

                    if (obj.TryGetInt("robot_colonies_with_free_buildings", out int robotcolonieswithfreebuildingsValue) && robotcolonieswithfreebuildingsValue != null)
                        model.RobotColoniesWithFreeBuildings = robotcolonieswithfreebuildingsValue;

                    if (obj.TryGetLong("target", out long targetValue) && targetValue != null)
                        model.Target = targetValue;

                    if (obj.TryGetLong("nemesis", out long nemesisValue) && nemesisValue != null)
                        model.Nemesis = nemesisValue;

                    // TODO: Bind complex type: Attitude (List<Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiAttitudeItem?>)
                    if (obj.TryGetSaveArray("attitude", out SaveArray attitudeArray) && attitudeArray != null)
                        model.Attitude = new List<Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiAttitudeItem?>(); // Initialize empty list

                    if (obj.TryGetInt("random_seed", out int randomseedValue) && randomseedValue != null)
                        model.RandomSeed = randomseedValue;

                    if (obj.TryGetInt("random_count", out int randomcountValue) && randomcountValue != null)
                        model.RandomCount = randomcountValue;

                    if (obj.TryGetInt("synced_random_seed", out int syncedrandomseedValue) && syncedrandomseedValue != null)
                        model.SyncedRandomSeed = syncedrandomseedValue;

                    if (obj.TryGetInt("synced_random_count", out int syncedrandomcountValue) && syncedrandomcountValue != null)
                        model.SyncedRandomCount = syncedrandomcountValue;

                    if (obj.TryGetSaveObject("ai_resource_target_records", out SaveObject airesourcetargetrecordsNestedObj))
                        model.AiResourceTargetRecords = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(airesourcetargetrecordsNestedObj);

                    // TODO: Bind complex type: LastDiploActions (List<Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiLastDiploActionsItem?>)
                    if (obj.TryGetSaveArray("last_diplo_actions", out SaveArray lastdiploactionsArray) && lastdiploactionsArray != null)
                        model.LastDiploActions = new List<Gamestate.GamestateCountryItem.GamestateCountryItemAi.GamestateCountryItemAiLastDiploActionsItem?>(); // Initialize empty list


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemEthos
            {
                /// <summary>Property for 'ethic'</summary>
                public string? Ethic { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemEthos? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemEthos model = new GamestateCountryItemEthos();
                    model.SourceObject = obj;

                    model.Ethic = obj.TryGetString("ethic", out string ethicStringValue) && ethicStringValue != "none" ? ethicStringValue : null;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemFleetTemplateManager
            {
                /// <summary>Property for 'fleet_template'</summary>
                public List<int?>? FleetTemplate { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemFleetTemplateManager? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemFleetTemplateManager model = new GamestateCountryItemFleetTemplateManager();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: FleetTemplate (List<int?>)
                    if (obj.TryGetSaveArray("fleet_template", out SaveArray fleettemplateArray) && fleettemplateArray != null)
                        model.FleetTemplate = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (fleettemplateArray != null)
                {
                    foreach (var item in fleettemplateArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.FleetTemplate.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemGovernment
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemGovernmentCouncilAgendaCooldowns
                {
                    /// <summary>Property for 'council_agenda'</summary>
                    public string? CouncilAgenda { get; set; }

                    /// <summary>Property for 'start_date'</summary>
                    public DateTime? StartDate { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemGovernmentCouncilAgendaCooldowns? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemGovernmentCouncilAgendaCooldowns model = new GamestateCountryItemGovernmentCouncilAgendaCooldowns();
                        model.SourceObject = obj;

                        model.CouncilAgenda = obj.TryGetString("council_agenda", out string councilagendaStringValue) && councilagendaStringValue != "none" ? councilagendaStringValue : null;

                        if (obj.TryGetDateTime("start_date", out DateTime startdateValue) && startdateValue != null)
                            model.StartDate = startdateValue;


                        return model;
                    }
                }
                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>Property for 'authority'</summary>
                public string? Authority { get; set; }

                /// <summary>Property for 'civics'</summary>
                public List<string>? Civics { get; set; }

                /// <summary>Property for 'origin'</summary>
                public string? Origin { get; set; }

                /// <summary>Property for 'council_positions'</summary>
                public List<int?>? CouncilPositions { get; set; }

                /// <summary>Property for 'council_agenda_cooldowns'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemGovernment.GamestateCountryItemGovernmentCouncilAgendaCooldowns? CouncilAgendaCooldowns { get; set; }

                /// <summary>Property for 'unlocked_civic_council_slots'</summary>
                public int? UnlockedCivicCouncilSlots { get; set; }

                /// <summary>Property for 'picked_council_types'</summary>
                public List<string>? PickedCouncilTypes { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemGovernment? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemGovernment model = new GamestateCountryItemGovernment();
                    model.SourceObject = obj;

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                    model.Authority = obj.TryGetString("authority", out string authorityStringValue) && authorityStringValue != "none" ? authorityStringValue : null;

                    // TODO: Bind complex type: Civics (List<string>)
                    if (obj.TryGetSaveArray("civics", out SaveArray civicsArray) && civicsArray != null)
                        model.Civics = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (civicsArray != null)
                {
                    foreach (var item in civicsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.Civics.Add(scalarValue.Value);
                        }
                    }
                }

                    model.Origin = obj.TryGetString("origin", out string originStringValue) && originStringValue != "none" ? originStringValue : null;

                    // TODO: Bind complex type: CouncilPositions (List<int?>)
                    if (obj.TryGetSaveArray("council_positions", out SaveArray councilpositionsArray) && councilpositionsArray != null)
                        model.CouncilPositions = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (councilpositionsArray != null)
                {
                    foreach (var item in councilpositionsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.CouncilPositions.Add(scalarValue.Value);
                        }
                    }
                }

                    if (obj.TryGetSaveObject("council_agenda_cooldowns", out SaveObject councilagendacooldownsNestedObj))
                        model.CouncilAgendaCooldowns = Gamestate.GamestateCountryItem.GamestateCountryItemGovernment.GamestateCountryItemGovernmentCouncilAgendaCooldowns.Bind(councilagendacooldownsNestedObj);

                    if (obj.TryGetInt("unlocked_civic_council_slots", out int unlockedciviccouncilslotsValue) && unlockedciviccouncilslotsValue != null)
                        model.UnlockedCivicCouncilSlots = unlockedciviccouncilslotsValue;

                    // TODO: Bind complex type: PickedCouncilTypes (List<string>)
                    if (obj.TryGetSaveArray("picked_council_types", out SaveArray pickedcounciltypesArray) && pickedcounciltypesArray != null)
                        model.PickedCouncilTypes = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (pickedcounciltypesArray != null)
                {
                    foreach (var item in pickedcounciltypesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.PickedCouncilTypes.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemRejectedActionsItem
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemRejectedActionsItemActionFormResearchAgreement
                {
                    /// <summary>Property for 'type'</summary>
                    public string? AType { get; set; }

                    /// <summary>Property for 'actor'</summary>
                    public int? Actor { get; set; }

                    /// <summary>Property for 'recipient'</summary>
                    public int? Recipient { get; set; }

                    /// <summary>Property for 'id'</summary>
                    public long? Id { get; set; }

                    /// <summary>Property for 'waiting_for_vote'</summary>
                    public bool? WaitingForVote { get; set; }

                    /// <summary>Property for 'timeout'</summary>
                    public DateTime? Timeout { get; set; }

                    /// <summary>Property for 'num_favors'</summary>
                    public int? NumFavors { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemRejectedActionsItemActionFormResearchAgreement? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemRejectedActionsItemActionFormResearchAgreement model = new GamestateCountryItemRejectedActionsItemActionFormResearchAgreement();
                        model.SourceObject = obj;

                        model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                        if (obj.TryGetInt("actor", out int actorValue) && actorValue != null)
                            model.Actor = actorValue;

                        if (obj.TryGetInt("recipient", out int recipientValue) && recipientValue != null)
                            model.Recipient = recipientValue;

                        if (obj.TryGetLong("id", out long idValue) && idValue != null)
                            model.Id = idValue;

                        if (obj.TryGetBool("waiting_for_vote", out bool waitingforvoteValue) && waitingforvoteValue != null)
                            model.WaitingForVote = waitingforvoteValue;

                        if (obj.TryGetDateTime("timeout", out DateTime timeoutValue) && timeoutValue != null)
                            model.Timeout = timeoutValue;

                        if (obj.TryGetInt("num_favors", out int numfavorsValue) && numfavorsValue != null)
                            model.NumFavors = numfavorsValue;


                        return model;
                    }
                }
                /// <summary>Property for 'action_form_research_agreement'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemRejectedActionsItem.GamestateCountryItemRejectedActionsItemActionFormResearchAgreement? ActionFormResearchAgreement { get; set; }

                /// <summary>Property for 'date'</summary>
                public DateTime? Date { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemRejectedActionsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemRejectedActionsItem model = new GamestateCountryItemRejectedActionsItem();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("action_form_research_agreement", out SaveObject actionformresearchagreementNestedObj))
                        model.ActionFormResearchAgreement = Gamestate.GamestateCountryItem.GamestateCountryItemRejectedActionsItem.GamestateCountryItemRejectedActionsItemActionFormResearchAgreement.Bind(actionformresearchagreementNestedObj);

                    if (obj.TryGetDateTime("date", out DateTime dateValue) && dateValue != null)
                        model.Date = dateValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemIntelItem
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemIntelItemHostileItem
                {
                    /// <summary>Property for 'name'</summary>
                    public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

                    /// <summary>Property for 'coordinate'</summary>
                    public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

                    /// <summary>Property for 'military_power'</summary>
                    public float? MilitaryPower { get; set; }

                    /// <summary>Property for 'owner'</summary>
                    public int? Owner { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemIntelItemHostileItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemIntelItemHostileItem model = new GamestateCountryItemIntelItemHostileItem();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                            model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                        if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                            model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                        if (obj.TryGetFloat("military_power", out float militarypowerValue) && militarypowerValue != null)
                            model.MilitaryPower = militarypowerValue;

                        if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                            model.Owner = ownerValue;


                        return model;
                    }
                }
                /// <summary>Property for 'object'</summary>
                public int? AObject { get; set; }

                /// <summary>Property for 'hostile'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemIntelItem.GamestateCountryItemIntelItemHostileItem?>? Hostile { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemIntelItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemIntelItem model = new GamestateCountryItemIntelItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("object", out int aobjectValue) && aobjectValue != null)
                        model.AObject = aobjectValue;

                    // TODO: Bind complex type: Hostile (List<Gamestate.GamestateCountryItem.GamestateCountryItemIntelItem.GamestateCountryItemIntelItemHostileItem?>)
                    if (obj.TryGetSaveArray("hostile", out SaveArray hostileArray) && hostileArray != null)
                        model.Hostile = new List<Gamestate.GamestateCountryItem.GamestateCountryItemIntelItem.GamestateCountryItemIntelItemHostileItem?>(); // Initialize empty list


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemTimedModifier
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemTimedModifierItemsItem
                {
                    /// <summary>Property for 'modifier'</summary>
                    public string? Modifier { get; set; }

                    /// <summary>Property for 'days'</summary>
                    public int? Days { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemTimedModifierItemsItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemTimedModifierItemsItem model = new GamestateCountryItemTimedModifierItemsItem();
                        model.SourceObject = obj;

                        model.Modifier = obj.TryGetString("modifier", out string modifierStringValue) && modifierStringValue != "none" ? modifierStringValue : null;

                        if (obj.TryGetInt("days", out int daysValue) && daysValue != null)
                            model.Days = daysValue;


                        return model;
                    }
                }
                /// <summary>Property for 'items'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemTimedModifier.GamestateCountryItemTimedModifierItemsItem?>? Items { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemTimedModifier? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemTimedModifier model = new GamestateCountryItemTimedModifier();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: Items (List<Gamestate.GamestateCountryItem.GamestateCountryItemTimedModifier.GamestateCountryItemTimedModifierItemsItem?>)
                    if (obj.TryGetSaveArray("items", out SaveArray itemsArray) && itemsArray != null)
                        model.Items = new List<Gamestate.GamestateCountryItem.GamestateCountryItemTimedModifier.GamestateCountryItemTimedModifierItemsItem?>(); // Initialize empty list


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemFlags
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemFlagsRecentFirstContactProcessStarted
                {
                    /// <summary>Property for 'flag_date'</summary>
                    public int? FlagDate { get; set; }

                    /// <summary>Property for 'flag_days'</summary>
                    public int? FlagDays { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemFlagsRecentFirstContactProcessStarted? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemFlagsRecentFirstContactProcessStarted model = new GamestateCountryItemFlagsRecentFirstContactProcessStarted();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("flag_date", out int flagdateValue) && flagdateValue != null)
                            model.FlagDate = flagdateValue;

                        if (obj.TryGetInt("flag_days", out int flagdaysValue) && flagdaysValue != null)
                            model.FlagDays = flagdaysValue;


                        return model;
                    }
                }
                /// <summary>Property for 'human_1'</summary>
                public int? Human1 { get; set; }

                /// <summary>Property for 'custom_start_screen'</summary>
                public int? CustomStartScreen { get; set; }

                /// <summary>Property for 'tutorial_level_picked'</summary>
                public int? TutorialLevelPicked { get; set; }

                /// <summary>Property for 'void_clouds_encountered'</summary>
                public int? VoidCloudsEncountered { get; set; }

                /// <summary>Property for 'starting_event'</summary>
                public int? StartingEvent { get; set; }

                /// <summary>Property for 'first_alien_life'</summary>
                public int? FirstAlienLife { get; set; }

                /// <summary>Property for 'cybrex_intro'</summary>
                public int? CybrexIntro { get; set; }

                /// <summary>Property for 'StoryFirst'</summary>
                public int? Storyfirst { get; set; }

                /// <summary>Property for 'Story5'</summary>
                public int? Story5 { get; set; }

                /// <summary>Property for 'first_contact_protocol_event_happened'</summary>
                public int? FirstContactProtocolEventHappened { get; set; }

                /// <summary>Property for 'habitable_worlds_survey'</summary>
                public int? HabitableWorldsSurvey { get; set; }

                /// <summary>Property for 'anomaly_ANCREL_RUBRICATOR_CAT'</summary>
                public int? AnomalyANCRELRUBRICATORCAT { get; set; }

                /// <summary>Property for 'had_comet'</summary>
                public int? HadComet { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_anomaly.5'</summary>
                public int? AnomalyOutcomeHappenedAnomaly_5 { get; set; }

                /// <summary>Property for 'built_artificial_ship'</summary>
                public int? BuiltArtificialShip { get; set; }

                /// <summary>Property for 'cybrex_7'</summary>
                public int? Cybrex7 { get; set; }

                /// <summary>Property for 'recent_first_contact_process_started'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted? RecentFirstContactProcessStarted { get; set; }

                /// <summary>Property for 'Story7'</summary>
                public int? Story7 { get; set; }

                /// <summary>Property for 'has_encountered_other_empire'</summary>
                public int? HasEncounteredOtherEmpire { get; set; }

                /// <summary>Property for 'zro_found'</summary>
                public int? ZroFound { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_anomaly.6745'</summary>
                public int? AnomalyOutcomeHappenedAnomaly_6745 { get; set; }

                /// <summary>Property for 'anomaly_DISTAR_SIGNAL_CAT'</summary>
                public int? AnomalyDISTARSIGNALCAT { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_distar.265'</summary>
                public int? AnomalyOutcomeHappenedDistar_265 { get; set; }

                /// <summary>Property for 'lcluster_clue_sonic'</summary>
                public int? LclusterClueSonic { get; set; }

                /// <summary>Property for 'outer_system_mining_stations_constructed'</summary>
                public int? OuterSystemMiningStationsConstructed { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_distar.1070'</summary>
                public int? AnomalyOutcomeHappenedDistar_1070 { get; set; }

                /// <summary>Property for 'star_crazy'</summary>
                public int? StarCrazy { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_distar.3040'</summary>
                public int? AnomalyOutcomeHappenedDistar_3040 { get; set; }

                /// <summary>Property for 'first_contact_event'</summary>
                public int? FirstContactEvent { get; set; }

                /// <summary>Property for 'encountered_first_wormhole'</summary>
                public int? EncounteredFirstWormhole { get; set; }

                /// <summary>Property for 'first_faction'</summary>
                public int? FirstFaction { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_anomaly.25'</summary>
                public int? AnomalyOutcomeHappenedAnomaly_25 { get; set; }

                /// <summary>Property for 'crystals_encountered'</summary>
                public int? CrystalsEncountered { get; set; }

                /// <summary>Property for 'first_contact_completed32'</summary>
                public int? FirstContactCompleted32 { get; set; }

                /// <summary>Property for 'curator_intro'</summary>
                public int? CuratorIntro { get; set; }

                /// <summary>Property for 'cybrex_6'</summary>
                public int? Cybrex6 { get; set; }

                /// <summary>Property for 'found_toxic_terraform_candidate'</summary>
                public int? FoundToxicTerraformCandidate { get; set; }

                /// <summary>Property for 'has_negotiated_trade_deal'</summary>
                public int? HasNegotiatedTradeDeal { get; set; }

                /// <summary>Property for 'first_contact_completed58'</summary>
                public int? FirstContactCompleted58 { get; set; }

                /// <summary>Property for 'amoeba_encountered'</summary>
                public int? AmoebaEncountered { get; set; }

                /// <summary>Property for 'first_colony'</summary>
                public int? FirstColony { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_anomaly.7000'</summary>
                public int? AnomalyOutcomeHappenedAnomaly_7000 { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_precursor.2035'</summary>
                public int? AnomalyOutcomeHappenedPrecursor_2035 { get; set; }

                /// <summary>Property for 'living_metal_found'</summary>
                public int? LivingMetalFound { get; set; }

                /// <summary>Property for 'first_specimen_acquired_event_occured'</summary>
                public int? FirstSpecimenAcquiredEventOccured { get; set; }

                /// <summary>Property for 'grand_archive_kickstart_proposed'</summary>
                public int? GrandArchiveKickstartProposed { get; set; }

                /// <summary>Property for 'massex_5_found'</summary>
                public int? Massex5Found { get; set; }

                /// <summary>Property for 'anomaly_VENDING_MACHINE_CAT'</summary>
                public int? AnomalyVENDINGMACHINECAT { get; set; }

                /// <summary>Property for 'confronted_by_cutholoid'</summary>
                public int? ConfrontedByCutholoid { get; set; }

                /// <summary>Property for 'first_contact_completed20'</summary>
                public int? FirstContactCompleted20 { get; set; }

                /// <summary>Property for 'voidworms_encountered'</summary>
                public int? VoidwormsEncountered { get; set; }

                /// <summary>Property for 'first_contact_completed54'</summary>
                public int? FirstContactCompleted54 { get; set; }

                /// <summary>Property for 'leader_recruited_recently'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted? LeaderRecruitedRecently { get; set; }

                /// <summary>Property for 'dismissed_egalitarian_leader_1'</summary>
                public int? DismissedEgalitarianLeader1 { get; set; }

                /// <summary>Property for 'colony_odd_factory'</summary>
                public int? ColonyOddFactory { get; set; }

                /// <summary>Property for 'factions_political_frontier'</summary>
                public int? FactionsPoliticalFrontier { get; set; }

                /// <summary>Property for 'first_contact_completed22'</summary>
                public int? FirstContactCompleted22 { get; set; }

                /// <summary>Property for 'was_recently_targeted_by_voidworms'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted? WasRecentlyTargetedByVoidworms { get; set; }

                /// <summary>Property for 'first_contact_completed82'</summary>
                public int? FirstContactCompleted82 { get; set; }

                /// <summary>Property for 'cutholoids_encountered'</summary>
                public int? CutholoidsEncountered { get; set; }

                /// <summary>Property for 'crystal_nonhostile_approach'</summary>
                public int? CrystalNonhostileApproach { get; set; }

                /// <summary>Property for 'first_spynetwork'</summary>
                public int? FirstSpynetwork { get; set; }

                /// <summary>Property for 'bombarded_by_voidworms_event'</summary>
                public int? BombardedByVoidwormsEvent { get; set; }

                /// <summary>Property for 'anomaly_collision_asteroid_category'</summary>
                public int? AnomalyCollisionAsteroidCategory { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_anomaly.15'</summary>
                public int? AnomalyOutcomeHappenedAnomaly_15 { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_anomaly.6805'</summary>
                public int? AnomalyOutcomeHappenedAnomaly_6805 { get; set; }

                /// <summary>Property for 'espionage_operation_targeted_by1'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted? EspionageOperationTargetedBy1 { get; set; }

                /// <summary>Property for 'recently_had_leader_funeral'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted? RecentlyHadLeaderFuneral { get; set; }

                /// <summary>Property for 'anomaly_outcome_happened_anomaly.185'</summary>
                public int? AnomalyOutcomeHappenedAnomaly_185 { get; set; }

                /// <summary>Property for 'machine_age_virtuality_studied'</summary>
                public int? MachineAgeVirtualityStudied { get; set; }

                /// <summary>Property for 'limbo_downloaded'</summary>
                public int? LimboDownloaded { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemFlags? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemFlags model = new GamestateCountryItemFlags();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("human_1", out int human1Value) && human1Value != null)
                        model.Human1 = human1Value;

                    if (obj.TryGetInt("custom_start_screen", out int customstartscreenValue) && customstartscreenValue != null)
                        model.CustomStartScreen = customstartscreenValue;

                    if (obj.TryGetInt("tutorial_level_picked", out int tutoriallevelpickedValue) && tutoriallevelpickedValue != null)
                        model.TutorialLevelPicked = tutoriallevelpickedValue;

                    if (obj.TryGetInt("void_clouds_encountered", out int voidcloudsencounteredValue) && voidcloudsencounteredValue != null)
                        model.VoidCloudsEncountered = voidcloudsencounteredValue;

                    if (obj.TryGetInt("starting_event", out int startingeventValue) && startingeventValue != null)
                        model.StartingEvent = startingeventValue;

                    if (obj.TryGetInt("first_alien_life", out int firstalienlifeValue) && firstalienlifeValue != null)
                        model.FirstAlienLife = firstalienlifeValue;

                    if (obj.TryGetInt("cybrex_intro", out int cybrexintroValue) && cybrexintroValue != null)
                        model.CybrexIntro = cybrexintroValue;

                    if (obj.TryGetInt("StoryFirst", out int storyfirstValue) && storyfirstValue != null)
                        model.Storyfirst = storyfirstValue;

                    if (obj.TryGetInt("Story5", out int story5Value) && story5Value != null)
                        model.Story5 = story5Value;

                    if (obj.TryGetInt("first_contact_protocol_event_happened", out int firstcontactprotocoleventhappenedValue) && firstcontactprotocoleventhappenedValue != null)
                        model.FirstContactProtocolEventHappened = firstcontactprotocoleventhappenedValue;

                    if (obj.TryGetInt("habitable_worlds_survey", out int habitableworldssurveyValue) && habitableworldssurveyValue != null)
                        model.HabitableWorldsSurvey = habitableworldssurveyValue;

                    if (obj.TryGetInt("anomaly_ANCREL_RUBRICATOR_CAT", out int anomalyancrelrubricatorcatValue) && anomalyancrelrubricatorcatValue != null)
                        model.AnomalyANCRELRUBRICATORCAT = anomalyancrelrubricatorcatValue;

                    if (obj.TryGetInt("had_comet", out int hadcometValue) && hadcometValue != null)
                        model.HadComet = hadcometValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_anomaly.5", out int anomalyoutcomehappenedanomaly_5Value) && anomalyoutcomehappenedanomaly_5Value != null)
                        model.AnomalyOutcomeHappenedAnomaly_5 = anomalyoutcomehappenedanomaly_5Value;

                    if (obj.TryGetInt("built_artificial_ship", out int builtartificialshipValue) && builtartificialshipValue != null)
                        model.BuiltArtificialShip = builtartificialshipValue;

                    if (obj.TryGetInt("cybrex_7", out int cybrex7Value) && cybrex7Value != null)
                        model.Cybrex7 = cybrex7Value;

                    if (obj.TryGetSaveObject("recent_first_contact_process_started", out SaveObject recentfirstcontactprocessstartedNestedObj))
                        model.RecentFirstContactProcessStarted = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted.Bind(recentfirstcontactprocessstartedNestedObj);

                    if (obj.TryGetInt("Story7", out int story7Value) && story7Value != null)
                        model.Story7 = story7Value;

                    if (obj.TryGetInt("has_encountered_other_empire", out int hasencounteredotherempireValue) && hasencounteredotherempireValue != null)
                        model.HasEncounteredOtherEmpire = hasencounteredotherempireValue;

                    if (obj.TryGetInt("zro_found", out int zrofoundValue) && zrofoundValue != null)
                        model.ZroFound = zrofoundValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_anomaly.6745", out int anomalyoutcomehappenedanomaly_6745Value) && anomalyoutcomehappenedanomaly_6745Value != null)
                        model.AnomalyOutcomeHappenedAnomaly_6745 = anomalyoutcomehappenedanomaly_6745Value;

                    if (obj.TryGetInt("anomaly_DISTAR_SIGNAL_CAT", out int anomalydistarsignalcatValue) && anomalydistarsignalcatValue != null)
                        model.AnomalyDISTARSIGNALCAT = anomalydistarsignalcatValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_distar.265", out int anomalyoutcomehappeneddistar_265Value) && anomalyoutcomehappeneddistar_265Value != null)
                        model.AnomalyOutcomeHappenedDistar_265 = anomalyoutcomehappeneddistar_265Value;

                    if (obj.TryGetInt("lcluster_clue_sonic", out int lclustercluesonicValue) && lclustercluesonicValue != null)
                        model.LclusterClueSonic = lclustercluesonicValue;

                    if (obj.TryGetInt("outer_system_mining_stations_constructed", out int outersystemminingstationsconstructedValue) && outersystemminingstationsconstructedValue != null)
                        model.OuterSystemMiningStationsConstructed = outersystemminingstationsconstructedValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_distar.1070", out int anomalyoutcomehappeneddistar_1070Value) && anomalyoutcomehappeneddistar_1070Value != null)
                        model.AnomalyOutcomeHappenedDistar_1070 = anomalyoutcomehappeneddistar_1070Value;

                    if (obj.TryGetInt("star_crazy", out int starcrazyValue) && starcrazyValue != null)
                        model.StarCrazy = starcrazyValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_distar.3040", out int anomalyoutcomehappeneddistar_3040Value) && anomalyoutcomehappeneddistar_3040Value != null)
                        model.AnomalyOutcomeHappenedDistar_3040 = anomalyoutcomehappeneddistar_3040Value;

                    if (obj.TryGetInt("first_contact_event", out int firstcontacteventValue) && firstcontacteventValue != null)
                        model.FirstContactEvent = firstcontacteventValue;

                    if (obj.TryGetInt("encountered_first_wormhole", out int encounteredfirstwormholeValue) && encounteredfirstwormholeValue != null)
                        model.EncounteredFirstWormhole = encounteredfirstwormholeValue;

                    if (obj.TryGetInt("first_faction", out int firstfactionValue) && firstfactionValue != null)
                        model.FirstFaction = firstfactionValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_anomaly.25", out int anomalyoutcomehappenedanomaly_25Value) && anomalyoutcomehappenedanomaly_25Value != null)
                        model.AnomalyOutcomeHappenedAnomaly_25 = anomalyoutcomehappenedanomaly_25Value;

                    if (obj.TryGetInt("crystals_encountered", out int crystalsencounteredValue) && crystalsencounteredValue != null)
                        model.CrystalsEncountered = crystalsencounteredValue;

                    if (obj.TryGetInt("first_contact_completed32", out int firstcontactcompleted32Value) && firstcontactcompleted32Value != null)
                        model.FirstContactCompleted32 = firstcontactcompleted32Value;

                    if (obj.TryGetInt("curator_intro", out int curatorintroValue) && curatorintroValue != null)
                        model.CuratorIntro = curatorintroValue;

                    if (obj.TryGetInt("cybrex_6", out int cybrex6Value) && cybrex6Value != null)
                        model.Cybrex6 = cybrex6Value;

                    if (obj.TryGetInt("found_toxic_terraform_candidate", out int foundtoxicterraformcandidateValue) && foundtoxicterraformcandidateValue != null)
                        model.FoundToxicTerraformCandidate = foundtoxicterraformcandidateValue;

                    if (obj.TryGetInt("has_negotiated_trade_deal", out int hasnegotiatedtradedealValue) && hasnegotiatedtradedealValue != null)
                        model.HasNegotiatedTradeDeal = hasnegotiatedtradedealValue;

                    if (obj.TryGetInt("first_contact_completed58", out int firstcontactcompleted58Value) && firstcontactcompleted58Value != null)
                        model.FirstContactCompleted58 = firstcontactcompleted58Value;

                    if (obj.TryGetInt("amoeba_encountered", out int amoebaencounteredValue) && amoebaencounteredValue != null)
                        model.AmoebaEncountered = amoebaencounteredValue;

                    if (obj.TryGetInt("first_colony", out int firstcolonyValue) && firstcolonyValue != null)
                        model.FirstColony = firstcolonyValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_anomaly.7000", out int anomalyoutcomehappenedanomaly_7000Value) && anomalyoutcomehappenedanomaly_7000Value != null)
                        model.AnomalyOutcomeHappenedAnomaly_7000 = anomalyoutcomehappenedanomaly_7000Value;

                    if (obj.TryGetInt("anomaly_outcome_happened_precursor.2035", out int anomalyoutcomehappenedprecursor_2035Value) && anomalyoutcomehappenedprecursor_2035Value != null)
                        model.AnomalyOutcomeHappenedPrecursor_2035 = anomalyoutcomehappenedprecursor_2035Value;

                    if (obj.TryGetInt("living_metal_found", out int livingmetalfoundValue) && livingmetalfoundValue != null)
                        model.LivingMetalFound = livingmetalfoundValue;

                    if (obj.TryGetInt("first_specimen_acquired_event_occured", out int firstspecimenacquiredeventoccuredValue) && firstspecimenacquiredeventoccuredValue != null)
                        model.FirstSpecimenAcquiredEventOccured = firstspecimenacquiredeventoccuredValue;

                    if (obj.TryGetInt("grand_archive_kickstart_proposed", out int grandarchivekickstartproposedValue) && grandarchivekickstartproposedValue != null)
                        model.GrandArchiveKickstartProposed = grandarchivekickstartproposedValue;

                    if (obj.TryGetInt("massex_5_found", out int massex5foundValue) && massex5foundValue != null)
                        model.Massex5Found = massex5foundValue;

                    if (obj.TryGetInt("anomaly_VENDING_MACHINE_CAT", out int anomalyvendingmachinecatValue) && anomalyvendingmachinecatValue != null)
                        model.AnomalyVENDINGMACHINECAT = anomalyvendingmachinecatValue;

                    if (obj.TryGetInt("confronted_by_cutholoid", out int confrontedbycutholoidValue) && confrontedbycutholoidValue != null)
                        model.ConfrontedByCutholoid = confrontedbycutholoidValue;

                    if (obj.TryGetInt("first_contact_completed20", out int firstcontactcompleted20Value) && firstcontactcompleted20Value != null)
                        model.FirstContactCompleted20 = firstcontactcompleted20Value;

                    if (obj.TryGetInt("voidworms_encountered", out int voidwormsencounteredValue) && voidwormsencounteredValue != null)
                        model.VoidwormsEncountered = voidwormsencounteredValue;

                    if (obj.TryGetInt("first_contact_completed54", out int firstcontactcompleted54Value) && firstcontactcompleted54Value != null)
                        model.FirstContactCompleted54 = firstcontactcompleted54Value;

                    if (obj.TryGetSaveObject("leader_recruited_recently", out SaveObject leaderrecruitedrecentlyNestedObj))
                        model.LeaderRecruitedRecently = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted.Bind(leaderrecruitedrecentlyNestedObj);

                    if (obj.TryGetInt("dismissed_egalitarian_leader_1", out int dismissedegalitarianleader1Value) && dismissedegalitarianleader1Value != null)
                        model.DismissedEgalitarianLeader1 = dismissedegalitarianleader1Value;

                    if (obj.TryGetInt("colony_odd_factory", out int colonyoddfactoryValue) && colonyoddfactoryValue != null)
                        model.ColonyOddFactory = colonyoddfactoryValue;

                    if (obj.TryGetInt("factions_political_frontier", out int factionspoliticalfrontierValue) && factionspoliticalfrontierValue != null)
                        model.FactionsPoliticalFrontier = factionspoliticalfrontierValue;

                    if (obj.TryGetInt("first_contact_completed22", out int firstcontactcompleted22Value) && firstcontactcompleted22Value != null)
                        model.FirstContactCompleted22 = firstcontactcompleted22Value;

                    if (obj.TryGetSaveObject("was_recently_targeted_by_voidworms", out SaveObject wasrecentlytargetedbyvoidwormsNestedObj))
                        model.WasRecentlyTargetedByVoidworms = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted.Bind(wasrecentlytargetedbyvoidwormsNestedObj);

                    if (obj.TryGetInt("first_contact_completed82", out int firstcontactcompleted82Value) && firstcontactcompleted82Value != null)
                        model.FirstContactCompleted82 = firstcontactcompleted82Value;

                    if (obj.TryGetInt("cutholoids_encountered", out int cutholoidsencounteredValue) && cutholoidsencounteredValue != null)
                        model.CutholoidsEncountered = cutholoidsencounteredValue;

                    if (obj.TryGetInt("crystal_nonhostile_approach", out int crystalnonhostileapproachValue) && crystalnonhostileapproachValue != null)
                        model.CrystalNonhostileApproach = crystalnonhostileapproachValue;

                    if (obj.TryGetInt("first_spynetwork", out int firstspynetworkValue) && firstspynetworkValue != null)
                        model.FirstSpynetwork = firstspynetworkValue;

                    if (obj.TryGetInt("bombarded_by_voidworms_event", out int bombardedbyvoidwormseventValue) && bombardedbyvoidwormseventValue != null)
                        model.BombardedByVoidwormsEvent = bombardedbyvoidwormseventValue;

                    if (obj.TryGetInt("anomaly_collision_asteroid_category", out int anomalycollisionasteroidcategoryValue) && anomalycollisionasteroidcategoryValue != null)
                        model.AnomalyCollisionAsteroidCategory = anomalycollisionasteroidcategoryValue;

                    if (obj.TryGetInt("anomaly_outcome_happened_anomaly.15", out int anomalyoutcomehappenedanomaly_15Value) && anomalyoutcomehappenedanomaly_15Value != null)
                        model.AnomalyOutcomeHappenedAnomaly_15 = anomalyoutcomehappenedanomaly_15Value;

                    if (obj.TryGetInt("anomaly_outcome_happened_anomaly.6805", out int anomalyoutcomehappenedanomaly_6805Value) && anomalyoutcomehappenedanomaly_6805Value != null)
                        model.AnomalyOutcomeHappenedAnomaly_6805 = anomalyoutcomehappenedanomaly_6805Value;

                    if (obj.TryGetSaveObject("espionage_operation_targeted_by1", out SaveObject espionageoperationtargetedby1NestedObj))
                        model.EspionageOperationTargetedBy1 = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted.Bind(espionageoperationtargetedby1NestedObj);

                    if (obj.TryGetSaveObject("recently_had_leader_funeral", out SaveObject recentlyhadleaderfuneralNestedObj))
                        model.RecentlyHadLeaderFuneral = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted.Bind(recentlyhadleaderfuneralNestedObj);

                    if (obj.TryGetInt("anomaly_outcome_happened_anomaly.185", out int anomalyoutcomehappenedanomaly_185Value) && anomalyoutcomehappenedanomaly_185Value != null)
                        model.AnomalyOutcomeHappenedAnomaly_185 = anomalyoutcomehappenedanomaly_185Value;

                    if (obj.TryGetInt("machine_age_virtuality_studied", out int machineagevirtualitystudiedValue) && machineagevirtualitystudiedValue != null)
                        model.MachineAgeVirtualityStudied = machineagevirtualitystudiedValue;

                    if (obj.TryGetInt("limbo_downloaded", out int limbodownloadedValue) && limbodownloadedValue != null)
                        model.LimboDownloaded = limbodownloadedValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemVariables
            {
                /// <summary>Property for 'astral_threads_scripted_rewards_mult'</summary>
                public int? AstralThreadsScriptedRewardsMult { get; set; }

                /// <summary>Property for 'dyson_swarm_counter'</summary>
                public int? DysonSwarmCounter { get; set; }

                /// <summary>Property for 'first_contact_skill_variable'</summary>
                public int? FirstContactSkillVariable { get; set; }

                /// <summary>Property for 'hunted_space_fauna'</summary>
                public int? HuntedSpaceFauna { get; set; }

                /// <summary>Property for 'outer_system_mining_stations'</summary>
                public int? OuterSystemMiningStations { get; set; }

                /// <summary>Property for 'paragon_chance_negative'</summary>
                public int? ParagonChanceNegative { get; set; }

                /// <summary>Property for 'space_fauna_contacted'</summary>
                public int? SpaceFaunaContacted { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemVariables? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemVariables model = new GamestateCountryItemVariables();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("astral_threads_scripted_rewards_mult", out int astralthreadsscriptedrewardsmultValue) && astralthreadsscriptedrewardsmultValue != null)
                        model.AstralThreadsScriptedRewardsMult = astralthreadsscriptedrewardsmultValue;

                    if (obj.TryGetInt("dyson_swarm_counter", out int dysonswarmcounterValue) && dysonswarmcounterValue != null)
                        model.DysonSwarmCounter = dysonswarmcounterValue;

                    if (obj.TryGetInt("first_contact_skill_variable", out int firstcontactskillvariableValue) && firstcontactskillvariableValue != null)
                        model.FirstContactSkillVariable = firstcontactskillvariableValue;

                    if (obj.TryGetInt("hunted_space_fauna", out int huntedspacefaunaValue) && huntedspacefaunaValue != null)
                        model.HuntedSpaceFauna = huntedspacefaunaValue;

                    if (obj.TryGetInt("outer_system_mining_stations", out int outersystemminingstationsValue) && outersystemminingstationsValue != null)
                        model.OuterSystemMiningStations = outersystemminingstationsValue;

                    if (obj.TryGetInt("paragon_chance_negative", out int paragonchancenegativeValue) && paragonchancenegativeValue != null)
                        model.ParagonChanceNegative = paragonchancenegativeValue;

                    if (obj.TryGetInt("space_fauna_contacted", out int spacefaunacontactedValue) && spacefaunacontactedValue != null)
                        model.SpaceFaunaContacted = spacefaunacontactedValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemFaction
            {
                /// <summary>Property for 'aggro_range'</summary>
                public int? AggroRange { get; set; }

                /// <summary>Property for 'aggro_range_measure_from'</summary>
                public string? AggroRangeMeasureFrom { get; set; }

                /// <summary>Property for 'intel_effects_surveyed'</summary>
                public bool? IntelEffectsSurveyed { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemFaction? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemFaction model = new GamestateCountryItemFaction();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("aggro_range", out int aggrorangeValue) && aggrorangeValue != null)
                        model.AggroRange = aggrorangeValue;

                    model.AggroRangeMeasureFrom = obj.TryGetString("aggro_range_measure_from", out string aggrorangemeasurefromStringValue) && aggrorangemeasurefromStringValue != "none" ? aggrorangemeasurefromStringValue : null;

                    if (obj.TryGetBool("intel_effects_surveyed", out bool inteleffectssurveyedValue) && inteleffectssurveyedValue != null)
                        model.IntelEffectsSurveyed = inteleffectssurveyedValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemShipNames
            {
                /// <summary>Property for 'HUMAN1_SHIP_Columbus'</summary>
                public int? HUMAN1SHIPColumbus { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Shenandoah'</summary>
                public int? HUMAN1SHIPShenandoah { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Molders'</summary>
                public int? HUMAN1SHIPMolders { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_ShakaZulu'</summary>
                public int? HUMAN1SHIPShakazulu { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Dristigheten'</summary>
                public int? HUMAN1SHIPDristigheten { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Rubicon'</summary>
                public int? HUMAN1SHIPRubicon { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Hawking'</summary>
                public int? HUMAN1SHIPHawking { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Bong'</summary>
                public int? HUMAN1SHIPBong { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Sultan'</summary>
                public int? HUMAN1SHIPSultan { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Starfish'</summary>
                public int? HUMAN1SHIPStarfish { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_MacLachlan'</summary>
                public int? HUMAN1SHIPMaclachlan { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_HuaMulan'</summary>
                public int? HUMAN1SHIPHuamulan { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Haifeng'</summary>
                public int? HUMAN1SHIPHaifeng { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Firecrest'</summary>
                public int? HUMAN1SHIPFirecrest { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Nicator'</summary>
                public int? HUMAN1SHIPNicator { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Sulaco'</summary>
                public int? HUMAN1SHIPSulaco { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Aldrin'</summary>
                public int? HUMAN1SHIPAldrin { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Petrel'</summary>
                public int? HUMAN1SHIPPetrel { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Coppens'</summary>
                public int? HUMAN1SHIPCoppens { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Cantacuzino'</summary>
                public int? HUMAN1SHIPCantacuzino { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Kodiak'</summary>
                public int? HUMAN1SHIPKodiak { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Muirisc'</summary>
                public int? HUMAN1SHIPMuirisc { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Zulu'</summary>
                public int? HUMAN1SHIPZulu { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Gato'</summary>
                public int? HUMAN1SHIPGato { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_OHare'</summary>
                public int? HUMAN1SHIPOhare { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Yonai'</summary>
                public int? HUMAN1SHIPYonai { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Angola'</summary>
                public int? HUMAN1SHIPAngola { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_WilliamTell'</summary>
                public int? HUMAN1SHIPWilliamtell { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Zhengsheng'</summary>
                public int? HUMAN1SHIPZhengsheng { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Badger'</summary>
                public int? HUMAN1SHIPBadger { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Rana'</summary>
                public int? HUMAN1SHIPRana { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_TigerShark'</summary>
                public int? HUMAN1SHIPTigershark { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Macha'</summary>
                public int? HUMAN1SHIPMacha { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Osprey'</summary>
                public int? HUMAN1SHIPOsprey { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Shotel'</summary>
                public int? HUMAN1SHIPShotel { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Kaskara'</summary>
                public int? HUMAN1SHIPKaskara { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Jiangkun'</summary>
                public int? HUMAN1SHIPJiangkun { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_SierradelaPlata'</summary>
                public int? HUMAN1SHIPSierradelaplata { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Steregushchiy'</summary>
                public int? HUMAN1SHIPSteregushchiy { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Iguana'</summary>
                public int? HUMAN1SHIPIguana { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Mandau'</summary>
                public int? HUMAN1SHIPMandau { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Platypus'</summary>
                public int? HUMAN1SHIPPlatypus { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Doolittle'</summary>
                public int? HUMAN1SHIPDoolittle { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Abhay'</summary>
                public int? HUMAN1SHIPAbhay { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Goshawk'</summary>
                public int? HUMAN1SHIPGoshawk { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Jaguar'</summary>
                public int? HUMAN1SHIPJaguar { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Python'</summary>
                public int? HUMAN1SHIPPython { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Atalanta'</summary>
                public int? HUMAN1SHIPAtalanta { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Hellcat'</summary>
                public int? HUMAN1SHIPHellcat { get; set; }

                /// <summary>Property for 'HUMAN1_SHIP_Fonck'</summary>
                public int? HUMAN1SHIPFonck { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemShipNames? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemShipNames model = new GamestateCountryItemShipNames();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("HUMAN1_SHIP_Columbus", out int human1shipcolumbusValue) && human1shipcolumbusValue != null)
                        model.HUMAN1SHIPColumbus = human1shipcolumbusValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Shenandoah", out int human1shipshenandoahValue) && human1shipshenandoahValue != null)
                        model.HUMAN1SHIPShenandoah = human1shipshenandoahValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Molders", out int human1shipmoldersValue) && human1shipmoldersValue != null)
                        model.HUMAN1SHIPMolders = human1shipmoldersValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_ShakaZulu", out int human1shipshakazuluValue) && human1shipshakazuluValue != null)
                        model.HUMAN1SHIPShakazulu = human1shipshakazuluValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Dristigheten", out int human1shipdristighetenValue) && human1shipdristighetenValue != null)
                        model.HUMAN1SHIPDristigheten = human1shipdristighetenValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Rubicon", out int human1shiprubiconValue) && human1shiprubiconValue != null)
                        model.HUMAN1SHIPRubicon = human1shiprubiconValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Hawking", out int human1shiphawkingValue) && human1shiphawkingValue != null)
                        model.HUMAN1SHIPHawking = human1shiphawkingValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Bong", out int human1shipbongValue) && human1shipbongValue != null)
                        model.HUMAN1SHIPBong = human1shipbongValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Sultan", out int human1shipsultanValue) && human1shipsultanValue != null)
                        model.HUMAN1SHIPSultan = human1shipsultanValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Starfish", out int human1shipstarfishValue) && human1shipstarfishValue != null)
                        model.HUMAN1SHIPStarfish = human1shipstarfishValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_MacLachlan", out int human1shipmaclachlanValue) && human1shipmaclachlanValue != null)
                        model.HUMAN1SHIPMaclachlan = human1shipmaclachlanValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_HuaMulan", out int human1shiphuamulanValue) && human1shiphuamulanValue != null)
                        model.HUMAN1SHIPHuamulan = human1shiphuamulanValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Haifeng", out int human1shiphaifengValue) && human1shiphaifengValue != null)
                        model.HUMAN1SHIPHaifeng = human1shiphaifengValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Firecrest", out int human1shipfirecrestValue) && human1shipfirecrestValue != null)
                        model.HUMAN1SHIPFirecrest = human1shipfirecrestValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Nicator", out int human1shipnicatorValue) && human1shipnicatorValue != null)
                        model.HUMAN1SHIPNicator = human1shipnicatorValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Sulaco", out int human1shipsulacoValue) && human1shipsulacoValue != null)
                        model.HUMAN1SHIPSulaco = human1shipsulacoValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Aldrin", out int human1shipaldrinValue) && human1shipaldrinValue != null)
                        model.HUMAN1SHIPAldrin = human1shipaldrinValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Petrel", out int human1shippetrelValue) && human1shippetrelValue != null)
                        model.HUMAN1SHIPPetrel = human1shippetrelValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Coppens", out int human1shipcoppensValue) && human1shipcoppensValue != null)
                        model.HUMAN1SHIPCoppens = human1shipcoppensValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Cantacuzino", out int human1shipcantacuzinoValue) && human1shipcantacuzinoValue != null)
                        model.HUMAN1SHIPCantacuzino = human1shipcantacuzinoValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Kodiak", out int human1shipkodiakValue) && human1shipkodiakValue != null)
                        model.HUMAN1SHIPKodiak = human1shipkodiakValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Muirisc", out int human1shipmuiriscValue) && human1shipmuiriscValue != null)
                        model.HUMAN1SHIPMuirisc = human1shipmuiriscValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Zulu", out int human1shipzuluValue) && human1shipzuluValue != null)
                        model.HUMAN1SHIPZulu = human1shipzuluValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Gato", out int human1shipgatoValue) && human1shipgatoValue != null)
                        model.HUMAN1SHIPGato = human1shipgatoValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_OHare", out int human1shipohareValue) && human1shipohareValue != null)
                        model.HUMAN1SHIPOhare = human1shipohareValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Yonai", out int human1shipyonaiValue) && human1shipyonaiValue != null)
                        model.HUMAN1SHIPYonai = human1shipyonaiValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Angola", out int human1shipangolaValue) && human1shipangolaValue != null)
                        model.HUMAN1SHIPAngola = human1shipangolaValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_WilliamTell", out int human1shipwilliamtellValue) && human1shipwilliamtellValue != null)
                        model.HUMAN1SHIPWilliamtell = human1shipwilliamtellValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Zhengsheng", out int human1shipzhengshengValue) && human1shipzhengshengValue != null)
                        model.HUMAN1SHIPZhengsheng = human1shipzhengshengValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Badger", out int human1shipbadgerValue) && human1shipbadgerValue != null)
                        model.HUMAN1SHIPBadger = human1shipbadgerValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Rana", out int human1shipranaValue) && human1shipranaValue != null)
                        model.HUMAN1SHIPRana = human1shipranaValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_TigerShark", out int human1shiptigersharkValue) && human1shiptigersharkValue != null)
                        model.HUMAN1SHIPTigershark = human1shiptigersharkValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Macha", out int human1shipmachaValue) && human1shipmachaValue != null)
                        model.HUMAN1SHIPMacha = human1shipmachaValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Osprey", out int human1shipospreyValue) && human1shipospreyValue != null)
                        model.HUMAN1SHIPOsprey = human1shipospreyValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Shotel", out int human1shipshotelValue) && human1shipshotelValue != null)
                        model.HUMAN1SHIPShotel = human1shipshotelValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Kaskara", out int human1shipkaskaraValue) && human1shipkaskaraValue != null)
                        model.HUMAN1SHIPKaskara = human1shipkaskaraValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Jiangkun", out int human1shipjiangkunValue) && human1shipjiangkunValue != null)
                        model.HUMAN1SHIPJiangkun = human1shipjiangkunValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_SierradelaPlata", out int human1shipsierradelaplataValue) && human1shipsierradelaplataValue != null)
                        model.HUMAN1SHIPSierradelaplata = human1shipsierradelaplataValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Steregushchiy", out int human1shipsteregushchiyValue) && human1shipsteregushchiyValue != null)
                        model.HUMAN1SHIPSteregushchiy = human1shipsteregushchiyValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Iguana", out int human1shipiguanaValue) && human1shipiguanaValue != null)
                        model.HUMAN1SHIPIguana = human1shipiguanaValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Mandau", out int human1shipmandauValue) && human1shipmandauValue != null)
                        model.HUMAN1SHIPMandau = human1shipmandauValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Platypus", out int human1shipplatypusValue) && human1shipplatypusValue != null)
                        model.HUMAN1SHIPPlatypus = human1shipplatypusValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Doolittle", out int human1shipdoolittleValue) && human1shipdoolittleValue != null)
                        model.HUMAN1SHIPDoolittle = human1shipdoolittleValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Abhay", out int human1shipabhayValue) && human1shipabhayValue != null)
                        model.HUMAN1SHIPAbhay = human1shipabhayValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Goshawk", out int human1shipgoshawkValue) && human1shipgoshawkValue != null)
                        model.HUMAN1SHIPGoshawk = human1shipgoshawkValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Jaguar", out int human1shipjaguarValue) && human1shipjaguarValue != null)
                        model.HUMAN1SHIPJaguar = human1shipjaguarValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Python", out int human1shippythonValue) && human1shippythonValue != null)
                        model.HUMAN1SHIPPython = human1shippythonValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Atalanta", out int human1shipatalantaValue) && human1shipatalantaValue != null)
                        model.HUMAN1SHIPAtalanta = human1shipatalantaValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Hellcat", out int human1shiphellcatValue) && human1shiphellcatValue != null)
                        model.HUMAN1SHIPHellcat = human1shiphellcatValue;

                    if (obj.TryGetInt("HUMAN1_SHIP_Fonck", out int human1shipfonckValue) && human1shipfonckValue != null)
                        model.HUMAN1SHIPFonck = human1shipfonckValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemActivePoliciesItem
            {
                /// <summary>Property for 'policy'</summary>
                public string? Policy { get; set; }

                /// <summary>Property for 'selected'</summary>
                public string? Selected { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemActivePoliciesItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemActivePoliciesItem model = new GamestateCountryItemActivePoliciesItem();
                    model.SourceObject = obj;

                    model.Policy = obj.TryGetString("policy", out string policyStringValue) && policyStringValue != "none" ? policyStringValue : null;

                    model.Selected = obj.TryGetString("selected", out string selectedStringValue) && selectedStringValue != "none" ? selectedStringValue : null;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemShipDesignCollection
            {
                /// <summary>Property for 'ship_design'</summary>
                public List<int?>? ShipDesign { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemShipDesignCollection? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemShipDesignCollection model = new GamestateCountryItemShipDesignCollection();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: ShipDesign (List<int?>)
                    if (obj.TryGetSaveArray("ship_design", out SaveArray shipdesignArray) && shipdesignArray != null)
                        model.ShipDesign = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (shipdesignArray != null)
                {
                    foreach (var item in shipdesignArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.ShipDesign.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemModules
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardEventModule
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardEventModuleDelayedEvent
                    {
                        /// <summary>Property for 'event'</summary>
                        public string? AEvent { get; set; }

                        /// <summary>Property for 'days'</summary>
                        public int? Days { get; set; }

                        /// <summary>Property for 'scope'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope.GamestateCountryItemEventsEventChainScopeFrom? Scope { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardEventModuleDelayedEvent? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardEventModuleDelayedEvent model = new GamestateCountryItemModulesStandardEventModuleDelayedEvent();
                            model.SourceObject = obj;

                            model.AEvent = obj.TryGetString("event", out string aeventStringValue) && aeventStringValue != "none" ? aeventStringValue : null;

                            if (obj.TryGetInt("days", out int daysValue) && daysValue != null)
                                model.Days = daysValue;

                            if (obj.TryGetSaveObject("scope", out SaveObject scopeNestedObj))
                                model.Scope = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope.GamestateCountryItemEventsEventChainScopeFrom.Bind(scopeNestedObj);


                            return model;
                        }
                    }
                    /// <summary>Property for 'delayed_event'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEventModule.GamestateCountryItemModulesStandardEventModuleDelayedEvent? DelayedEvent { get; set; }

                    /// <summary>Property for 'accumulated_anomaly_spawn_chance'</summary>
                    public float? AccumulatedAnomalySpawnChance { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardEventModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardEventModule model = new GamestateCountryItemModulesStandardEventModule();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("delayed_event", out SaveObject delayedeventNestedObj))
                            model.DelayedEvent = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEventModule.GamestateCountryItemModulesStandardEventModuleDelayedEvent.Bind(delayedeventNestedObj);

                        if (obj.TryGetFloat("accumulated_anomaly_spawn_chance", out float accumulatedanomalyspawnchanceValue) && accumulatedanomalyspawnchanceValue != null)
                            model.AccumulatedAnomalySpawnChance = accumulatedanomalyspawnchanceValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardEconomyModule
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardEconomyModuleResources
                    {
                        /// <summary>Property for 'energy'</summary>
                        public int? Energy { get; set; }

                        /// <summary>Property for 'minerals'</summary>
                        public int? Minerals { get; set; }

                        /// <summary>Property for 'food'</summary>
                        public int? Food { get; set; }

                        /// <summary>Property for 'physics_research'</summary>
                        public float? PhysicsResearch { get; set; }

                        /// <summary>Property for 'society_research'</summary>
                        public float? SocietyResearch { get; set; }

                        /// <summary>Property for 'engineering_research'</summary>
                        public int? EngineeringResearch { get; set; }

                        /// <summary>Property for 'influence'</summary>
                        public int? Influence { get; set; }

                        /// <summary>Property for 'unity'</summary>
                        public float? Unity { get; set; }

                        /// <summary>Property for 'consumer_goods'</summary>
                        public float? ConsumerGoods { get; set; }

                        /// <summary>Property for 'alloys'</summary>
                        public float? Alloys { get; set; }

                        /// <summary>Property for 'exotic_gases'</summary>
                        public float? ExoticGases { get; set; }

                        /// <summary>Property for 'minor_artifacts'</summary>
                        public int? MinorArtifacts { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardEconomyModuleResources? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardEconomyModuleResources model = new GamestateCountryItemModulesStandardEconomyModuleResources();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("energy", out int energyValue) && energyValue != null)
                                model.Energy = energyValue;

                            if (obj.TryGetInt("minerals", out int mineralsValue) && mineralsValue != null)
                                model.Minerals = mineralsValue;

                            if (obj.TryGetInt("food", out int foodValue) && foodValue != null)
                                model.Food = foodValue;

                            if (obj.TryGetFloat("physics_research", out float physicsresearchValue) && physicsresearchValue != null)
                                model.PhysicsResearch = physicsresearchValue;

                            if (obj.TryGetFloat("society_research", out float societyresearchValue) && societyresearchValue != null)
                                model.SocietyResearch = societyresearchValue;

                            if (obj.TryGetInt("engineering_research", out int engineeringresearchValue) && engineeringresearchValue != null)
                                model.EngineeringResearch = engineeringresearchValue;

                            if (obj.TryGetInt("influence", out int influenceValue) && influenceValue != null)
                                model.Influence = influenceValue;

                            if (obj.TryGetFloat("unity", out float unityValue) && unityValue != null)
                                model.Unity = unityValue;

                            if (obj.TryGetFloat("consumer_goods", out float consumergoodsValue) && consumergoodsValue != null)
                                model.ConsumerGoods = consumergoodsValue;

                            if (obj.TryGetFloat("alloys", out float alloysValue) && alloysValue != null)
                                model.Alloys = alloysValue;

                            if (obj.TryGetFloat("exotic_gases", out float exoticgasesValue) && exoticgasesValue != null)
                                model.ExoticGases = exoticgasesValue;

                            if (obj.TryGetInt("minor_artifacts", out int minorartifactsValue) && minorartifactsValue != null)
                                model.MinorArtifacts = minorartifactsValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'resources'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEconomyModule.GamestateCountryItemModulesStandardEconomyModuleResources? Resources { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardEconomyModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardEconomyModule model = new GamestateCountryItemModulesStandardEconomyModule();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("resources", out SaveObject resourcesNestedObj))
                            model.Resources = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEconomyModule.GamestateCountryItemModulesStandardEconomyModuleResources.Bind(resourcesNestedObj);


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardLeaderModule
                {
                    /// <summary>Property for 'enabled'</summary>
                    public bool? Enabled { get; set; }

                    /// <summary>Property for 'leaders'</summary>
                    public List<int?>? Leaders { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardLeaderModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardLeaderModule model = new GamestateCountryItemModulesStandardLeaderModule();
                        model.SourceObject = obj;

                        if (obj.TryGetBool("enabled", out bool enabledValue) && enabledValue != null)
                            model.Enabled = enabledValue;

                        // TODO: Bind complex type: Leaders (List<int?>)
                        if (obj.TryGetSaveArray("leaders", out SaveArray leadersArray) && leadersArray != null)
                            model.Leaders = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (leadersArray != null)
                {
                    foreach (var item in leadersArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Leaders.Add(scalarValue.Value);
                        }
                    }
                }


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardDiplomacyModule
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardDiplomacyModuleCasusBelliItem
                    {
                        /// <summary>Property for 'type'</summary>
                        public string? AType { get; set; }

                        /// <summary>Property for 'owner'</summary>
                        public int? Owner { get; set; }

                        /// <summary>Property for 'country'</summary>
                        public int? Country { get; set; }

                        /// <summary>Property for 'days_left'</summary>
                        public int? DaysLeft { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardDiplomacyModuleCasusBelliItem? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardDiplomacyModuleCasusBelliItem model = new GamestateCountryItemModulesStandardDiplomacyModuleCasusBelliItem();
                            model.SourceObject = obj;

                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                            if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                                model.Owner = ownerValue;

                            if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                                model.Country = countryValue;

                            if (obj.TryGetInt("days_left", out int daysleftValue) && daysleftValue != null)
                                model.DaysLeft = daysleftValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'casus_belli'</summary>
                    public List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardDiplomacyModule.GamestateCountryItemModulesStandardDiplomacyModuleCasusBelliItem?>? CasusBelli { get; set; }

                    /// <summary>Property for 'contact_rule'</summary>
                    public string? ContactRule { get; set; }

                    /// <summary>Property for 'borders'</summary>
                    public int? Borders { get; set; }

                    /// <summary>Property for 'non_aggression_pledge'</summary>
                    public int? NonAggressionPledge { get; set; }

                    /// <summary>Property for 'closed_borders'</summary>
                    public int? ClosedBorders { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardDiplomacyModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardDiplomacyModule model = new GamestateCountryItemModulesStandardDiplomacyModule();
                        model.SourceObject = obj;

                        // TODO: Bind complex type: CasusBelli (List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardDiplomacyModule.GamestateCountryItemModulesStandardDiplomacyModuleCasusBelliItem?>)
                        if (obj.TryGetSaveArray("casus_belli", out SaveArray casusbelliArray) && casusbelliArray != null)
                            model.CasusBelli = new List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardDiplomacyModule.GamestateCountryItemModulesStandardDiplomacyModuleCasusBelliItem?>(); // Initialize empty list

                        model.ContactRule = obj.TryGetString("contact_rule", out string contactruleStringValue) && contactruleStringValue != "none" ? contactruleStringValue : null;

                        if (obj.TryGetInt("borders", out int bordersValue) && bordersValue != null)
                            model.Borders = bordersValue;

                        if (obj.TryGetInt("non_aggression_pledge", out int nonaggressionpledgeValue) && nonaggressionpledgeValue != null)
                            model.NonAggressionPledge = nonaggressionpledgeValue;

                        if (obj.TryGetInt("closed_borders", out int closedbordersValue) && closedbordersValue != null)
                            model.ClosedBorders = closedbordersValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardPopFactionsModule
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardPopFactionsModulePotential
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem
                        {
                            /// <summary>
                            /// </summary>
                            public class GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData
                            {
                                /// <summary>Property for 'type'</summary>
                                public string? AType { get; set; }

                                /// <summary>Property for 'id'</summary>
                                public int? Id { get; set; }

                                /// <summary>Property for 'opener_id'</summary>
                                public long? OpenerId { get; set; }

                                /// <summary>The source SaveObject this instance was bound from</summary>
                                public SaveObject? SourceObject { get; private set; }

                                /// <summary>Binds a SaveObject to a new instance</summary>
                                public static GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData? Bind(SaveObject? obj)
                                {
                                    if (obj == null) return null;
                                    GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData model = new GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData();
                                    model.SourceObject = obj;

                                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                                    if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                        model.Id = idValue;

                                    if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                        model.OpenerId = openeridValue;


                                    return model;
                                }
                            }
                            /// <summary>Property for 'key'</summary>
                            public string? Key { get; set; }

                            /// <summary>Property for 'data'</summary>
                            public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData? Data { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem model = new GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem();
                                model.SourceObject = obj;

                                model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                                if (obj.TryGetSaveObject("data", out SaveObject dataNestedObj))
                                    model.Data = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData.Bind(dataNestedObj);


                                return model;
                            }
                        }
                        /// <summary>Property for 'type'</summary>
                        public string? AType { get; set; }

                        /// <summary>Property for 'parameters'</summary>
                        public List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem?>? Parameters { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardPopFactionsModulePotential? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardPopFactionsModulePotential model = new GamestateCountryItemModulesStandardPopFactionsModulePotential();
                            model.SourceObject = obj;

                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                            // TODO: Bind complex type: Parameters (List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem?>)
                            if (obj.TryGetSaveArray("parameters", out SaveArray parametersArray) && parametersArray != null)
                                model.Parameters = new List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem?>(); // Initialize empty list


                            return model;
                        }
                    }
                    /// <summary>Property for 'pop_factions'</summary>
                    public List<int?>? PopFactions { get; set; }

                    /// <summary>Property for 'last_created'</summary>
                    public DateTime? LastCreated { get; set; }

                    /// <summary>Property for 'total_faction_members_power'</summary>
                    public float? TotalFactionMembersPower { get; set; }

                    /// <summary>Property for 'potential'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential? Potential { get; set; }

                    /// <summary>Property for 'potential_count'</summary>
                    public List<int?>? PotentialCount { get; set; }

                    /// <summary>Property for 'actual_count'</summary>
                    public List<int?>? ActualCount { get; set; }

                    /// <summary>Property for 'total_faction_members'</summary>
                    public int? TotalFactionMembers { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardPopFactionsModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardPopFactionsModule model = new GamestateCountryItemModulesStandardPopFactionsModule();
                        model.SourceObject = obj;

                        // TODO: Bind complex type: PopFactions (List<int?>)
                        if (obj.TryGetSaveArray("pop_factions", out SaveArray popfactionsArray) && popfactionsArray != null)
                            model.PopFactions = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (popfactionsArray != null)
                {
                    foreach (var item in popfactionsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.PopFactions.Add(scalarValue.Value);
                        }
                    }
                }

                        if (obj.TryGetDateTime("last_created", out DateTime lastcreatedValue) && lastcreatedValue != null)
                            model.LastCreated = lastcreatedValue;

                        if (obj.TryGetFloat("total_faction_members_power", out float totalfactionmemberspowerValue) && totalfactionmemberspowerValue != null)
                            model.TotalFactionMembersPower = totalfactionmemberspowerValue;

                        if (obj.TryGetSaveObject("potential", out SaveObject potentialNestedObj))
                            model.Potential = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.Bind(potentialNestedObj);

                        // TODO: Bind complex type: PotentialCount (List<int?>)
                        if (obj.TryGetSaveArray("potential_count", out SaveArray potentialcountArray) && potentialcountArray != null)
                            model.PotentialCount = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (potentialcountArray != null)
                {
                    foreach (var item in potentialcountArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.PotentialCount.Add(scalarValue.Value);
                        }
                    }
                }

                        // TODO: Bind complex type: ActualCount (List<int?>)
                        if (obj.TryGetSaveArray("actual_count", out SaveArray actualcountArray) && actualcountArray != null)
                            model.ActualCount = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (actualcountArray != null)
                {
                    foreach (var item in actualcountArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.ActualCount.Add(scalarValue.Value);
                        }
                    }
                }

                        if (obj.TryGetInt("total_faction_members", out int totalfactionmembersValue) && totalfactionmembersValue != null)
                            model.TotalFactionMembers = totalfactionmembersValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardSpeciesRightsModule
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardSpeciesRightsModuleADefault
                    {
                        /// <summary>Property for 'species_index'</summary>
                        public int? SpeciesIndex { get; set; }

                        /// <summary>Property for 'living_standard'</summary>
                        public string? LivingStandard { get; set; }

                        /// <summary>Property for 'citizenship'</summary>
                        public string? Citizenship { get; set; }

                        /// <summary>Property for 'military_service'</summary>
                        public string? MilitaryService { get; set; }

                        /// <summary>Property for 'slavery'</summary>
                        public string? Slavery { get; set; }

                        /// <summary>Property for 'purge'</summary>
                        public string? Purge { get; set; }

                        /// <summary>Property for 'population_control'</summary>
                        public string? PopulationControl { get; set; }

                        /// <summary>Property for 'colonization_control'</summary>
                        public string? ColonizationControl { get; set; }

                        /// <summary>Property for 'migration_control'</summary>
                        public string? MigrationControl { get; set; }

                        /// <summary>Property for 'former_living_standard'</summary>
                        public string? FormerLivingStandard { get; set; }

                        /// <summary>Property for 'former_citizenship'</summary>
                        public string? FormerCitizenship { get; set; }

                        /// <summary>Property for 'former_military_service'</summary>
                        public string? FormerMilitaryService { get; set; }

                        /// <summary>Property for 'former_slavery'</summary>
                        public string? FormerSlavery { get; set; }

                        /// <summary>Property for 'former_purge'</summary>
                        public string? FormerPurge { get; set; }

                        /// <summary>Property for 'last_changed_citizenship_type'</summary>
                        public string? LastChangedCitizenshipType { get; set; }

                        /// <summary>Property for 'last_changed_military_service_type'</summary>
                        public string? LastChangedMilitaryServiceType { get; set; }

                        /// <summary>Property for 'last_changed_slavery_type'</summary>
                        public string? LastChangedSlaveryType { get; set; }

                        /// <summary>Property for 'last_changed_purge_type'</summary>
                        public string? LastChangedPurgeType { get; set; }

                        /// <summary>Property for 'last_changed_living_standard'</summary>
                        public string? LastChangedLivingStandard { get; set; }

                        /// <summary>Property for 'last_changed_colonization_control'</summary>
                        public string? LastChangedColonizationControl { get; set; }

                        /// <summary>Property for 'last_changed_population_control'</summary>
                        public string? LastChangedPopulationControl { get; set; }

                        /// <summary>Property for 'last_changed_migration_control'</summary>
                        public string? LastChangedMigrationControl { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardSpeciesRightsModuleADefault? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardSpeciesRightsModuleADefault model = new GamestateCountryItemModulesStandardSpeciesRightsModuleADefault();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("species_index", out int speciesindexValue) && speciesindexValue != null)
                                model.SpeciesIndex = speciesindexValue;

                            model.LivingStandard = obj.TryGetString("living_standard", out string livingstandardStringValue) && livingstandardStringValue != "none" ? livingstandardStringValue : null;

                            model.Citizenship = obj.TryGetString("citizenship", out string citizenshipStringValue) && citizenshipStringValue != "none" ? citizenshipStringValue : null;

                            model.MilitaryService = obj.TryGetString("military_service", out string militaryserviceStringValue) && militaryserviceStringValue != "none" ? militaryserviceStringValue : null;

                            model.Slavery = obj.TryGetString("slavery", out string slaveryStringValue) && slaveryStringValue != "none" ? slaveryStringValue : null;

                            model.Purge = obj.TryGetString("purge", out string purgeStringValue) && purgeStringValue != "none" ? purgeStringValue : null;

                            model.PopulationControl = obj.TryGetString("population_control", out string populationcontrolStringValue) && populationcontrolStringValue != "none" ? populationcontrolStringValue : null;

                            model.ColonizationControl = obj.TryGetString("colonization_control", out string colonizationcontrolStringValue) && colonizationcontrolStringValue != "none" ? colonizationcontrolStringValue : null;

                            model.MigrationControl = obj.TryGetString("migration_control", out string migrationcontrolStringValue) && migrationcontrolStringValue != "none" ? migrationcontrolStringValue : null;

                            model.FormerLivingStandard = obj.TryGetString("former_living_standard", out string formerlivingstandardStringValue) && formerlivingstandardStringValue != "none" ? formerlivingstandardStringValue : null;

                            model.FormerCitizenship = obj.TryGetString("former_citizenship", out string formercitizenshipStringValue) && formercitizenshipStringValue != "none" ? formercitizenshipStringValue : null;

                            model.FormerMilitaryService = obj.TryGetString("former_military_service", out string formermilitaryserviceStringValue) && formermilitaryserviceStringValue != "none" ? formermilitaryserviceStringValue : null;

                            model.FormerSlavery = obj.TryGetString("former_slavery", out string formerslaveryStringValue) && formerslaveryStringValue != "none" ? formerslaveryStringValue : null;

                            model.FormerPurge = obj.TryGetString("former_purge", out string formerpurgeStringValue) && formerpurgeStringValue != "none" ? formerpurgeStringValue : null;

                            model.LastChangedCitizenshipType = obj.TryGetString("last_changed_citizenship_type", out string lastchangedcitizenshiptypeStringValue) && lastchangedcitizenshiptypeStringValue != "none" ? lastchangedcitizenshiptypeStringValue : null;

                            model.LastChangedMilitaryServiceType = obj.TryGetString("last_changed_military_service_type", out string lastchangedmilitaryservicetypeStringValue) && lastchangedmilitaryservicetypeStringValue != "none" ? lastchangedmilitaryservicetypeStringValue : null;

                            model.LastChangedSlaveryType = obj.TryGetString("last_changed_slavery_type", out string lastchangedslaverytypeStringValue) && lastchangedslaverytypeStringValue != "none" ? lastchangedslaverytypeStringValue : null;

                            model.LastChangedPurgeType = obj.TryGetString("last_changed_purge_type", out string lastchangedpurgetypeStringValue) && lastchangedpurgetypeStringValue != "none" ? lastchangedpurgetypeStringValue : null;

                            model.LastChangedLivingStandard = obj.TryGetString("last_changed_living_standard", out string lastchangedlivingstandardStringValue) && lastchangedlivingstandardStringValue != "none" ? lastchangedlivingstandardStringValue : null;

                            model.LastChangedColonizationControl = obj.TryGetString("last_changed_colonization_control", out string lastchangedcolonizationcontrolStringValue) && lastchangedcolonizationcontrolStringValue != "none" ? lastchangedcolonizationcontrolStringValue : null;

                            model.LastChangedPopulationControl = obj.TryGetString("last_changed_population_control", out string lastchangedpopulationcontrolStringValue) && lastchangedpopulationcontrolStringValue != "none" ? lastchangedpopulationcontrolStringValue : null;

                            model.LastChangedMigrationControl = obj.TryGetString("last_changed_migration_control", out string lastchangedmigrationcontrolStringValue) && lastchangedmigrationcontrolStringValue != "none" ? lastchangedmigrationcontrolStringValue : null;


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardSpeciesRightsModulePrimary
                    {
                        /// <summary>Property for 'species_index'</summary>
                        public int? SpeciesIndex { get; set; }

                        /// <summary>Property for 'living_standard'</summary>
                        public string? LivingStandard { get; set; }

                        /// <summary>Property for 'citizenship'</summary>
                        public string? Citizenship { get; set; }

                        /// <summary>Property for 'military_service'</summary>
                        public string? MilitaryService { get; set; }

                        /// <summary>Property for 'slavery'</summary>
                        public string? Slavery { get; set; }

                        /// <summary>Property for 'purge'</summary>
                        public string? Purge { get; set; }

                        /// <summary>Property for 'population_control'</summary>
                        public string? PopulationControl { get; set; }

                        /// <summary>Property for 'colonization_control'</summary>
                        public string? ColonizationControl { get; set; }

                        /// <summary>Property for 'migration_control'</summary>
                        public string? MigrationControl { get; set; }

                        /// <summary>Property for 'former_slavery'</summary>
                        public string? FormerSlavery { get; set; }

                        /// <summary>Property for 'former_purge'</summary>
                        public string? FormerPurge { get; set; }

                        /// <summary>Property for 'last_changed_citizenship_type'</summary>
                        public string? LastChangedCitizenshipType { get; set; }

                        /// <summary>Property for 'last_changed_military_service_type'</summary>
                        public string? LastChangedMilitaryServiceType { get; set; }

                        /// <summary>Property for 'last_changed_slavery_type'</summary>
                        public string? LastChangedSlaveryType { get; set; }

                        /// <summary>Property for 'last_changed_purge_type'</summary>
                        public string? LastChangedPurgeType { get; set; }

                        /// <summary>Property for 'last_changed_living_standard'</summary>
                        public string? LastChangedLivingStandard { get; set; }

                        /// <summary>Property for 'last_changed_colonization_control'</summary>
                        public string? LastChangedColonizationControl { get; set; }

                        /// <summary>Property for 'last_changed_population_control'</summary>
                        public string? LastChangedPopulationControl { get; set; }

                        /// <summary>Property for 'last_changed_migration_control'</summary>
                        public string? LastChangedMigrationControl { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardSpeciesRightsModulePrimary? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardSpeciesRightsModulePrimary model = new GamestateCountryItemModulesStandardSpeciesRightsModulePrimary();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("species_index", out int speciesindexValue) && speciesindexValue != null)
                                model.SpeciesIndex = speciesindexValue;

                            model.LivingStandard = obj.TryGetString("living_standard", out string livingstandardStringValue) && livingstandardStringValue != "none" ? livingstandardStringValue : null;

                            model.Citizenship = obj.TryGetString("citizenship", out string citizenshipStringValue) && citizenshipStringValue != "none" ? citizenshipStringValue : null;

                            model.MilitaryService = obj.TryGetString("military_service", out string militaryserviceStringValue) && militaryserviceStringValue != "none" ? militaryserviceStringValue : null;

                            model.Slavery = obj.TryGetString("slavery", out string slaveryStringValue) && slaveryStringValue != "none" ? slaveryStringValue : null;

                            model.Purge = obj.TryGetString("purge", out string purgeStringValue) && purgeStringValue != "none" ? purgeStringValue : null;

                            model.PopulationControl = obj.TryGetString("population_control", out string populationcontrolStringValue) && populationcontrolStringValue != "none" ? populationcontrolStringValue : null;

                            model.ColonizationControl = obj.TryGetString("colonization_control", out string colonizationcontrolStringValue) && colonizationcontrolStringValue != "none" ? colonizationcontrolStringValue : null;

                            model.MigrationControl = obj.TryGetString("migration_control", out string migrationcontrolStringValue) && migrationcontrolStringValue != "none" ? migrationcontrolStringValue : null;

                            model.FormerSlavery = obj.TryGetString("former_slavery", out string formerslaveryStringValue) && formerslaveryStringValue != "none" ? formerslaveryStringValue : null;

                            model.FormerPurge = obj.TryGetString("former_purge", out string formerpurgeStringValue) && formerpurgeStringValue != "none" ? formerpurgeStringValue : null;

                            model.LastChangedCitizenshipType = obj.TryGetString("last_changed_citizenship_type", out string lastchangedcitizenshiptypeStringValue) && lastchangedcitizenshiptypeStringValue != "none" ? lastchangedcitizenshiptypeStringValue : null;

                            model.LastChangedMilitaryServiceType = obj.TryGetString("last_changed_military_service_type", out string lastchangedmilitaryservicetypeStringValue) && lastchangedmilitaryservicetypeStringValue != "none" ? lastchangedmilitaryservicetypeStringValue : null;

                            model.LastChangedSlaveryType = obj.TryGetString("last_changed_slavery_type", out string lastchangedslaverytypeStringValue) && lastchangedslaverytypeStringValue != "none" ? lastchangedslaverytypeStringValue : null;

                            model.LastChangedPurgeType = obj.TryGetString("last_changed_purge_type", out string lastchangedpurgetypeStringValue) && lastchangedpurgetypeStringValue != "none" ? lastchangedpurgetypeStringValue : null;

                            model.LastChangedLivingStandard = obj.TryGetString("last_changed_living_standard", out string lastchangedlivingstandardStringValue) && lastchangedlivingstandardStringValue != "none" ? lastchangedlivingstandardStringValue : null;

                            model.LastChangedColonizationControl = obj.TryGetString("last_changed_colonization_control", out string lastchangedcolonizationcontrolStringValue) && lastchangedcolonizationcontrolStringValue != "none" ? lastchangedcolonizationcontrolStringValue : null;

                            model.LastChangedPopulationControl = obj.TryGetString("last_changed_population_control", out string lastchangedpopulationcontrolStringValue) && lastchangedpopulationcontrolStringValue != "none" ? lastchangedpopulationcontrolStringValue : null;

                            model.LastChangedMigrationControl = obj.TryGetString("last_changed_migration_control", out string lastchangedmigrationcontrolStringValue) && lastchangedmigrationcontrolStringValue != "none" ? lastchangedmigrationcontrolStringValue : null;


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardSpeciesRightsModuleBuiltSpecies
                    {
                        /// <summary>Property for 'species_index'</summary>
                        public long? SpeciesIndex { get; set; }

                        /// <summary>Property for 'living_standard'</summary>
                        public string? LivingStandard { get; set; }

                        /// <summary>Property for 'citizenship'</summary>
                        public string? Citizenship { get; set; }

                        /// <summary>Property for 'military_service'</summary>
                        public string? MilitaryService { get; set; }

                        /// <summary>Property for 'slavery'</summary>
                        public string? Slavery { get; set; }

                        /// <summary>Property for 'purge'</summary>
                        public string? Purge { get; set; }

                        /// <summary>Property for 'population_control'</summary>
                        public string? PopulationControl { get; set; }

                        /// <summary>Property for 'colonization_control'</summary>
                        public string? ColonizationControl { get; set; }

                        /// <summary>Property for 'migration_control'</summary>
                        public string? MigrationControl { get; set; }

                        /// <summary>Property for 'last_changed_citizenship_type'</summary>
                        public string? LastChangedCitizenshipType { get; set; }

                        /// <summary>Property for 'last_changed_military_service_type'</summary>
                        public string? LastChangedMilitaryServiceType { get; set; }

                        /// <summary>Property for 'last_changed_slavery_type'</summary>
                        public string? LastChangedSlaveryType { get; set; }

                        /// <summary>Property for 'last_changed_purge_type'</summary>
                        public string? LastChangedPurgeType { get; set; }

                        /// <summary>Property for 'last_changed_living_standard'</summary>
                        public string? LastChangedLivingStandard { get; set; }

                        /// <summary>Property for 'last_changed_colonization_control'</summary>
                        public string? LastChangedColonizationControl { get; set; }

                        /// <summary>Property for 'last_changed_population_control'</summary>
                        public string? LastChangedPopulationControl { get; set; }

                        /// <summary>Property for 'last_changed_migration_control'</summary>
                        public string? LastChangedMigrationControl { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardSpeciesRightsModuleBuiltSpecies? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardSpeciesRightsModuleBuiltSpecies model = new GamestateCountryItemModulesStandardSpeciesRightsModuleBuiltSpecies();
                            model.SourceObject = obj;

                            if (obj.TryGetLong("species_index", out long speciesindexValue) && speciesindexValue != null)
                                model.SpeciesIndex = speciesindexValue;

                            model.LivingStandard = obj.TryGetString("living_standard", out string livingstandardStringValue) && livingstandardStringValue != "none" ? livingstandardStringValue : null;

                            model.Citizenship = obj.TryGetString("citizenship", out string citizenshipStringValue) && citizenshipStringValue != "none" ? citizenshipStringValue : null;

                            model.MilitaryService = obj.TryGetString("military_service", out string militaryserviceStringValue) && militaryserviceStringValue != "none" ? militaryserviceStringValue : null;

                            model.Slavery = obj.TryGetString("slavery", out string slaveryStringValue) && slaveryStringValue != "none" ? slaveryStringValue : null;

                            model.Purge = obj.TryGetString("purge", out string purgeStringValue) && purgeStringValue != "none" ? purgeStringValue : null;

                            model.PopulationControl = obj.TryGetString("population_control", out string populationcontrolStringValue) && populationcontrolStringValue != "none" ? populationcontrolStringValue : null;

                            model.ColonizationControl = obj.TryGetString("colonization_control", out string colonizationcontrolStringValue) && colonizationcontrolStringValue != "none" ? colonizationcontrolStringValue : null;

                            model.MigrationControl = obj.TryGetString("migration_control", out string migrationcontrolStringValue) && migrationcontrolStringValue != "none" ? migrationcontrolStringValue : null;

                            model.LastChangedCitizenshipType = obj.TryGetString("last_changed_citizenship_type", out string lastchangedcitizenshiptypeStringValue) && lastchangedcitizenshiptypeStringValue != "none" ? lastchangedcitizenshiptypeStringValue : null;

                            model.LastChangedMilitaryServiceType = obj.TryGetString("last_changed_military_service_type", out string lastchangedmilitaryservicetypeStringValue) && lastchangedmilitaryservicetypeStringValue != "none" ? lastchangedmilitaryservicetypeStringValue : null;

                            model.LastChangedSlaveryType = obj.TryGetString("last_changed_slavery_type", out string lastchangedslaverytypeStringValue) && lastchangedslaverytypeStringValue != "none" ? lastchangedslaverytypeStringValue : null;

                            model.LastChangedPurgeType = obj.TryGetString("last_changed_purge_type", out string lastchangedpurgetypeStringValue) && lastchangedpurgetypeStringValue != "none" ? lastchangedpurgetypeStringValue : null;

                            model.LastChangedLivingStandard = obj.TryGetString("last_changed_living_standard", out string lastchangedlivingstandardStringValue) && lastchangedlivingstandardStringValue != "none" ? lastchangedlivingstandardStringValue : null;

                            model.LastChangedColonizationControl = obj.TryGetString("last_changed_colonization_control", out string lastchangedcolonizationcontrolStringValue) && lastchangedcolonizationcontrolStringValue != "none" ? lastchangedcolonizationcontrolStringValue : null;

                            model.LastChangedPopulationControl = obj.TryGetString("last_changed_population_control", out string lastchangedpopulationcontrolStringValue) && lastchangedpopulationcontrolStringValue != "none" ? lastchangedpopulationcontrolStringValue : null;

                            model.LastChangedMigrationControl = obj.TryGetString("last_changed_migration_control", out string lastchangedmigrationcontrolStringValue) && lastchangedmigrationcontrolStringValue != "none" ? lastchangedmigrationcontrolStringValue : null;


                            return model;
                        }
                    }
                    /// <summary>Property for 'enabled'</summary>
                    public bool? Enabled { get; set; }

                    /// <summary>Property for 'default'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule.GamestateCountryItemModulesStandardSpeciesRightsModuleADefault? ADefault { get; set; }

                    /// <summary>Property for 'primary'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule.GamestateCountryItemModulesStandardSpeciesRightsModulePrimary? Primary { get; set; }

                    /// <summary>Property for 'built_species'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule.GamestateCountryItemModulesStandardSpeciesRightsModuleBuiltSpecies? BuiltSpecies { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardSpeciesRightsModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardSpeciesRightsModule model = new GamestateCountryItemModulesStandardSpeciesRightsModule();
                        model.SourceObject = obj;

                        if (obj.TryGetBool("enabled", out bool enabledValue) && enabledValue != null)
                            model.Enabled = enabledValue;

                        if (obj.TryGetSaveObject("default", out SaveObject adefaultNestedObj))
                            model.ADefault = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule.GamestateCountryItemModulesStandardSpeciesRightsModuleADefault.Bind(adefaultNestedObj);

                        if (obj.TryGetSaveObject("primary", out SaveObject primaryNestedObj))
                            model.Primary = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule.GamestateCountryItemModulesStandardSpeciesRightsModulePrimary.Bind(primaryNestedObj);

                        if (obj.TryGetSaveObject("built_species", out SaveObject builtspeciesNestedObj))
                            model.BuiltSpecies = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule.GamestateCountryItemModulesStandardSpeciesRightsModuleBuiltSpecies.Bind(builtspeciesNestedObj);


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardTradeRoutesModule
                {
                    /// <summary>Property for 'collected'</summary>
                    public float? Collected { get; set; }

                    /// <summary>Property for 'last_month'</summary>
                    public float? LastMonth { get; set; }

                    /// <summary>Property for 'days'</summary>
                    public int? Days { get; set; }

                    /// <summary>Property for 'internal'</summary>
                    public List<int?>? AInternal { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardTradeRoutesModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardTradeRoutesModule model = new GamestateCountryItemModulesStandardTradeRoutesModule();
                        model.SourceObject = obj;

                        if (obj.TryGetFloat("collected", out float collectedValue) && collectedValue != null)
                            model.Collected = collectedValue;

                        if (obj.TryGetFloat("last_month", out float lastmonthValue) && lastmonthValue != null)
                            model.LastMonth = lastmonthValue;

                        if (obj.TryGetInt("days", out int daysValue) && daysValue != null)
                            model.Days = daysValue;

                        // TODO: Bind complex type: AInternal (List<int?>)
                        if (obj.TryGetSaveArray("internal", out SaveArray ainternalArray) && ainternalArray != null)
                            model.AInternal = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (ainternalArray != null)
                {
                    foreach (var item in ainternalArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.AInternal.Add(scalarValue.Value);
                        }
                    }
                }


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateCountryItemModulesStandardGrandArchiveModule
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardGrandArchiveModuleExhibits
                    {
                        /// <summary>Property for 'aesthetic_wonder'</summary>
                        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? AestheticWonder { get; set; }

                        /// <summary>Property for 'historical_item'</summary>
                        public List<int?>? HistoricalItem { get; set; }

                        /// <summary>Property for 'xeno_geology'</summary>
                        public List<int?>? XenoGeology { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardGrandArchiveModuleExhibits? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardGrandArchiveModuleExhibits model = new GamestateCountryItemModulesStandardGrandArchiveModuleExhibits();
                            model.SourceObject = obj;

                            if (obj.TryGetSaveObject("aesthetic_wonder", out SaveObject aestheticwonderNestedObj))
                                model.AestheticWonder = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(aestheticwonderNestedObj);

                            // TODO: Bind complex type: HistoricalItem (List<int?>)
                            if (obj.TryGetSaveArray("historical_item", out SaveArray historicalitemArray) && historicalitemArray != null)
                                model.HistoricalItem = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (historicalitemArray != null)
                {
                    foreach (var item in historicalitemArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.HistoricalItem.Add(scalarValue.Value);
                        }
                    }
                }

                            // TODO: Bind complex type: XenoGeology (List<int?>)
                            if (obj.TryGetSaveArray("xeno_geology", out SaveArray xenogeologyArray) && xenogeologyArray != null)
                                model.XenoGeology = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (xenogeologyArray != null)
                {
                    foreach (var item in xenogeologyArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.XenoGeology.Add(scalarValue.Value);
                        }
                    }
                }


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemModulesStandardGrandArchiveModuleSpecimenManagementSettings
                    {
                        /// <summary>Property for 'auto_buy'</summary>
                        public bool? AutoBuy { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemModulesStandardGrandArchiveModuleSpecimenManagementSettings? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemModulesStandardGrandArchiveModuleSpecimenManagementSettings model = new GamestateCountryItemModulesStandardGrandArchiveModuleSpecimenManagementSettings();
                            model.SourceObject = obj;

                            if (obj.TryGetBool("auto_buy", out bool autobuyValue) && autobuyValue != null)
                                model.AutoBuy = autobuyValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'exhibits'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardGrandArchiveModule.GamestateCountryItemModulesStandardGrandArchiveModuleExhibits? Exhibits { get; set; }

                    /// <summary>Property for 'last_received_specimen'</summary>
                    public string? LastReceivedSpecimen { get; set; }

                    /// <summary>Property for 'auto_culling_settings'</summary>
                    public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? AutoCullingSettings { get; set; }

                    /// <summary>Property for 'specimen_management_settings'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardGrandArchiveModule.GamestateCountryItemModulesStandardGrandArchiveModuleSpecimenManagementSettings? SpecimenManagementSettings { get; set; }

                    /// <summary>Property for 'culling_value'</summary>
                    public List<Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits?>? CullingValue { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemModulesStandardGrandArchiveModule? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemModulesStandardGrandArchiveModule model = new GamestateCountryItemModulesStandardGrandArchiveModule();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("exhibits", out SaveObject exhibitsNestedObj))
                            model.Exhibits = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardGrandArchiveModule.GamestateCountryItemModulesStandardGrandArchiveModuleExhibits.Bind(exhibitsNestedObj);

                        model.LastReceivedSpecimen = obj.TryGetString("last_received_specimen", out string lastreceivedspecimenStringValue) && lastreceivedspecimenStringValue != "none" ? lastreceivedspecimenStringValue : null;

                        if (obj.TryGetSaveObject("auto_culling_settings", out SaveObject autocullingsettingsNestedObj))
                            model.AutoCullingSettings = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(autocullingsettingsNestedObj);

                        if (obj.TryGetSaveObject("specimen_management_settings", out SaveObject specimenmanagementsettingsNestedObj))
                            model.SpecimenManagementSettings = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardGrandArchiveModule.GamestateCountryItemModulesStandardGrandArchiveModuleSpecimenManagementSettings.Bind(specimenmanagementsettingsNestedObj);

                        // TODO: Bind complex type: CullingValue (List<Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits?>)
                        if (obj.TryGetSaveArray("culling_value", out SaveArray cullingvalueArray) && cullingvalueArray != null)
                            model.CullingValue = new List<Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits?>(); // Initialize empty list


                        return model;
                    }
                }
                /// <summary>Property for 'standard_event_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEventModule? StandardEventModule { get; set; }

                /// <summary>Property for 'standard_economy_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEconomyModule? StandardEconomyModule { get; set; }

                /// <summary>Property for 'standard_leader_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardLeaderModule? StandardLeaderModule { get; set; }

                /// <summary>Property for 'standard_diplomacy_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardDiplomacyModule? StandardDiplomacyModule { get; set; }

                /// <summary>Property for 'standard_technology_module'</summary>
                public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? StandardTechnologyModule { get; set; }

                /// <summary>Property for 'standard_pop_factions_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule? StandardPopFactionsModule { get; set; }

                /// <summary>Property for 'standard_expansion_module'</summary>
                public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? StandardExpansionModule { get; set; }

                /// <summary>Property for 'standard_species_rights_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule? StandardSpeciesRightsModule { get; set; }

                /// <summary>Property for 'standard_trade_routes_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardTradeRoutesModule? StandardTradeRoutesModule { get; set; }

                /// <summary>Property for 'standard_grand_archive_module'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardGrandArchiveModule? StandardGrandArchiveModule { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemModules? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemModules model = new GamestateCountryItemModules();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("standard_event_module", out SaveObject standardeventmoduleNestedObj))
                        model.StandardEventModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEventModule.Bind(standardeventmoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_economy_module", out SaveObject standardeconomymoduleNestedObj))
                        model.StandardEconomyModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardEconomyModule.Bind(standardeconomymoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_leader_module", out SaveObject standardleadermoduleNestedObj))
                        model.StandardLeaderModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardLeaderModule.Bind(standardleadermoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_diplomacy_module", out SaveObject standarddiplomacymoduleNestedObj))
                        model.StandardDiplomacyModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardDiplomacyModule.Bind(standarddiplomacymoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_technology_module", out SaveObject standardtechnologymoduleNestedObj))
                        model.StandardTechnologyModule = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(standardtechnologymoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_pop_factions_module", out SaveObject standardpopfactionsmoduleNestedObj))
                        model.StandardPopFactionsModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.Bind(standardpopfactionsmoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_expansion_module", out SaveObject standardexpansionmoduleNestedObj))
                        model.StandardExpansionModule = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(standardexpansionmoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_species_rights_module", out SaveObject standardspeciesrightsmoduleNestedObj))
                        model.StandardSpeciesRightsModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardSpeciesRightsModule.Bind(standardspeciesrightsmoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_trade_routes_module", out SaveObject standardtraderoutesmoduleNestedObj))
                        model.StandardTradeRoutesModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardTradeRoutesModule.Bind(standardtraderoutesmoduleNestedObj);

                    if (obj.TryGetSaveObject("standard_grand_archive_module", out SaveObject standardgrandarchivemoduleNestedObj))
                        model.StandardGrandArchiveModule = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardGrandArchiveModule.Bind(standardgrandarchivemoduleNestedObj);


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemRelationsManager
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemRelationsManagerRelation
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateCountryItemRelationsManagerRelationModifier
                    {
                        /// <summary>Property for 'modifier'</summary>
                        public string? Modifier { get; set; }

                        /// <summary>Property for 'start_date'</summary>
                        public DateTime? StartDate { get; set; }

                        /// <summary>Property for 'value'</summary>
                        public float? Value { get; set; }

                        /// <summary>Property for 'decay'</summary>
                        public bool? Decay { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateCountryItemRelationsManagerRelationModifier? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateCountryItemRelationsManagerRelationModifier model = new GamestateCountryItemRelationsManagerRelationModifier();
                            model.SourceObject = obj;

                            model.Modifier = obj.TryGetString("modifier", out string modifierStringValue) && modifierStringValue != "none" ? modifierStringValue : null;

                            if (obj.TryGetDateTime("start_date", out DateTime startdateValue) && startdateValue != null)
                                model.StartDate = startdateValue;

                            if (obj.TryGetFloat("value", out float valueValue) && valueValue != null)
                                model.Value = valueValue;

                            if (obj.TryGetBool("decay", out bool decayValue) && decayValue != null)
                                model.Decay = decayValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'owner'</summary>
                    public int? Owner { get; set; }

                    /// <summary>Property for 'country'</summary>
                    public int? Country { get; set; }

                    /// <summary>Property for 'contact'</summary>
                    public bool? Contact { get; set; }

                    /// <summary>Property for 'hostile'</summary>
                    public bool? Hostile { get; set; }

                    /// <summary>Property for 'borders'</summary>
                    public bool? Borders { get; set; }

                    /// <summary>Property for 'border_range'</summary>
                    public int? BorderRange { get; set; }

                    /// <summary>Property for 'modifier'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemRelationsManager.GamestateCountryItemRelationsManagerRelation.GamestateCountryItemRelationsManagerRelationModifier? Modifier { get; set; }

                    /// <summary>Property for 'communications'</summary>
                    public bool? Communications { get; set; }

                    /// <summary>Property for 'foreign_envoys'</summary>
                    public List<int?>? ForeignEnvoys { get; set; }

                    /// <summary>Property for 'relation_current'</summary>
                    public int? RelationCurrent { get; set; }

                    /// <summary>Property for 'relation_last_month'</summary>
                    public int? RelationLastMonth { get; set; }

                    /// <summary>Property for 'envoy_opinion_positive'</summary>
                    public float? EnvoyOpinionPositive { get; set; }

                    /// <summary>Property for 'envoy_opinion_negative'</summary>
                    public int? EnvoyOpinionNegative { get; set; }

                    /// <summary>Property for 'diplo_action_dates'</summary>
                    public List<string>? DiploActionDates { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemRelationsManagerRelation? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemRelationsManagerRelation model = new GamestateCountryItemRelationsManagerRelation();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                            model.Owner = ownerValue;

                        if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                            model.Country = countryValue;

                        if (obj.TryGetBool("contact", out bool contactValue) && contactValue != null)
                            model.Contact = contactValue;

                        if (obj.TryGetBool("hostile", out bool hostileValue) && hostileValue != null)
                            model.Hostile = hostileValue;

                        if (obj.TryGetBool("borders", out bool bordersValue) && bordersValue != null)
                            model.Borders = bordersValue;

                        if (obj.TryGetInt("border_range", out int borderrangeValue) && borderrangeValue != null)
                            model.BorderRange = borderrangeValue;

                        if (obj.TryGetSaveObject("modifier", out SaveObject modifierNestedObj))
                            model.Modifier = Gamestate.GamestateCountryItem.GamestateCountryItemRelationsManager.GamestateCountryItemRelationsManagerRelation.GamestateCountryItemRelationsManagerRelationModifier.Bind(modifierNestedObj);

                        if (obj.TryGetBool("communications", out bool communicationsValue) && communicationsValue != null)
                            model.Communications = communicationsValue;

                        // TODO: Bind complex type: ForeignEnvoys (List<int?>)
                        if (obj.TryGetSaveArray("foreign_envoys", out SaveArray foreignenvoysArray) && foreignenvoysArray != null)
                            model.ForeignEnvoys = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (foreignenvoysArray != null)
                {
                    foreach (var item in foreignenvoysArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.ForeignEnvoys.Add(scalarValue.Value);
                        }
                    }
                }

                        if (obj.TryGetInt("relation_current", out int relationcurrentValue) && relationcurrentValue != null)
                            model.RelationCurrent = relationcurrentValue;

                        if (obj.TryGetInt("relation_last_month", out int relationlastmonthValue) && relationlastmonthValue != null)
                            model.RelationLastMonth = relationlastmonthValue;

                        if (obj.TryGetFloat("envoy_opinion_positive", out float envoyopinionpositiveValue) && envoyopinionpositiveValue != null)
                            model.EnvoyOpinionPositive = envoyopinionpositiveValue;

                        if (obj.TryGetInt("envoy_opinion_negative", out int envoyopinionnegativeValue) && envoyopinionnegativeValue != null)
                            model.EnvoyOpinionNegative = envoyopinionnegativeValue;

                        // TODO: Bind complex type: DiploActionDates (List<string>)
                        if (obj.TryGetSaveArray("diplo_action_dates", out SaveArray diploactiondatesArray) && diploactiondatesArray != null)
                            model.DiploActionDates = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (diploactiondatesArray != null)
                {
                    foreach (var item in diploactiondatesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.DiploActionDates.Add(scalarValue.Value);
                        }
                    }
                }


                        return model;
                    }
                }
                /// <summary>Property for 'relation'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemRelationsManager.GamestateCountryItemRelationsManagerRelation? Relation { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemRelationsManager? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemRelationsManager model = new GamestateCountryItemRelationsManager();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("relation", out SaveObject relationNestedObj))
                        model.Relation = Gamestate.GamestateCountryItem.GamestateCountryItemRelationsManager.GamestateCountryItemRelationsManagerRelation.Bind(relationNestedObj);


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemEspionageManager
            {
                /// <summary>Property for 'spy_networks'</summary>
                public List<int?>? SpyNetworks { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemEspionageManager? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemEspionageManager model = new GamestateCountryItemEspionageManager();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: SpyNetworks (List<int?>)
                    if (obj.TryGetSaveArray("spy_networks", out SaveArray spynetworksArray) && spynetworksArray != null)
                        model.SpyNetworks = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (spynetworksArray != null)
                {
                    foreach (var item in spynetworksArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.SpyNetworks.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemIntelManager
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemIntelManagerIntelItem
                {
                    /// <summary>Property for 'intel'</summary>
                    public float? Intel { get; set; }

                    /// <summary>Property for 'stale_intel'</summary>
                    public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? StaleIntel { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemIntelManagerIntelItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemIntelManagerIntelItem model = new GamestateCountryItemIntelManagerIntelItem();
                        model.SourceObject = obj;

                        if (obj.TryGetFloat("intel", out float intelValue) && intelValue != null)
                            model.Intel = intelValue;

                        if (obj.TryGetSaveObject("stale_intel", out SaveObject staleintelNestedObj))
                            model.StaleIntel = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(staleintelNestedObj);


                        return model;
                    }
                }
                /// <summary>Property for 'intel'</summary>
                public Dictionary<int, Gamestate.GamestateCountryItem.GamestateCountryItemIntelManager.GamestateCountryItemIntelManagerIntelItem?>? Intel { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemIntelManager? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemIntelManager model = new GamestateCountryItemIntelManager();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: Intel (Dictionary<int, Gamestate.GamestateCountryItem.GamestateCountryItemIntelManager.GamestateCountryItemIntelManagerIntelItem?>)
                    if (obj.TryGetSaveObject("intel", out SaveObject intelDictObj) && intelDictObj != null)
                        model.Intel = new Dictionary<int, Gamestate.GamestateCountryItem.GamestateCountryItemIntelManager.GamestateCountryItemIntelManagerIntelItem?>(); // Initialize empty dictionary


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemFleetsManager
            {
                /// <summary>
                /// </summary>
                public class GamestateCountryItemFleetsManagerOwnedFleetsItem
                {
                    /// <summary>Property for 'fleet'</summary>
                    public int? Fleet { get; set; }

                    /// <summary>Property for 'ownership_status'</summary>
                    public string? OwnershipStatus { get; set; }

                    /// <summary>Property for 'lease_period'</summary>
                    public int? LeasePeriod { get; set; }

                    /// <summary>Property for 'debtor'</summary>
                    public long? Debtor { get; set; }

                    /// <summary>Property for 'previous_owner'</summary>
                    public long? PreviousOwner { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateCountryItemFleetsManagerOwnedFleetsItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateCountryItemFleetsManagerOwnedFleetsItem model = new GamestateCountryItemFleetsManagerOwnedFleetsItem();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("fleet", out int fleetValue) && fleetValue != null)
                            model.Fleet = fleetValue;

                        model.OwnershipStatus = obj.TryGetString("ownership_status", out string ownershipstatusStringValue) && ownershipstatusStringValue != "none" ? ownershipstatusStringValue : null;

                        if (obj.TryGetInt("lease_period", out int leaseperiodValue) && leaseperiodValue != null)
                            model.LeasePeriod = leaseperiodValue;

                        if (obj.TryGetLong("debtor", out long debtorValue) && debtorValue != null)
                            model.Debtor = debtorValue;

                        if (obj.TryGetLong("previous_owner", out long previousownerValue) && previousownerValue != null)
                            model.PreviousOwner = previousownerValue;


                        return model;
                    }
                }
                /// <summary>Property for 'owned_fleets'</summary>
                public List<Gamestate.GamestateCountryItem.GamestateCountryItemFleetsManager.GamestateCountryItemFleetsManagerOwnedFleetsItem?>? OwnedFleets { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemFleetsManager? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemFleetsManager model = new GamestateCountryItemFleetsManager();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: OwnedFleets (List<Gamestate.GamestateCountryItem.GamestateCountryItemFleetsManager.GamestateCountryItemFleetsManagerOwnedFleetsItem?>)
                    if (obj.TryGetSaveArray("owned_fleets", out SaveArray ownedfleetsArray) && ownedfleetsArray != null)
                        model.OwnedFleets = new List<Gamestate.GamestateCountryItem.GamestateCountryItemFleetsManager.GamestateCountryItemFleetsManagerOwnedFleetsItem?>(); // Initialize empty list


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemSectors
            {
                /// <summary>Property for 'owned'</summary>
                public List<int?>? Owned { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemSectors? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemSectors model = new GamestateCountryItemSectors();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: Owned (List<int?>)
                    if (obj.TryGetSaveArray("owned", out SaveArray ownedArray) && ownedArray != null)
                        model.Owned = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (ownedArray != null)
                {
                    foreach (var item in ownedArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Owned.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemFirstContact
            {
                /// <summary>Property for 'contacts'</summary>
                public List<int?>? Contacts { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemFirstContact? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemFirstContact model = new GamestateCountryItemFirstContact();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: Contacts (List<int?>)
                    if (obj.TryGetSaveArray("contacts", out SaveArray contactsArray) && contactsArray != null)
                        model.Contacts = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (contactsArray != null)
                {
                    foreach (var item in contactsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Contacts.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemAstralActionsUsageStatesArrayItem
            {
                /// <summary>Property for 'unlockable'</summary>
                public bool? Unlockable { get; set; }

                /// <summary>Property for 'unlocked'</summary>
                public bool? Unlocked { get; set; }

                /// <summary>Property for 'usages'</summary>
                public int? Usages { get; set; }

                /// <summary>Property for 'next_usable_date'</summary>
                public string? NextUsableDate { get; set; }

                /// <summary>Property for 'is_waiting_for_cooldown_to_start'</summary>
                public bool? IsWaitingForCooldownToStart { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemAstralActionsUsageStatesArrayItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemAstralActionsUsageStatesArrayItem model = new GamestateCountryItemAstralActionsUsageStatesArrayItem();
                    model.SourceObject = obj;

                    if (obj.TryGetBool("unlockable", out bool unlockableValue) && unlockableValue != null)
                        model.Unlockable = unlockableValue;

                    if (obj.TryGetBool("unlocked", out bool unlockedValue) && unlockedValue != null)
                        model.Unlocked = unlockedValue;

                    if (obj.TryGetInt("usages", out int usagesValue) && usagesValue != null)
                        model.Usages = usagesValue;

                    model.NextUsableDate = obj.TryGetString("next_usable_date", out string nextusabledateStringValue) && nextusabledateStringValue != "none" ? nextusabledateStringValue : null;

                    if (obj.TryGetBool("is_waiting_for_cooldown_to_start", out bool iswaitingforcooldowntostartValue) && iswaitingforcooldowntostartValue != null)
                        model.IsWaitingForCooldownToStart = iswaitingforcooldowntostartValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateCountryItemFogMachine
            {
                /// <summary>Property for 'auto_tracking'</summary>
                public bool? AutoTracking { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCountryItemFogMachine? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCountryItemFogMachine model = new GamestateCountryItemFogMachine();
                    model.SourceObject = obj;

                    if (obj.TryGetBool("auto_tracking", out bool autotrackingValue) && autotrackingValue != null)
                        model.AutoTracking = autotrackingValue;


                    return model;
                }
            }
            /// <summary>Property for 'flag'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFlag? Flag { get; set; }

            /// <summary>Property for 'color_index'</summary>
            public int? ColorIndex { get; set; }

            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

            /// <summary>Property for 'adjective'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Adjective { get; set; }

            /// <summary>Property for 'custom_name'</summary>
            public bool? CustomName { get; set; }

            /// <summary>Property for 'tech_status'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus? TechStatus { get; set; }

            /// <summary>Property for 'last_date_was_human'</summary>
            public DateTime? LastDateWasHuman { get; set; }

            /// <summary>Property for 'last_date_war_lost'</summary>
            public string? LastDateWarLost { get; set; }

            /// <summary>Property for 'last_date_at_war'</summary>
            public DateTime? LastDateAtWar { get; set; }

            /// <summary>Property for 'budget'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemBudget? Budget { get; set; }

            /// <summary>Property for 'events'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents? Events { get; set; }

            /// <summary>Property for 'track_all_situations'</summary>
            public bool? TrackAllSituations { get; set; }

            /// <summary>Property for 'terra_incognita'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemTerraIncognita? TerraIncognita { get; set; }

            /// <summary>Property for 'military_power'</summary>
            public float? MilitaryPower { get; set; }

            /// <summary>Property for 'economy_power'</summary>
            public float? EconomyPower { get; set; }

            /// <summary>Property for 'victory_rank'</summary>
            public int? VictoryRank { get; set; }

            /// <summary>Property for 'victory_score'</summary>
            public float? VictoryScore { get; set; }

            /// <summary>Property for 'tech_power'</summary>
            public float? TechPower { get; set; }

            /// <summary>Property for 'immigration'</summary>
            public float? Immigration { get; set; }

            /// <summary>Property for 'emigration'</summary>
            public int? Emigration { get; set; }

            /// <summary>Property for 'fleet_size'</summary>
            public int? FleetSize { get; set; }

            /// <summary>Property for 'used_naval_capacity'</summary>
            public int? UsedNavalCapacity { get; set; }

            /// <summary>Property for 'empire_size'</summary>
            public int? EmpireSize { get; set; }

            /// <summary>Property for 'new_colonies'</summary>
            public int? NewColonies { get; set; }

            /// <summary>Property for 'sapient'</summary>
            public int? Sapient { get; set; }

            /// <summary>Property for 'graphical_culture'</summary>
            public string? GraphicalCulture { get; set; }

            /// <summary>Property for 'city_graphical_culture'</summary>
            public string? CityGraphicalCulture { get; set; }

            /// <summary>Property for 'room'</summary>
            public string? Room { get; set; }

            /// <summary>Property for 'ai'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemAi? Ai { get; set; }

            /// <summary>Property for 'capital'</summary>
            public int? Capital { get; set; }

            /// <summary>Property for 'founder_species_ref'</summary>
            public int? FounderSpeciesRef { get; set; }

            /// <summary>Property for 'ethos'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemEthos? Ethos { get; set; }

            /// <summary>Property for 'fleet_template_manager'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFleetTemplateManager? FleetTemplateManager { get; set; }

            /// <summary>Property for 'government'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemGovernment? Government { get; set; }

            /// <summary>Property for 'personality'</summary>
            public string? Personality { get; set; }

            /// <summary>Property for 'next_election'</summary>
            public DateTime? NextElection { get; set; }

            /// <summary>Property for 'government_date'</summary>
            public DateTime? GovernmentDate { get; set; }

            /// <summary>Property for 'rejected_actions'</summary>
            public List<Gamestate.GamestateCountryItem.GamestateCountryItemRejectedActionsItem?>? RejectedActions { get; set; }

            /// <summary>Property for 'surveyed_deposit_holders'</summary>
            public List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate?>? SurveyedDepositHolders { get; set; }

            /// <summary>Property for 'homeworld_name'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? HomeworldName { get; set; }

            /// <summary>Property for 'visited_objects'</summary>
            public List<int?>? VisitedObjects { get; set; }

            /// <summary>Property for 'intel_level'</summary>
            public List<int?>? IntelLevel { get; set; }

            /// <summary>Property for 'highest_intel_level'</summary>
            public List<int?>? HighestIntelLevel { get; set; }

            /// <summary>Property for 'intel'</summary>
            public List<Gamestate.GamestateCountryItem.GamestateCountryItemIntelItem?>? Intel { get; set; }

            /// <summary>Property for 'default_planet_automation_settings'</summary>
            public List<string>? DefaultPlanetAutomationSettings { get; set; }

            /// <summary>Property for 'timed_modifier'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemTimedModifier? TimedModifier { get; set; }

            /// <summary>Property for 'flags'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFlags? Flags { get; set; }

            /// <summary>Property for 'variables'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemVariables? Variables { get; set; }

            /// <summary>Property for 'sensor_range_fleets'</summary>
            public List<int?>? SensorRangeFleets { get; set; }

            /// <summary>Property for 'space_critter'</summary>
            public List<int?>? SpaceCritter { get; set; }

            /// <summary>Property for 'faction'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFaction? Faction { get; set; }

            /// <summary>Property for 'name_list'</summary>
            public string? NameList { get; set; }

            /// <summary>Property for 'ship_names'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemShipNames? ShipNames { get; set; }

            /// <summary>Property for 'ruler'</summary>
            public int? Ruler { get; set; }

            /// <summary>Property for 'control_groups'</summary>
            public Dictionary<int, List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate?>>? ControlGroups { get; set; }

            /// <summary>Property for 'ship_prefix'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? ShipPrefix { get; set; }

            /// <summary>Property for 'active_policies'</summary>
            public List<Gamestate.GamestateCountryItem.GamestateCountryItemActivePoliciesItem?>? ActivePolicies { get; set; }

            /// <summary>Property for 'policy_flags'</summary>
            public List<string>? PolicyFlags { get; set; }

            /// <summary>Property for 'starting_system'</summary>
            public int? StartingSystem { get; set; }

            /// <summary>Property for 'has_advisor'</summary>
            public bool? HasAdvisor { get; set; }

            /// <summary>Property for 'shown_message_types'</summary>
            public List<string>? ShownMessageTypes { get; set; }

            /// <summary>Property for 'owned_leaders'</summary>
            public List<int?>? OwnedLeaders { get; set; }

            /// <summary>Property for 'tradition_categories'</summary>
            public List<string>? TraditionCategories { get; set; }

            /// <summary>Property for 'traditions'</summary>
            public List<string>? Traditions { get; set; }

            /// <summary>Property for 'ascension_perks'</summary>
            public List<string>? AscensionPerks { get; set; }

            /// <summary>Property for 'owned_armies'</summary>
            public List<int?>? OwnedArmies { get; set; }

            /// <summary>Property for 'owned_planets'</summary>
            public List<int?>? OwnedPlanets { get; set; }

            /// <summary>Property for 'controlled_planets'</summary>
            public List<int?>? ControlledPlanets { get; set; }

            /// <summary>Property for 'ship_design_collection'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemShipDesignCollection? ShipDesignCollection { get; set; }

            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'modules'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemModules? Modules { get; set; }

            /// <summary>Property for 'initialized'</summary>
            public bool? Initialized { get; set; }

            /// <summary>Property for 'relations_manager'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemRelationsManager? RelationsManager { get; set; }

            /// <summary>Property for 'autopick_leader_traits'</summary>
            public bool? AutopickLeaderTraits { get; set; }

            /// <summary>Property for 'espionage_manager'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemEspionageManager? EspionageManager { get; set; }

            /// <summary>Property for 'intel_manager'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemIntelManager? IntelManager { get; set; }

            /// <summary>Property for 'fleets_manager'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFleetsManager? FleetsManager { get; set; }

            /// <summary>Property for 'customization'</summary>
            public string? Customization { get; set; }

            /// <summary>Property for 'is_in_breach_of_any'</summary>
            public bool? IsInBreachOfAny { get; set; }

            /// <summary>Property for 'awareness'</summary>
            public int? Awareness { get; set; }

            /// <summary>Property for 'old_awareness'</summary>
            public int? OldAwareness { get; set; }

            /// <summary>Property for 'last_changed_country_type'</summary>
            public DateTime? LastChangedCountryType { get; set; }

            /// <summary>Property for 'seen_bypass_types'</summary>
            public List<string>? SeenBypassTypes { get; set; }

            /// <summary>Property for 'hyperlane_systems'</summary>
            public List<int?>? HyperlaneSystems { get; set; }

            /// <summary>Property for 'sectors'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemSectors? Sectors { get; set; }

            /// <summary>Property for 'given_value'</summary>
            public float? GivenValue { get; set; }

            /// <summary>Property for 'num_upgraded_starbase'</summary>
            public int? NumUpgradedStarbase { get; set; }

            /// <summary>Property for 'starbase_capacity'</summary>
            public int? StarbaseCapacity { get; set; }

            /// <summary>Property for 'employable_pops'</summary>
            public int? EmployablePops { get; set; }

            /// <summary>Property for 'owned_species_refs'</summary>
            public List<int?>? OwnedSpeciesRefs { get; set; }

            /// <summary>Property for 'first_contact'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFirstContact? FirstContact { get; set; }

            /// <summary>Property for 'astral_actions_usage_states_array'</summary>
            public Dictionary<string, Gamestate.GamestateCountryItem.GamestateCountryItemAstralActionsUsageStatesArrayItem?>? AstralActionsUsageStatesArray { get; set; }

            /// <summary>Property for 'fog_machine'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFogMachine? FogMachine { get; set; }

            /// <summary>Property for 'num_cosmic_storms_encountered'</summary>
            public int? NumCosmicStormsEncountered { get; set; }

            /// <summary>Property for 'cosmic_storm_types_seen'</summary>
            public List<string>? CosmicStormTypesSeen { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateCountryItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateCountryItem model = new GamestateCountryItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("flag", out SaveObject flagNestedObj))
                    model.Flag = Gamestate.GamestateCountryItem.GamestateCountryItemFlag.Bind(flagNestedObj);

                if (obj.TryGetInt("color_index", out int colorindexValue) && colorindexValue != null)
                    model.ColorIndex = colorindexValue;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                if (obj.TryGetSaveObject("adjective", out SaveObject adjectiveNestedObj))
                    model.Adjective = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(adjectiveNestedObj);

                if (obj.TryGetBool("custom_name", out bool customnameValue) && customnameValue != null)
                    model.CustomName = customnameValue;

                if (obj.TryGetSaveObject("tech_status", out SaveObject techstatusNestedObj))
                    model.TechStatus = Gamestate.GamestateCountryItem.GamestateCountryItemTechStatus.Bind(techstatusNestedObj);

                if (obj.TryGetDateTime("last_date_was_human", out DateTime lastdatewashumanValue) && lastdatewashumanValue != null)
                    model.LastDateWasHuman = lastdatewashumanValue;

                model.LastDateWarLost = obj.TryGetString("last_date_war_lost", out string lastdatewarlostStringValue) && lastdatewarlostStringValue != "none" ? lastdatewarlostStringValue : null;

                if (obj.TryGetDateTime("last_date_at_war", out DateTime lastdateatwarValue) && lastdateatwarValue != null)
                    model.LastDateAtWar = lastdateatwarValue;

                if (obj.TryGetSaveObject("budget", out SaveObject budgetNestedObj))
                    model.Budget = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.Bind(budgetNestedObj);

                if (obj.TryGetSaveObject("events", out SaveObject eventsNestedObj))
                    model.Events = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.Bind(eventsNestedObj);

                if (obj.TryGetBool("track_all_situations", out bool trackallsituationsValue) && trackallsituationsValue != null)
                    model.TrackAllSituations = trackallsituationsValue;

                if (obj.TryGetSaveObject("terra_incognita", out SaveObject terraincognitaNestedObj))
                    model.TerraIncognita = Gamestate.GamestateCountryItem.GamestateCountryItemTerraIncognita.Bind(terraincognitaNestedObj);

                if (obj.TryGetFloat("military_power", out float militarypowerValue) && militarypowerValue != null)
                    model.MilitaryPower = militarypowerValue;

                if (obj.TryGetFloat("economy_power", out float economypowerValue) && economypowerValue != null)
                    model.EconomyPower = economypowerValue;

                if (obj.TryGetInt("victory_rank", out int victoryrankValue) && victoryrankValue != null)
                    model.VictoryRank = victoryrankValue;

                if (obj.TryGetFloat("victory_score", out float victoryscoreValue) && victoryscoreValue != null)
                    model.VictoryScore = victoryscoreValue;

                if (obj.TryGetFloat("tech_power", out float techpowerValue) && techpowerValue != null)
                    model.TechPower = techpowerValue;

                if (obj.TryGetFloat("immigration", out float immigrationValue) && immigrationValue != null)
                    model.Immigration = immigrationValue;

                if (obj.TryGetInt("emigration", out int emigrationValue) && emigrationValue != null)
                    model.Emigration = emigrationValue;

                if (obj.TryGetInt("fleet_size", out int fleetsizeValue) && fleetsizeValue != null)
                    model.FleetSize = fleetsizeValue;

                if (obj.TryGetInt("used_naval_capacity", out int usednavalcapacityValue) && usednavalcapacityValue != null)
                    model.UsedNavalCapacity = usednavalcapacityValue;

                if (obj.TryGetInt("empire_size", out int empiresizeValue) && empiresizeValue != null)
                    model.EmpireSize = empiresizeValue;

                if (obj.TryGetInt("new_colonies", out int newcoloniesValue) && newcoloniesValue != null)
                    model.NewColonies = newcoloniesValue;

                if (obj.TryGetInt("sapient", out int sapientValue) && sapientValue != null)
                    model.Sapient = sapientValue;

                model.GraphicalCulture = obj.TryGetString("graphical_culture", out string graphicalcultureStringValue) && graphicalcultureStringValue != "none" ? graphicalcultureStringValue : null;

                model.CityGraphicalCulture = obj.TryGetString("city_graphical_culture", out string citygraphicalcultureStringValue) && citygraphicalcultureStringValue != "none" ? citygraphicalcultureStringValue : null;

                model.Room = obj.TryGetString("room", out string roomStringValue) && roomStringValue != "none" ? roomStringValue : null;

                if (obj.TryGetSaveObject("ai", out SaveObject aiNestedObj))
                    model.Ai = Gamestate.GamestateCountryItem.GamestateCountryItemAi.Bind(aiNestedObj);

                if (obj.TryGetInt("capital", out int capitalValue) && capitalValue != null)
                    model.Capital = capitalValue;

                if (obj.TryGetInt("founder_species_ref", out int founderspeciesrefValue) && founderspeciesrefValue != null)
                    model.FounderSpeciesRef = founderspeciesrefValue;

                if (obj.TryGetSaveObject("ethos", out SaveObject ethosNestedObj))
                    model.Ethos = Gamestate.GamestateCountryItem.GamestateCountryItemEthos.Bind(ethosNestedObj);

                if (obj.TryGetSaveObject("fleet_template_manager", out SaveObject fleettemplatemanagerNestedObj))
                    model.FleetTemplateManager = Gamestate.GamestateCountryItem.GamestateCountryItemFleetTemplateManager.Bind(fleettemplatemanagerNestedObj);

                if (obj.TryGetSaveObject("government", out SaveObject governmentNestedObj))
                    model.Government = Gamestate.GamestateCountryItem.GamestateCountryItemGovernment.Bind(governmentNestedObj);

                model.Personality = obj.TryGetString("personality", out string personalityStringValue) && personalityStringValue != "none" ? personalityStringValue : null;

                if (obj.TryGetDateTime("next_election", out DateTime nextelectionValue) && nextelectionValue != null)
                    model.NextElection = nextelectionValue;

                if (obj.TryGetDateTime("government_date", out DateTime governmentdateValue) && governmentdateValue != null)
                    model.GovernmentDate = governmentdateValue;

                // TODO: Bind complex type: RejectedActions (List<Gamestate.GamestateCountryItem.GamestateCountryItemRejectedActionsItem?>)
                if (obj.TryGetSaveArray("rejected_actions", out SaveArray rejectedactionsArray) && rejectedactionsArray != null)
                    model.RejectedActions = new List<Gamestate.GamestateCountryItem.GamestateCountryItemRejectedActionsItem?>(); // Initialize empty list

                // TODO: Bind complex type: SurveyedDepositHolders (List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate?>)
                if (obj.TryGetSaveArray("surveyed_deposit_holders", out SaveArray surveyeddepositholdersArray) && surveyeddepositholdersArray != null)
                    model.SurveyedDepositHolders = new List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate?>(); // Initialize empty list

                if (obj.TryGetSaveObject("homeworld_name", out SaveObject homeworldnameNestedObj))
                    model.HomeworldName = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(homeworldnameNestedObj);

                // TODO: Bind complex type: VisitedObjects (List<int?>)
                if (obj.TryGetSaveArray("visited_objects", out SaveArray visitedobjectsArray) && visitedobjectsArray != null)
                    model.VisitedObjects = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (visitedobjectsArray != null)
                {
                    foreach (var item in visitedobjectsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.VisitedObjects.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: IntelLevel (List<int?>)
                if (obj.TryGetSaveArray("intel_level", out SaveArray intellevelArray) && intellevelArray != null)
                    model.IntelLevel = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (intellevelArray != null)
                {
                    foreach (var item in intellevelArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.IntelLevel.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: HighestIntelLevel (List<int?>)
                if (obj.TryGetSaveArray("highest_intel_level", out SaveArray highestintellevelArray) && highestintellevelArray != null)
                    model.HighestIntelLevel = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (highestintellevelArray != null)
                {
                    foreach (var item in highestintellevelArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.HighestIntelLevel.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: Intel (List<Gamestate.GamestateCountryItem.GamestateCountryItemIntelItem?>)
                if (obj.TryGetSaveArray("intel", out SaveArray intelArray) && intelArray != null)
                    model.Intel = new List<Gamestate.GamestateCountryItem.GamestateCountryItemIntelItem?>(); // Initialize empty list

                // TODO: Bind complex type: DefaultPlanetAutomationSettings (List<string>)
                if (obj.TryGetSaveArray("default_planet_automation_settings", out SaveArray defaultplanetautomationsettingsArray) && defaultplanetautomationsettingsArray != null)
                    model.DefaultPlanetAutomationSettings = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (defaultplanetautomationsettingsArray != null)
                {
                    foreach (var item in defaultplanetautomationsettingsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.DefaultPlanetAutomationSettings.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("timed_modifier", out SaveObject timedmodifierNestedObj))
                    model.TimedModifier = Gamestate.GamestateCountryItem.GamestateCountryItemTimedModifier.Bind(timedmodifierNestedObj);

                if (obj.TryGetSaveObject("flags", out SaveObject flagsNestedObj))
                    model.Flags = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.Bind(flagsNestedObj);

                if (obj.TryGetSaveObject("variables", out SaveObject variablesNestedObj))
                    model.Variables = Gamestate.GamestateCountryItem.GamestateCountryItemVariables.Bind(variablesNestedObj);

                // TODO: Bind complex type: SensorRangeFleets (List<int?>)
                if (obj.TryGetSaveArray("sensor_range_fleets", out SaveArray sensorrangefleetsArray) && sensorrangefleetsArray != null)
                    model.SensorRangeFleets = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (sensorrangefleetsArray != null)
                {
                    foreach (var item in sensorrangefleetsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.SensorRangeFleets.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: SpaceCritter (List<int?>)
                if (obj.TryGetSaveArray("space_critter", out SaveArray spacecritterArray) && spacecritterArray != null)
                    model.SpaceCritter = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (spacecritterArray != null)
                {
                    foreach (var item in spacecritterArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.SpaceCritter.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("faction", out SaveObject factionNestedObj))
                    model.Faction = Gamestate.GamestateCountryItem.GamestateCountryItemFaction.Bind(factionNestedObj);

                model.NameList = obj.TryGetString("name_list", out string namelistStringValue) && namelistStringValue != "none" ? namelistStringValue : null;

                if (obj.TryGetSaveObject("ship_names", out SaveObject shipnamesNestedObj))
                    model.ShipNames = Gamestate.GamestateCountryItem.GamestateCountryItemShipNames.Bind(shipnamesNestedObj);

                if (obj.TryGetInt("ruler", out int rulerValue) && rulerValue != null)
                    model.Ruler = rulerValue;

                // TODO: Bind complex type: ControlGroups (Dictionary<int, List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate?>>)
                if (obj.TryGetSaveObject("control_groups", out SaveObject controlgroupsDictObj) && controlgroupsDictObj != null)
                    model.ControlGroups = new Dictionary<int, List<Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate?>>(); // Initialize empty dictionary

                if (obj.TryGetSaveObject("ship_prefix", out SaveObject shipprefixNestedObj))
                    model.ShipPrefix = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(shipprefixNestedObj);

                // TODO: Bind complex type: ActivePolicies (List<Gamestate.GamestateCountryItem.GamestateCountryItemActivePoliciesItem?>)
                if (obj.TryGetSaveArray("active_policies", out SaveArray activepoliciesArray) && activepoliciesArray != null)
                    model.ActivePolicies = new List<Gamestate.GamestateCountryItem.GamestateCountryItemActivePoliciesItem?>(); // Initialize empty list

                // TODO: Bind complex type: PolicyFlags (List<string>)
                if (obj.TryGetSaveArray("policy_flags", out SaveArray policyflagsArray) && policyflagsArray != null)
                    model.PolicyFlags = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (policyflagsArray != null)
                {
                    foreach (var item in policyflagsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.PolicyFlags.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetInt("starting_system", out int startingsystemValue) && startingsystemValue != null)
                    model.StartingSystem = startingsystemValue;

                if (obj.TryGetBool("has_advisor", out bool hasadvisorValue) && hasadvisorValue != null)
                    model.HasAdvisor = hasadvisorValue;

                // TODO: Bind complex type: ShownMessageTypes (List<string>)
                if (obj.TryGetSaveArray("shown_message_types", out SaveArray shownmessagetypesArray) && shownmessagetypesArray != null)
                    model.ShownMessageTypes = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (shownmessagetypesArray != null)
                {
                    foreach (var item in shownmessagetypesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.ShownMessageTypes.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: OwnedLeaders (List<int?>)
                if (obj.TryGetSaveArray("owned_leaders", out SaveArray ownedleadersArray) && ownedleadersArray != null)
                    model.OwnedLeaders = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (ownedleadersArray != null)
                {
                    foreach (var item in ownedleadersArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.OwnedLeaders.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: TraditionCategories (List<string>)
                if (obj.TryGetSaveArray("tradition_categories", out SaveArray traditioncategoriesArray) && traditioncategoriesArray != null)
                    model.TraditionCategories = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (traditioncategoriesArray != null)
                {
                    foreach (var item in traditioncategoriesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.TraditionCategories.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: Traditions (List<string>)
                if (obj.TryGetSaveArray("traditions", out SaveArray traditionsArray) && traditionsArray != null)
                    model.Traditions = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (traditionsArray != null)
                {
                    foreach (var item in traditionsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.Traditions.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: AscensionPerks (List<string>)
                if (obj.TryGetSaveArray("ascension_perks", out SaveArray ascensionperksArray) && ascensionperksArray != null)
                    model.AscensionPerks = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (ascensionperksArray != null)
                {
                    foreach (var item in ascensionperksArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.AscensionPerks.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: OwnedArmies (List<int?>)
                if (obj.TryGetSaveArray("owned_armies", out SaveArray ownedarmiesArray) && ownedarmiesArray != null)
                    model.OwnedArmies = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (ownedarmiesArray != null)
                {
                    foreach (var item in ownedarmiesArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.OwnedArmies.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: OwnedPlanets (List<int?>)
                if (obj.TryGetSaveArray("owned_planets", out SaveArray ownedplanetsArray) && ownedplanetsArray != null)
                    model.OwnedPlanets = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (ownedplanetsArray != null)
                {
                    foreach (var item in ownedplanetsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.OwnedPlanets.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: ControlledPlanets (List<int?>)
                if (obj.TryGetSaveArray("controlled_planets", out SaveArray controlledplanetsArray) && controlledplanetsArray != null)
                    model.ControlledPlanets = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (controlledplanetsArray != null)
                {
                    foreach (var item in controlledplanetsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.ControlledPlanets.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("ship_design_collection", out SaveObject shipdesigncollectionNestedObj))
                    model.ShipDesignCollection = Gamestate.GamestateCountryItem.GamestateCountryItemShipDesignCollection.Bind(shipdesigncollectionNestedObj);

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetSaveObject("modules", out SaveObject modulesNestedObj))
                    model.Modules = Gamestate.GamestateCountryItem.GamestateCountryItemModules.Bind(modulesNestedObj);

                if (obj.TryGetBool("initialized", out bool initializedValue) && initializedValue != null)
                    model.Initialized = initializedValue;

                if (obj.TryGetSaveObject("relations_manager", out SaveObject relationsmanagerNestedObj))
                    model.RelationsManager = Gamestate.GamestateCountryItem.GamestateCountryItemRelationsManager.Bind(relationsmanagerNestedObj);

                if (obj.TryGetBool("autopick_leader_traits", out bool autopickleadertraitsValue) && autopickleadertraitsValue != null)
                    model.AutopickLeaderTraits = autopickleadertraitsValue;

                if (obj.TryGetSaveObject("espionage_manager", out SaveObject espionagemanagerNestedObj))
                    model.EspionageManager = Gamestate.GamestateCountryItem.GamestateCountryItemEspionageManager.Bind(espionagemanagerNestedObj);

                if (obj.TryGetSaveObject("intel_manager", out SaveObject intelmanagerNestedObj))
                    model.IntelManager = Gamestate.GamestateCountryItem.GamestateCountryItemIntelManager.Bind(intelmanagerNestedObj);

                if (obj.TryGetSaveObject("fleets_manager", out SaveObject fleetsmanagerNestedObj))
                    model.FleetsManager = Gamestate.GamestateCountryItem.GamestateCountryItemFleetsManager.Bind(fleetsmanagerNestedObj);

                model.Customization = obj.TryGetString("customization", out string customizationStringValue) && customizationStringValue != "none" ? customizationStringValue : null;

                if (obj.TryGetBool("is_in_breach_of_any", out bool isinbreachofanyValue) && isinbreachofanyValue != null)
                    model.IsInBreachOfAny = isinbreachofanyValue;

                if (obj.TryGetInt("awareness", out int awarenessValue) && awarenessValue != null)
                    model.Awareness = awarenessValue;

                if (obj.TryGetInt("old_awareness", out int oldawarenessValue) && oldawarenessValue != null)
                    model.OldAwareness = oldawarenessValue;

                if (obj.TryGetDateTime("last_changed_country_type", out DateTime lastchangedcountrytypeValue) && lastchangedcountrytypeValue != null)
                    model.LastChangedCountryType = lastchangedcountrytypeValue;

                // TODO: Bind complex type: SeenBypassTypes (List<string>)
                if (obj.TryGetSaveArray("seen_bypass_types", out SaveArray seenbypasstypesArray) && seenbypasstypesArray != null)
                    model.SeenBypassTypes = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (seenbypasstypesArray != null)
                {
                    foreach (var item in seenbypasstypesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.SeenBypassTypes.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: HyperlaneSystems (List<int?>)
                if (obj.TryGetSaveArray("hyperlane_systems", out SaveArray hyperlanesystemsArray) && hyperlanesystemsArray != null)
                    model.HyperlaneSystems = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (hyperlanesystemsArray != null)
                {
                    foreach (var item in hyperlanesystemsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.HyperlaneSystems.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("sectors", out SaveObject sectorsNestedObj))
                    model.Sectors = Gamestate.GamestateCountryItem.GamestateCountryItemSectors.Bind(sectorsNestedObj);

                if (obj.TryGetFloat("given_value", out float givenvalueValue) && givenvalueValue != null)
                    model.GivenValue = givenvalueValue;

                if (obj.TryGetInt("num_upgraded_starbase", out int numupgradedstarbaseValue) && numupgradedstarbaseValue != null)
                    model.NumUpgradedStarbase = numupgradedstarbaseValue;

                if (obj.TryGetInt("starbase_capacity", out int starbasecapacityValue) && starbasecapacityValue != null)
                    model.StarbaseCapacity = starbasecapacityValue;

                if (obj.TryGetInt("employable_pops", out int employablepopsValue) && employablepopsValue != null)
                    model.EmployablePops = employablepopsValue;

                // TODO: Bind complex type: OwnedSpeciesRefs (List<int?>)
                if (obj.TryGetSaveArray("owned_species_refs", out SaveArray ownedspeciesrefsArray) && ownedspeciesrefsArray != null)
                    model.OwnedSpeciesRefs = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (ownedspeciesrefsArray != null)
                {
                    foreach (var item in ownedspeciesrefsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.OwnedSpeciesRefs.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("first_contact", out SaveObject firstcontactNestedObj))
                    model.FirstContact = Gamestate.GamestateCountryItem.GamestateCountryItemFirstContact.Bind(firstcontactNestedObj);

                // TODO: Bind complex type: AstralActionsUsageStatesArray (Dictionary<string, Gamestate.GamestateCountryItem.GamestateCountryItemAstralActionsUsageStatesArrayItem?>)
                if (obj.TryGetSaveObject("astral_actions_usage_states_array", out SaveObject astralactionsusagestatesarrayDictObj) && astralactionsusagestatesarrayDictObj != null)
                    model.AstralActionsUsageStatesArray = new Dictionary<string, Gamestate.GamestateCountryItem.GamestateCountryItemAstralActionsUsageStatesArrayItem?>(); // Initialize empty dictionary

                if (obj.TryGetSaveObject("fog_machine", out SaveObject fogmachineNestedObj))
                    model.FogMachine = Gamestate.GamestateCountryItem.GamestateCountryItemFogMachine.Bind(fogmachineNestedObj);

                if (obj.TryGetInt("num_cosmic_storms_encountered", out int numcosmicstormsencounteredValue) && numcosmicstormsencounteredValue != null)
                    model.NumCosmicStormsEncountered = numcosmicstormsencounteredValue;

                // TODO: Bind complex type: CosmicStormTypesSeen (List<string>)
                if (obj.TryGetSaveArray("cosmic_storm_types_seen", out SaveArray cosmicstormtypesseenArray) && cosmicstormtypesseenArray != null)
                    model.CosmicStormTypesSeen = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (cosmicstormtypesseenArray != null)
                {
                    foreach (var item in cosmicstormtypesseenArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.CosmicStormTypesSeen.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateConstruction
        {
            /// <summary>
            /// </summary>
            public class GamestateConstructionQueueMgr
            {
                /// <summary>
                /// </summary>
                public class GamestateConstructionQueueMgrQueuesItem
                {
                    /// <summary>Property for 'owner'</summary>
                    public int? Owner { get; set; }

                    /// <summary>Property for 'location'</summary>
                    public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate? Location { get; set; }

                    /// <summary>Property for 'simultaneous'</summary>
                    public int? Simultaneous { get; set; }

                    /// <summary>Property for 'type'</summary>
                    public string? AType { get; set; }

                    /// <summary>Property for 'disabled'</summary>
                    public bool? Disabled { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateConstructionQueueMgrQueuesItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateConstructionQueueMgrQueuesItem model = new GamestateConstructionQueueMgrQueuesItem();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                            model.Owner = ownerValue;

                        if (obj.TryGetSaveObject("location", out SaveObject locationNestedObj))
                            model.Location = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate.Bind(locationNestedObj);

                        if (obj.TryGetInt("simultaneous", out int simultaneousValue) && simultaneousValue != null)
                            model.Simultaneous = simultaneousValue;

                        model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                        if (obj.TryGetBool("disabled", out bool disabledValue) && disabledValue != null)
                            model.Disabled = disabledValue;


                        return model;
                    }
                }
                /// <summary>Property for 'queues'</summary>
                public Dictionary<int, Gamestate.GamestateConstruction.GamestateConstructionQueueMgr.GamestateConstructionQueueMgrQueuesItem?>? Queues { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateConstructionQueueMgr? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateConstructionQueueMgr model = new GamestateConstructionQueueMgr();
                    model.SourceObject = obj;

                    // TODO: Bind complex type: Queues (Dictionary<int, Gamestate.GamestateConstruction.GamestateConstructionQueueMgr.GamestateConstructionQueueMgrQueuesItem?>)
                    if (obj.TryGetSaveObject("queues", out SaveObject queuesDictObj) && queuesDictObj != null)
                        model.Queues = new Dictionary<int, Gamestate.GamestateConstruction.GamestateConstructionQueueMgr.GamestateConstructionQueueMgrQueuesItem?>(); // Initialize empty dictionary


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateConstructionItemMgr
            {
                /// <summary>
                /// </summary>
                public class GamestateConstructionItemMgrItems
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateConstructionItemMgrItemsNone
                    {
                        /// <summary>
                        /// </summary>
                        public class GamestateConstructionItemMgrItemsNoneBuildableDistrict
                        {
                            /// <summary>Property for 'district'</summary>
                            public string? District { get; set; }

                            /// <summary>Property for 'planet'</summary>
                            public int? Planet { get; set; }

                            /// <summary>The source SaveObject this instance was bound from</summary>
                            public SaveObject? SourceObject { get; private set; }

                            /// <summary>Binds a SaveObject to a new instance</summary>
                            public static GamestateConstructionItemMgrItemsNoneBuildableDistrict? Bind(SaveObject? obj)
                            {
                                if (obj == null) return null;
                                GamestateConstructionItemMgrItemsNoneBuildableDistrict model = new GamestateConstructionItemMgrItemsNoneBuildableDistrict();
                                model.SourceObject = obj;

                                model.District = obj.TryGetString("district", out string districtStringValue) && districtStringValue != "none" ? districtStringValue : null;

                                if (obj.TryGetInt("planet", out int planetValue) && planetValue != null)
                                    model.Planet = planetValue;


                                return model;
                            }
                        }
                        /// <summary>Property for 'queue'</summary>
                        public int? AQueue { get; set; }

                        /// <summary>Property for 'paying_country'</summary>
                        public int? PayingCountry { get; set; }

                        /// <summary>Property for 'progress'</summary>
                        public int? Progress { get; set; }

                        /// <summary>Property for 'progress_needed'</summary>
                        public int? ProgressNeeded { get; set; }

                        /// <summary>Property for 'resources'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners? Resources { get; set; }

                        /// <summary>Property for 'buildable_district'</summary>
                        public Gamestate.GamestateConstruction.GamestateConstructionItemMgr.GamestateConstructionItemMgrItems.GamestateConstructionItemMgrItemsNone.GamestateConstructionItemMgrItemsNoneBuildableDistrict? BuildableDistrict { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateConstructionItemMgrItemsNone? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateConstructionItemMgrItemsNone model = new GamestateConstructionItemMgrItemsNone();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("queue", out int aqueueValue) && aqueueValue != null)
                                model.AQueue = aqueueValue;

                            if (obj.TryGetInt("paying_country", out int payingcountryValue) && payingcountryValue != null)
                                model.PayingCountry = payingcountryValue;

                            if (obj.TryGetInt("progress", out int progressValue) && progressValue != null)
                                model.Progress = progressValue;

                            if (obj.TryGetInt("progress_needed", out int progressneededValue) && progressneededValue != null)
                                model.ProgressNeeded = progressneededValue;

                            if (obj.TryGetSaveObject("resources", out SaveObject resourcesNestedObj))
                                model.Resources = Gamestate.GamestateCountryItem.GamestateCountryItemBudget.GamestateCountryItemBudgetCurrentMonth.GamestateCountryItemBudgetCurrentMonthIncome.GamestateCountryItemBudgetCurrentMonthIncomePlanetMiners.Bind(resourcesNestedObj);

                            if (obj.TryGetSaveObject("buildable_district", out SaveObject buildabledistrictNestedObj))
                                model.BuildableDistrict = Gamestate.GamestateConstruction.GamestateConstructionItemMgr.GamestateConstructionItemMgrItems.GamestateConstructionItemMgrItemsNone.GamestateConstructionItemMgrItemsNoneBuildableDistrict.Bind(buildabledistrictNestedObj);


                            return model;
                        }
                    }
                    /// <summary>Property for 'none'</summary>
                    public Gamestate.GamestateConstruction.GamestateConstructionItemMgr.GamestateConstructionItemMgrItems.GamestateConstructionItemMgrItemsNone? None { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateConstructionItemMgrItems? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateConstructionItemMgrItems model = new GamestateConstructionItemMgrItems();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                            model.None = Gamestate.GamestateConstruction.GamestateConstructionItemMgr.GamestateConstructionItemMgrItems.GamestateConstructionItemMgrItemsNone.Bind(noneNestedObj);


                        return model;
                    }
                }
                /// <summary>Property for 'items'</summary>
                public Gamestate.GamestateConstruction.GamestateConstructionItemMgr.GamestateConstructionItemMgrItems? Items { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateConstructionItemMgr? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateConstructionItemMgr model = new GamestateConstructionItemMgr();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("items", out SaveObject itemsNestedObj))
                        model.Items = Gamestate.GamestateConstruction.GamestateConstructionItemMgr.GamestateConstructionItemMgrItems.Bind(itemsNestedObj);


                    return model;
                }
            }
            /// <summary>Property for 'queue_mgr'</summary>
            public Gamestate.GamestateConstruction.GamestateConstructionQueueMgr? QueueMgr { get; set; }

            /// <summary>Property for 'item_mgr'</summary>
            public Gamestate.GamestateConstruction.GamestateConstructionItemMgr? ItemMgr { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateConstruction? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateConstruction model = new GamestateConstruction();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("queue_mgr", out SaveObject queuemgrNestedObj))
                    model.QueueMgr = Gamestate.GamestateConstruction.GamestateConstructionQueueMgr.Bind(queuemgrNestedObj);

                if (obj.TryGetSaveObject("item_mgr", out SaveObject itemmgrNestedObj))
                    model.ItemMgr = Gamestate.GamestateConstruction.GamestateConstructionItemMgr.Bind(itemmgrNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateTruce
        {
            /// <summary>Property for 'none'</summary>
            public string? None { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateTruce? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateTruce model = new GamestateTruce();
                model.SourceObject = obj;

                model.None = obj.TryGetString("none", out string noneStringValue) && noneStringValue != "none" ? noneStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateLeaders
        {
            /// <summary>
            /// </summary>
            public class GamestateLeadersNone
            {
                /// <summary>
                /// </summary>
                public class GamestateLeadersNoneName
                {
                    /// <summary>Property for 'full_names'</summary>
                    public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? FullNames { get; set; }

                    /// <summary>Property for 'use_full_regnal_name'</summary>
                    public bool? UseFullRegnalName { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateLeadersNoneName? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateLeadersNoneName model = new GamestateLeadersNoneName();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("full_names", out SaveObject fullnamesNestedObj))
                            model.FullNames = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(fullnamesNestedObj);

                        if (obj.TryGetBool("use_full_regnal_name", out bool usefullregnalnameValue) && usefullregnalnameValue != null)
                            model.UseFullRegnalName = usefullregnalnameValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateLeadersNoneVariables
                {
                    /// <summary>Property for 'leader_pending_negative_traits_unmodified'</summary>
                    public int? LeaderPendingNegativeTraitsUnmodified { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateLeadersNoneVariables? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateLeadersNoneVariables model = new GamestateLeadersNoneVariables();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("leader_pending_negative_traits_unmodified", out int leaderpendingnegativetraitsunmodifiedValue) && leaderpendingnegativetraitsunmodifiedValue != null)
                            model.LeaderPendingNegativeTraitsUnmodified = leaderpendingnegativetraitsunmodifiedValue;


                        return model;
                    }
                }
                /// <summary>Property for 'name'</summary>
                public Gamestate.GamestateLeaders.GamestateLeadersNone.GamestateLeadersNoneName? Name { get; set; }

                /// <summary>Property for 'species'</summary>
                public int? Species { get; set; }

                /// <summary>Property for 'portrait'</summary>
                public string? Portrait { get; set; }

                /// <summary>Property for 'country'</summary>
                public int? Country { get; set; }

                /// <summary>Property for 'creator'</summary>
                public int? Creator { get; set; }

                /// <summary>Property for 'class'</summary>
                public string? AClass { get; set; }

                /// <summary>Property for 'experience'</summary>
                public int? Experience { get; set; }

                /// <summary>Property for 'level'</summary>
                public int? Level { get; set; }

                /// <summary>Property for 'date'</summary>
                public DateTime? Date { get; set; }

                /// <summary>Property for 'recruitment_date'</summary>
                public DateTime? RecruitmentDate { get; set; }

                /// <summary>Property for 'age'</summary>
                public int? Age { get; set; }

                /// <summary>Property for 'variables'</summary>
                public Gamestate.GamestateLeaders.GamestateLeadersNone.GamestateLeadersNoneVariables? Variables { get; set; }

                /// <summary>Property for 'ethic'</summary>
                public string? Ethic { get; set; }

                /// <summary>Property for 'planet'</summary>
                public int? Planet { get; set; }

                /// <summary>Property for 'days_frozen'</summary>
                public int? DaysFrozen { get; set; }

                /// <summary>Property for 'traits'</summary>
                public string? Traits { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateLeadersNone? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateLeadersNone model = new GamestateLeadersNone();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                        model.Name = Gamestate.GamestateLeaders.GamestateLeadersNone.GamestateLeadersNoneName.Bind(nameNestedObj);

                    if (obj.TryGetInt("species", out int speciesValue) && speciesValue != null)
                        model.Species = speciesValue;

                    model.Portrait = obj.TryGetString("portrait", out string portraitStringValue) && portraitStringValue != "none" ? portraitStringValue : null;

                    if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                        model.Country = countryValue;

                    if (obj.TryGetInt("creator", out int creatorValue) && creatorValue != null)
                        model.Creator = creatorValue;

                    model.AClass = obj.TryGetString("class", out string aclassStringValue) && aclassStringValue != "none" ? aclassStringValue : null;

                    if (obj.TryGetInt("experience", out int experienceValue) && experienceValue != null)
                        model.Experience = experienceValue;

                    if (obj.TryGetInt("level", out int levelValue) && levelValue != null)
                        model.Level = levelValue;

                    if (obj.TryGetDateTime("date", out DateTime dateValue) && dateValue != null)
                        model.Date = dateValue;

                    if (obj.TryGetDateTime("recruitment_date", out DateTime recruitmentdateValue) && recruitmentdateValue != null)
                        model.RecruitmentDate = recruitmentdateValue;

                    if (obj.TryGetInt("age", out int ageValue) && ageValue != null)
                        model.Age = ageValue;

                    if (obj.TryGetSaveObject("variables", out SaveObject variablesNestedObj))
                        model.Variables = Gamestate.GamestateLeaders.GamestateLeadersNone.GamestateLeadersNoneVariables.Bind(variablesNestedObj);

                    model.Ethic = obj.TryGetString("ethic", out string ethicStringValue) && ethicStringValue != "none" ? ethicStringValue : null;

                    if (obj.TryGetInt("planet", out int planetValue) && planetValue != null)
                        model.Planet = planetValue;

                    if (obj.TryGetInt("days_frozen", out int daysfrozenValue) && daysfrozenValue != null)
                        model.DaysFrozen = daysfrozenValue;

                    model.Traits = obj.TryGetString("traits", out string traitsStringValue) && traitsStringValue != "none" ? traitsStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'none'</summary>
            public Gamestate.GamestateLeaders.GamestateLeadersNone? None { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateLeaders? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateLeaders model = new GamestateLeaders();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("none", out SaveObject noneNestedObj))
                    model.None = Gamestate.GamestateLeaders.GamestateLeadersNone.Bind(noneNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateSystemInitializerCounter
        {
            /// <summary>Property for 'count'</summary>
            public List<int?>? Count { get; set; }

            /// <summary>Property for 'initializer'</summary>
            public List<string>? Initializer { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateSystemInitializerCounter? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateSystemInitializerCounter model = new GamestateSystemInitializerCounter();
                model.SourceObject = obj;

                // TODO: Bind complex type: Count (List<int?>)
                if (obj.TryGetSaveArray("count", out SaveArray countArray) && countArray != null)
                    model.Count = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (countArray != null)
                {
                    foreach (var item in countArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Count.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: Initializer (List<string>)
                if (obj.TryGetSaveArray("initializer", out SaveArray initializerArray) && initializerArray != null)
                    model.Initializer = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (initializerArray != null)
                {
                    foreach (var item in initializerArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.Initializer.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateSavedLeaders
        {
            /// <summary>Property for 'dead_leader_clone_exile'</summary>
            public long? DeadLeaderCloneExile { get; set; }

            /// <summary>Property for 'ethic_leader_exile'</summary>
            public int? EthicLeaderExile { get; set; }

            /// <summary>Property for 'dead_scientist'</summary>
            public long? DeadScientist { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateSavedLeaders? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateSavedLeaders model = new GamestateSavedLeaders();
                model.SourceObject = obj;

                if (obj.TryGetLong("dead_leader_clone_exile", out long deadleadercloneexileValue) && deadleadercloneexileValue != null)
                    model.DeadLeaderCloneExile = deadleadercloneexileValue;

                if (obj.TryGetInt("ethic_leader_exile", out int ethicleaderexileValue) && ethicleaderexileValue != null)
                    model.EthicLeaderExile = ethicleaderexileValue;

                if (obj.TryGetLong("dead_scientist", out long deadscientistValue) && deadscientistValue != null)
                    model.DeadScientist = deadscientistValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateShipsItem
        {
            /// <summary>
            /// </summary>
            public class GamestateShipsItemSection
            {
                /// <summary>
                /// </summary>
                public class GamestateShipsItemSectionWeapon
                {
                    /// <summary>Property for 'index'</summary>
                    public int? Index { get; set; }

                    /// <summary>Property for 'template'</summary>
                    public string? Template { get; set; }

                    /// <summary>Property for 'component_slot'</summary>
                    public string? ComponentSlot { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateShipsItemSectionWeapon? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateShipsItemSectionWeapon model = new GamestateShipsItemSectionWeapon();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("index", out int indexValue) && indexValue != null)
                            model.Index = indexValue;

                        model.Template = obj.TryGetString("template", out string templateStringValue) && templateStringValue != "none" ? templateStringValue : null;

                        model.ComponentSlot = obj.TryGetString("component_slot", out string componentslotStringValue) && componentslotStringValue != "none" ? componentslotStringValue : null;


                        return model;
                    }
                }
                /// <summary>Property for 'design'</summary>
                public string? Design { get; set; }

                /// <summary>Property for 'slot'</summary>
                public string? Slot { get; set; }

                /// <summary>Property for 'weapon'</summary>
                public Gamestate.GamestateShipsItem.GamestateShipsItemSection.GamestateShipsItemSectionWeapon? Weapon { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateShipsItemSection? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateShipsItemSection model = new GamestateShipsItemSection();
                    model.SourceObject = obj;

                    model.Design = obj.TryGetString("design", out string designStringValue) && designStringValue != "none" ? designStringValue : null;

                    model.Slot = obj.TryGetString("slot", out string slotStringValue) && slotStringValue != "none" ? slotStringValue : null;

                    if (obj.TryGetSaveObject("weapon", out SaveObject weaponNestedObj))
                        model.Weapon = Gamestate.GamestateShipsItem.GamestateShipsItemSection.GamestateShipsItemSectionWeapon.Bind(weaponNestedObj);


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateShipsItemFormationPos
            {
                /// <summary>Property for 'x'</summary>
                public float? X { get; set; }

                /// <summary>Property for 'y'</summary>
                public float? Y { get; set; }

                /// <summary>Property for 'speed'</summary>
                public int? Speed { get; set; }

                /// <summary>Property for 'rotation'</summary>
                public int? Rotation { get; set; }

                /// <summary>Property for 'forward_x'</summary>
                public int? ForwardX { get; set; }

                /// <summary>Property for 'forward_y'</summary>
                public int? ForwardY { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateShipsItemFormationPos? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateShipsItemFormationPos model = new GamestateShipsItemFormationPos();
                    model.SourceObject = obj;

                    if (obj.TryGetFloat("x", out float xValue) && xValue != null)
                        model.X = xValue;

                    if (obj.TryGetFloat("y", out float yValue) && yValue != null)
                        model.Y = yValue;

                    if (obj.TryGetInt("speed", out int speedValue) && speedValue != null)
                        model.Speed = speedValue;

                    if (obj.TryGetInt("rotation", out int rotationValue) && rotationValue != null)
                        model.Rotation = rotationValue;

                    if (obj.TryGetInt("forward_x", out int forwardxValue) && forwardxValue != null)
                        model.ForwardX = forwardxValue;

                    if (obj.TryGetInt("forward_y", out int forwardyValue) && forwardyValue != null)
                        model.ForwardY = forwardyValue;


                    return model;
                }
            }
            /// <summary>Property for 'fleet'</summary>
            public int? Fleet { get; set; }

            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName? Name { get; set; }

            /// <summary>Property for 'reserve'</summary>
            public int? Reserve { get; set; }

            /// <summary>Property for 'ship_design'</summary>
            public int? ShipDesign { get; set; }

            /// <summary>Property for 'is_original_design'</summary>
            public bool? IsOriginalDesign { get; set; }

            /// <summary>Property for 'design_upgrade'</summary>
            public int? DesignUpgrade { get; set; }

            /// <summary>Property for 'graphical_culture'</summary>
            public string? GraphicalCulture { get; set; }

            /// <summary>Property for 'section'</summary>
            public Gamestate.GamestateShipsItem.GamestateShipsItemSection? Section { get; set; }

            /// <summary>Property for 'coordinate'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

            /// <summary>Property for 'target_coordinate'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? TargetCoordinate { get; set; }

            /// <summary>Property for 'post_move_angle'</summary>
            public float? PostMoveAngle { get; set; }

            /// <summary>Property for 'hitpoints'</summary>
            public int? Hitpoints { get; set; }

            /// <summary>Property for 'shield_hitpoints'</summary>
            public int? ShieldHitpoints { get; set; }

            /// <summary>Property for 'armor_hitpoints'</summary>
            public int? ArmorHitpoints { get; set; }

            /// <summary>Property for 'max_hitpoints'</summary>
            public int? MaxHitpoints { get; set; }

            /// <summary>Property for 'max_shield_hitpoints'</summary>
            public int? MaxShieldHitpoints { get; set; }

            /// <summary>Property for 'max_armor_hitpoints'</summary>
            public int? MaxArmorHitpoints { get; set; }

            /// <summary>Property for 'rotation'</summary>
            public float? Rotation { get; set; }

            /// <summary>Property for 'forward_x'</summary>
            public float? ForwardX { get; set; }

            /// <summary>Property for 'forward_y'</summary>
            public float? ForwardY { get; set; }

            /// <summary>Property for 'upgrade_progress'</summary>
            public int? UpgradeProgress { get; set; }

            /// <summary>Property for 'next_weapon_index'</summary>
            public int? NextWeaponIndex { get; set; }

            /// <summary>Property for 'created_this_update'</summary>
            public bool? CreatedThisUpdate { get; set; }

            /// <summary>Property for 'formation_pos'</summary>
            public Gamestate.GamestateShipsItem.GamestateShipsItemFormationPos? FormationPos { get; set; }

            /// <summary>Property for 'combat_action'</summary>
            public int? CombatAction { get; set; }

            /// <summary>Property for 'disable_at_health'</summary>
            public int? DisableAtHealth { get; set; }

            /// <summary>Property for 'enable_at_health'</summary>
            public float? EnableAtHealth { get; set; }

            /// <summary>Property for 'disengagement_opportunities'</summary>
            public int? DisengagementOpportunities { get; set; }

            /// <summary>Property for 'disengagement_opportunities_used'</summary>
            public int? DisengagementOpportunitiesUsed { get; set; }

            /// <summary>Property for 'targeting'</summary>
            public int? Targeting { get; set; }

            /// <summary>Property for 'cloaking_animation_progress'</summary>
            public int? CloakingAnimationProgress { get; set; }

            /// <summary>Property for 'construction_date'</summary>
            public DateTime? ConstructionDate { get; set; }

            /// <summary>Property for 'maturation_date'</summary>
            public string? MaturationDate { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateShipsItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateShipsItem model = new GamestateShipsItem();
                model.SourceObject = obj;

                if (obj.TryGetInt("fleet", out int fleetValue) && fleetValue != null)
                    model.Fleet = fleetValue;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.Bind(nameNestedObj);

                if (obj.TryGetInt("reserve", out int reserveValue) && reserveValue != null)
                    model.Reserve = reserveValue;

                if (obj.TryGetInt("ship_design", out int shipdesignValue) && shipdesignValue != null)
                    model.ShipDesign = shipdesignValue;

                if (obj.TryGetBool("is_original_design", out bool isoriginaldesignValue) && isoriginaldesignValue != null)
                    model.IsOriginalDesign = isoriginaldesignValue;

                if (obj.TryGetInt("design_upgrade", out int designupgradeValue) && designupgradeValue != null)
                    model.DesignUpgrade = designupgradeValue;

                model.GraphicalCulture = obj.TryGetString("graphical_culture", out string graphicalcultureStringValue) && graphicalcultureStringValue != "none" ? graphicalcultureStringValue : null;

                if (obj.TryGetSaveObject("section", out SaveObject sectionNestedObj))
                    model.Section = Gamestate.GamestateShipsItem.GamestateShipsItemSection.Bind(sectionNestedObj);

                if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                    model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                if (obj.TryGetSaveObject("target_coordinate", out SaveObject targetcoordinateNestedObj))
                    model.TargetCoordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(targetcoordinateNestedObj);

                if (obj.TryGetFloat("post_move_angle", out float postmoveangleValue) && postmoveangleValue != null)
                    model.PostMoveAngle = postmoveangleValue;

                if (obj.TryGetInt("hitpoints", out int hitpointsValue) && hitpointsValue != null)
                    model.Hitpoints = hitpointsValue;

                if (obj.TryGetInt("shield_hitpoints", out int shieldhitpointsValue) && shieldhitpointsValue != null)
                    model.ShieldHitpoints = shieldhitpointsValue;

                if (obj.TryGetInt("armor_hitpoints", out int armorhitpointsValue) && armorhitpointsValue != null)
                    model.ArmorHitpoints = armorhitpointsValue;

                if (obj.TryGetInt("max_hitpoints", out int maxhitpointsValue) && maxhitpointsValue != null)
                    model.MaxHitpoints = maxhitpointsValue;

                if (obj.TryGetInt("max_shield_hitpoints", out int maxshieldhitpointsValue) && maxshieldhitpointsValue != null)
                    model.MaxShieldHitpoints = maxshieldhitpointsValue;

                if (obj.TryGetInt("max_armor_hitpoints", out int maxarmorhitpointsValue) && maxarmorhitpointsValue != null)
                    model.MaxArmorHitpoints = maxarmorhitpointsValue;

                if (obj.TryGetFloat("rotation", out float rotationValue) && rotationValue != null)
                    model.Rotation = rotationValue;

                if (obj.TryGetFloat("forward_x", out float forwardxValue) && forwardxValue != null)
                    model.ForwardX = forwardxValue;

                if (obj.TryGetFloat("forward_y", out float forwardyValue) && forwardyValue != null)
                    model.ForwardY = forwardyValue;

                if (obj.TryGetInt("upgrade_progress", out int upgradeprogressValue) && upgradeprogressValue != null)
                    model.UpgradeProgress = upgradeprogressValue;

                if (obj.TryGetInt("next_weapon_index", out int nextweaponindexValue) && nextweaponindexValue != null)
                    model.NextWeaponIndex = nextweaponindexValue;

                if (obj.TryGetBool("created_this_update", out bool createdthisupdateValue) && createdthisupdateValue != null)
                    model.CreatedThisUpdate = createdthisupdateValue;

                if (obj.TryGetSaveObject("formation_pos", out SaveObject formationposNestedObj))
                    model.FormationPos = Gamestate.GamestateShipsItem.GamestateShipsItemFormationPos.Bind(formationposNestedObj);

                if (obj.TryGetInt("combat_action", out int combatactionValue) && combatactionValue != null)
                    model.CombatAction = combatactionValue;

                if (obj.TryGetInt("disable_at_health", out int disableathealthValue) && disableathealthValue != null)
                    model.DisableAtHealth = disableathealthValue;

                if (obj.TryGetFloat("enable_at_health", out float enableathealthValue) && enableathealthValue != null)
                    model.EnableAtHealth = enableathealthValue;

                if (obj.TryGetInt("disengagement_opportunities", out int disengagementopportunitiesValue) && disengagementopportunitiesValue != null)
                    model.DisengagementOpportunities = disengagementopportunitiesValue;

                if (obj.TryGetInt("disengagement_opportunities_used", out int disengagementopportunitiesusedValue) && disengagementopportunitiesusedValue != null)
                    model.DisengagementOpportunitiesUsed = disengagementopportunitiesusedValue;

                if (obj.TryGetInt("targeting", out int targetingValue) && targetingValue != null)
                    model.Targeting = targetingValue;

                if (obj.TryGetInt("cloaking_animation_progress", out int cloakinganimationprogressValue) && cloakinganimationprogressValue != null)
                    model.CloakingAnimationProgress = cloakinganimationprogressValue;

                if (obj.TryGetDateTime("construction_date", out DateTime constructiondateValue) && constructiondateValue != null)
                    model.ConstructionDate = constructiondateValue;

                model.MaturationDate = obj.TryGetString("maturation_date", out string maturationdateStringValue) && maturationdateStringValue != "none" ? maturationdateStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateFleetItem
        {
            /// <summary>
            /// </summary>
            public class GamestateFleetItemCombat
            {
                /// <summary>
                /// </summary>
                public class GamestateFleetItemCombatFormationPos
                {
                    /// <summary>Property for 'x'</summary>
                    public float? X { get; set; }

                    /// <summary>Property for 'y'</summary>
                    public float? Y { get; set; }

                    /// <summary>Property for 'speed'</summary>
                    public float? Speed { get; set; }

                    /// <summary>Property for 'rotation'</summary>
                    public float? Rotation { get; set; }

                    /// <summary>Property for 'forward_x'</summary>
                    public float? ForwardX { get; set; }

                    /// <summary>Property for 'forward_y'</summary>
                    public float? ForwardY { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemCombatFormationPos? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemCombatFormationPos model = new GamestateFleetItemCombatFormationPos();
                        model.SourceObject = obj;

                        if (obj.TryGetFloat("x", out float xValue) && xValue != null)
                            model.X = xValue;

                        if (obj.TryGetFloat("y", out float yValue) && yValue != null)
                            model.Y = yValue;

                        if (obj.TryGetFloat("speed", out float speedValue) && speedValue != null)
                            model.Speed = speedValue;

                        if (obj.TryGetFloat("rotation", out float rotationValue) && rotationValue != null)
                            model.Rotation = rotationValue;

                        if (obj.TryGetFloat("forward_x", out float forwardxValue) && forwardxValue != null)
                            model.ForwardX = forwardxValue;

                        if (obj.TryGetFloat("forward_y", out float forwardyValue) && forwardyValue != null)
                            model.ForwardY = forwardyValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateFleetItemCombatFormation
                {
                    /// <summary>Property for 'root'</summary>
                    public int? Root { get; set; }

                    /// <summary>Property for 'ships'</summary>
                    public List<int?>? Ships { get; set; }

                    /// <summary>Property for 'parent'</summary>
                    public List<int?>? Parent { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemCombatFormation? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemCombatFormation model = new GamestateFleetItemCombatFormation();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("root", out int rootValue) && rootValue != null)
                            model.Root = rootValue;

                        // TODO: Bind complex type: Ships (List<int?>)
                        if (obj.TryGetSaveArray("ships", out SaveArray shipsArray) && shipsArray != null)
                            model.Ships = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (shipsArray != null)
                {
                    foreach (var item in shipsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Ships.Add(scalarValue.Value);
                        }
                    }
                }

                        // TODO: Bind complex type: Parent (List<int?>)
                        if (obj.TryGetSaveArray("parent", out SaveArray parentArray) && parentArray != null)
                            model.Parent = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (parentArray != null)
                {
                    foreach (var item in parentArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Parent.Add(scalarValue.Value);
                        }
                    }
                }


                        return model;
                    }
                }
                /// <summary>Property for 'coordinate'</summary>
                public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

                /// <summary>Property for 'formation_pos'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemCombat.GamestateFleetItemCombatFormationPos? FormationPos { get; set; }

                /// <summary>Property for 'formation'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemCombat.GamestateFleetItemCombatFormation? Formation { get; set; }

                /// <summary>Property for 'start_coordinate'</summary>
                public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? StartCoordinate { get; set; }

                /// <summary>Property for 'start_date'</summary>
                public string? StartDate { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateFleetItemCombat? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateFleetItemCombat model = new GamestateFleetItemCombat();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                        model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                    if (obj.TryGetSaveObject("formation_pos", out SaveObject formationposNestedObj))
                        model.FormationPos = Gamestate.GamestateFleetItem.GamestateFleetItemCombat.GamestateFleetItemCombatFormationPos.Bind(formationposNestedObj);

                    if (obj.TryGetSaveObject("formation", out SaveObject formationNestedObj))
                        model.Formation = Gamestate.GamestateFleetItem.GamestateFleetItemCombat.GamestateFleetItemCombatFormation.Bind(formationNestedObj);

                    if (obj.TryGetSaveObject("start_coordinate", out SaveObject startcoordinateNestedObj))
                        model.StartCoordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(startcoordinateNestedObj);

                    model.StartDate = obj.TryGetString("start_date", out string startdateStringValue) && startdateStringValue != "none" ? startdateStringValue : null;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateFleetItemFleetStats
            {
                /// <summary>
                /// </summary>
                public class GamestateFleetItemFleetStatsCombatStats
                {
                    /// <summary>Property for 'fleet'</summary>
                    public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? Fleet { get; set; }

                    /// <summary>Property for 'date'</summary>
                    public string? Date { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemFleetStatsCombatStats? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemFleetStatsCombatStats model = new GamestateFleetItemFleetStatsCombatStats();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("fleet", out SaveObject fleetNestedObj))
                            model.Fleet = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(fleetNestedObj);

                        model.Date = obj.TryGetString("date", out string dateStringValue) && dateStringValue != "none" ? dateStringValue : null;


                        return model;
                    }
                }
                /// <summary>Property for 'combat_stats'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemFleetStats.GamestateFleetItemFleetStatsCombatStats? CombatStats { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateFleetItemFleetStats? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateFleetItemFleetStats model = new GamestateFleetItemFleetStats();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("combat_stats", out SaveObject combatstatsNestedObj))
                        model.CombatStats = Gamestate.GamestateFleetItem.GamestateFleetItemFleetStats.GamestateFleetItemFleetStatsCombatStats.Bind(combatstatsNestedObj);


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateFleetItemMiaFrom
            {
                /// <summary>Property for 'x'</summary>
                public int? X { get; set; }

                /// <summary>Property for 'y'</summary>
                public int? Y { get; set; }

                /// <summary>Property for 'origin'</summary>
                public long? Origin { get; set; }

                /// <summary>Property for 'randomized'</summary>
                public bool? Randomized { get; set; }

                /// <summary>Property for 'visual_height'</summary>
                public float? VisualHeight { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateFleetItemMiaFrom? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateFleetItemMiaFrom model = new GamestateFleetItemMiaFrom();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("x", out int xValue) && xValue != null)
                        model.X = xValue;

                    if (obj.TryGetInt("y", out int yValue) && yValue != null)
                        model.Y = yValue;

                    if (obj.TryGetLong("origin", out long originValue) && originValue != null)
                        model.Origin = originValue;

                    if (obj.TryGetBool("randomized", out bool randomizedValue) && randomizedValue != null)
                        model.Randomized = randomizedValue;

                    if (obj.TryGetFloat("visual_height", out float visualheightValue) && visualheightValue != null)
                        model.VisualHeight = visualheightValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateFleetItemMovementManager
            {
                /// <summary>
                /// </summary>
                public class GamestateFleetItemMovementManagerFormation
                {
                    /// <summary>Property for 'scale'</summary>
                    public int? Scale { get; set; }

                    /// <summary>Property for 'angle'</summary>
                    public float? Angle { get; set; }

                    /// <summary>Property for 'type'</summary>
                    public string? AType { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemMovementManagerFormation? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemMovementManagerFormation model = new GamestateFleetItemMovementManagerFormation();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("scale", out int scaleValue) && scaleValue != null)
                            model.Scale = scaleValue;

                        if (obj.TryGetFloat("angle", out float angleValue) && angleValue != null)
                            model.Angle = angleValue;

                        model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateFleetItemMovementManagerTarget
                {
                    /// <summary>Property for 'coordinate'</summary>
                    public Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom? Coordinate { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemMovementManagerTarget? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemMovementManagerTarget model = new GamestateFleetItemMovementManagerTarget();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                            model.Coordinate = Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom.Bind(coordinateNestedObj);


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateFleetItemMovementManagerPath
                {
                    /// <summary>Property for 'date'</summary>
                    public string? Date { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemMovementManagerPath? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemMovementManagerPath model = new GamestateFleetItemMovementManagerPath();
                        model.SourceObject = obj;

                        model.Date = obj.TryGetString("date", out string dateStringValue) && dateStringValue != "none" ? dateStringValue : null;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateFleetItemMovementManagerOrbit
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateFleetItemMovementManagerOrbitOrbitable
                    {
                        /// <summary>Property for 'planet'</summary>
                        public int? Planet { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateFleetItemMovementManagerOrbitOrbitable? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateFleetItemMovementManagerOrbitOrbitable model = new GamestateFleetItemMovementManagerOrbitOrbitable();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("planet", out int planetValue) && planetValue != null)
                                model.Planet = planetValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'orbitable'</summary>
                    public Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerOrbit.GamestateFleetItemMovementManagerOrbitOrbitable? Orbitable { get; set; }

                    /// <summary>Property for 'index'</summary>
                    public int? Index { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemMovementManagerOrbit? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemMovementManagerOrbit model = new GamestateFleetItemMovementManagerOrbit();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("orbitable", out SaveObject orbitableNestedObj))
                            model.Orbitable = Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerOrbit.GamestateFleetItemMovementManagerOrbitOrbitable.Bind(orbitableNestedObj);

                        if (obj.TryGetInt("index", out int indexValue) && indexValue != null)
                            model.Index = indexValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateFleetItemMovementManagerLastFtlJump
                {
                    /// <summary>Property for 'from'</summary>
                    public Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom? From { get; set; }

                    /// <summary>Property for 'fleet'</summary>
                    public long? Fleet { get; set; }

                    /// <summary>Property for 'jump_method'</summary>
                    public string? JumpMethod { get; set; }

                    /// <summary>Property for 'bypass_from'</summary>
                    public long? BypassFrom { get; set; }

                    /// <summary>Property for 'bypass_to'</summary>
                    public long? BypassTo { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetItemMovementManagerLastFtlJump? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetItemMovementManagerLastFtlJump model = new GamestateFleetItemMovementManagerLastFtlJump();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                            model.From = Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom.Bind(fromNestedObj);

                        if (obj.TryGetLong("fleet", out long fleetValue) && fleetValue != null)
                            model.Fleet = fleetValue;

                        model.JumpMethod = obj.TryGetString("jump_method", out string jumpmethodStringValue) && jumpmethodStringValue != "none" ? jumpmethodStringValue : null;

                        if (obj.TryGetLong("bypass_from", out long bypassfromValue) && bypassfromValue != null)
                            model.BypassFrom = bypassfromValue;

                        if (obj.TryGetLong("bypass_to", out long bypasstoValue) && bypasstoValue != null)
                            model.BypassTo = bypasstoValue;


                        return model;
                    }
                }
                /// <summary>Property for 'formation'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerFormation? Formation { get; set; }

                /// <summary>Property for 'coordinate'</summary>
                public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

                /// <summary>Property for 'target'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerTarget? Target { get; set; }

                /// <summary>Property for 'target_coordinate'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom? TargetCoordinate { get; set; }

                /// <summary>Property for 'state'</summary>
                public string? State { get; set; }

                /// <summary>Property for 'path'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerPath? Path { get; set; }

                /// <summary>Property for 'orbit'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerOrbit? Orbit { get; set; }

                /// <summary>Property for 'last_ftl_jump'</summary>
                public Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerLastFtlJump? LastFtlJump { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateFleetItemMovementManager? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateFleetItemMovementManager model = new GamestateFleetItemMovementManager();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("formation", out SaveObject formationNestedObj))
                        model.Formation = Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerFormation.Bind(formationNestedObj);

                    if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                        model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                    if (obj.TryGetSaveObject("target", out SaveObject targetNestedObj))
                        model.Target = Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerTarget.Bind(targetNestedObj);

                    if (obj.TryGetSaveObject("target_coordinate", out SaveObject targetcoordinateNestedObj))
                        model.TargetCoordinate = Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom.Bind(targetcoordinateNestedObj);

                    model.State = obj.TryGetString("state", out string stateStringValue) && stateStringValue != "none" ? stateStringValue : null;

                    if (obj.TryGetSaveObject("path", out SaveObject pathNestedObj))
                        model.Path = Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerPath.Bind(pathNestedObj);

                    if (obj.TryGetSaveObject("orbit", out SaveObject orbitNestedObj))
                        model.Orbit = Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerOrbit.Bind(orbitNestedObj);

                    if (obj.TryGetSaveObject("last_ftl_jump", out SaveObject lastftljumpNestedObj))
                        model.LastFtlJump = Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.GamestateFleetItemMovementManagerLastFtlJump.Bind(lastftljumpNestedObj);


                    return model;
                }
            }
            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName? Name { get; set; }

            /// <summary>Property for 'ships'</summary>
            public List<int?>? Ships { get; set; }

            /// <summary>Property for 'combat'</summary>
            public Gamestate.GamestateFleetItem.GamestateFleetItemCombat? Combat { get; set; }

            /// <summary>Property for 'fleet_stats'</summary>
            public Gamestate.GamestateFleetItem.GamestateFleetItemFleetStats? FleetStats { get; set; }

            /// <summary>Property for 'station'</summary>
            public bool? Station { get; set; }

            /// <summary>Property for 'ground_support_stance'</summary>
            public string? GroundSupportStance { get; set; }

            /// <summary>Property for 'space_fauna_growth_stance'</summary>
            public string? SpaceFaunaGrowthStance { get; set; }

            /// <summary>Property for 'mia_from'</summary>
            public Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom? MiaFrom { get; set; }

            /// <summary>Property for 'movement_manager'</summary>
            public Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager? MovementManager { get; set; }

            /// <summary>Property for 'hit_points'</summary>
            public float? HitPoints { get; set; }

            /// <summary>Property for 'military_power'</summary>
            public float? MilitaryPower { get; set; }

            /// <summary>Property for 'diplomacy_weight'</summary>
            public float? DiplomacyWeight { get; set; }

            /// <summary>Property for 'cached_killed_ships'</summary>
            public int? CachedKilledShips { get; set; }

            /// <summary>Property for 'cached_disabled_ships'</summary>
            public int? CachedDisabledShips { get; set; }

            /// <summary>Property for 'cached_disengaged_ships'</summary>
            public int? CachedDisengagedShips { get; set; }

            /// <summary>Property for 'cached_combined_removed_ships'</summary>
            public int? CachedCombinedRemovedShips { get; set; }

            /// <summary>Property for 'can_take_orders'</summary>
            public bool? CanTakeOrders { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateFleetItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateFleetItem model = new GamestateFleetItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.Bind(nameNestedObj);

                // TODO: Bind complex type: Ships (List<int?>)
                if (obj.TryGetSaveArray("ships", out SaveArray shipsArray) && shipsArray != null)
                    model.Ships = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (shipsArray != null)
                {
                    foreach (var item in shipsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Ships.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("combat", out SaveObject combatNestedObj))
                    model.Combat = Gamestate.GamestateFleetItem.GamestateFleetItemCombat.Bind(combatNestedObj);

                if (obj.TryGetSaveObject("fleet_stats", out SaveObject fleetstatsNestedObj))
                    model.FleetStats = Gamestate.GamestateFleetItem.GamestateFleetItemFleetStats.Bind(fleetstatsNestedObj);

                if (obj.TryGetBool("station", out bool stationValue) && stationValue != null)
                    model.Station = stationValue;

                model.GroundSupportStance = obj.TryGetString("ground_support_stance", out string groundsupportstanceStringValue) && groundsupportstanceStringValue != "none" ? groundsupportstanceStringValue : null;

                model.SpaceFaunaGrowthStance = obj.TryGetString("space_fauna_growth_stance", out string spacefaunagrowthstanceStringValue) && spacefaunagrowthstanceStringValue != "none" ? spacefaunagrowthstanceStringValue : null;

                if (obj.TryGetSaveObject("mia_from", out SaveObject miafromNestedObj))
                    model.MiaFrom = Gamestate.GamestateFleetItem.GamestateFleetItemMiaFrom.Bind(miafromNestedObj);

                if (obj.TryGetSaveObject("movement_manager", out SaveObject movementmanagerNestedObj))
                    model.MovementManager = Gamestate.GamestateFleetItem.GamestateFleetItemMovementManager.Bind(movementmanagerNestedObj);

                if (obj.TryGetFloat("hit_points", out float hitpointsValue) && hitpointsValue != null)
                    model.HitPoints = hitpointsValue;

                if (obj.TryGetFloat("military_power", out float militarypowerValue) && militarypowerValue != null)
                    model.MilitaryPower = militarypowerValue;

                if (obj.TryGetFloat("diplomacy_weight", out float diplomacyweightValue) && diplomacyweightValue != null)
                    model.DiplomacyWeight = diplomacyweightValue;

                if (obj.TryGetInt("cached_killed_ships", out int cachedkilledshipsValue) && cachedkilledshipsValue != null)
                    model.CachedKilledShips = cachedkilledshipsValue;

                if (obj.TryGetInt("cached_disabled_ships", out int cacheddisabledshipsValue) && cacheddisabledshipsValue != null)
                    model.CachedDisabledShips = cacheddisabledshipsValue;

                if (obj.TryGetInt("cached_disengaged_ships", out int cacheddisengagedshipsValue) && cacheddisengagedshipsValue != null)
                    model.CachedDisengagedShips = cacheddisengagedshipsValue;

                if (obj.TryGetInt("cached_combined_removed_ships", out int cachedcombinedremovedshipsValue) && cachedcombinedremovedshipsValue != null)
                    model.CachedCombinedRemovedShips = cachedcombinedremovedshipsValue;

                if (obj.TryGetBool("can_take_orders", out bool cantakeordersValue) && cantakeordersValue != null)
                    model.CanTakeOrders = cantakeordersValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateFleetTemplateItem
        {
            /// <summary>
            /// </summary>
            public class GamestateFleetTemplateItemHomeBase
            {
                /// <summary>
                /// </summary>
                public class GamestateFleetTemplateItemHomeBaseOrbitable
                {
                    /// <summary>Property for 'starbase'</summary>
                    public int? Starbase { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFleetTemplateItemHomeBaseOrbitable? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFleetTemplateItemHomeBaseOrbitable model = new GamestateFleetTemplateItemHomeBaseOrbitable();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("starbase", out int starbaseValue) && starbaseValue != null)
                            model.Starbase = starbaseValue;


                        return model;
                    }
                }
                /// <summary>Property for 'orbitable'</summary>
                public Gamestate.GamestateFleetTemplateItem.GamestateFleetTemplateItemHomeBase.GamestateFleetTemplateItemHomeBaseOrbitable? Orbitable { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateFleetTemplateItemHomeBase? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateFleetTemplateItemHomeBase model = new GamestateFleetTemplateItemHomeBase();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("orbitable", out SaveObject orbitableNestedObj))
                        model.Orbitable = Gamestate.GamestateFleetTemplateItem.GamestateFleetTemplateItemHomeBase.GamestateFleetTemplateItemHomeBaseOrbitable.Bind(orbitableNestedObj);


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateFleetTemplateItemFleetTemplateDesignItem
            {
                /// <summary>Property for 'design'</summary>
                public int? Design { get; set; }

                /// <summary>Property for 'count'</summary>
                public int? Count { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateFleetTemplateItemFleetTemplateDesignItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateFleetTemplateItemFleetTemplateDesignItem model = new GamestateFleetTemplateItemFleetTemplateDesignItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("design", out int designValue) && designValue != null)
                        model.Design = designValue;

                    if (obj.TryGetInt("count", out int countValue) && countValue != null)
                        model.Count = countValue;


                    return model;
                }
            }
            /// <summary>Property for 'fleet'</summary>
            public int? Fleet { get; set; }

            /// <summary>Property for 'home_base'</summary>
            public Gamestate.GamestateFleetTemplateItem.GamestateFleetTemplateItemHomeBase? HomeBase { get; set; }

            /// <summary>Property for 'fleet_template_design'</summary>
            public List<Gamestate.GamestateFleetTemplateItem.GamestateFleetTemplateItemFleetTemplateDesignItem?>? FleetTemplateDesign { get; set; }

            /// <summary>Property for 'all_queued'</summary>
            public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? AllQueued { get; set; }

            /// <summary>Property for 'fleet_size'</summary>
            public int? FleetSize { get; set; }

            /// <summary>Property for 'is_edited_by_human'</summary>
            public bool? IsEditedByHuman { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateFleetTemplateItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateFleetTemplateItem model = new GamestateFleetTemplateItem();
                model.SourceObject = obj;

                if (obj.TryGetInt("fleet", out int fleetValue) && fleetValue != null)
                    model.Fleet = fleetValue;

                if (obj.TryGetSaveObject("home_base", out SaveObject homebaseNestedObj))
                    model.HomeBase = Gamestate.GamestateFleetTemplateItem.GamestateFleetTemplateItemHomeBase.Bind(homebaseNestedObj);

                // TODO: Bind complex type: FleetTemplateDesign (List<Gamestate.GamestateFleetTemplateItem.GamestateFleetTemplateItemFleetTemplateDesignItem?>)
                if (obj.TryGetSaveArray("fleet_template_design", out SaveArray fleettemplatedesignArray) && fleettemplatedesignArray != null)
                    model.FleetTemplateDesign = new List<Gamestate.GamestateFleetTemplateItem.GamestateFleetTemplateItemFleetTemplateDesignItem?>(); // Initialize empty list

                if (obj.TryGetSaveObject("all_queued", out SaveObject allqueuedNestedObj))
                    model.AllQueued = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(allqueuedNestedObj);

                if (obj.TryGetInt("fleet_size", out int fleetsizeValue) && fleetsizeValue != null)
                    model.FleetSize = fleetsizeValue;

                if (obj.TryGetBool("is_edited_by_human", out bool iseditedbyhumanValue) && iseditedbyhumanValue != null)
                    model.IsEditedByHuman = iseditedbyhumanValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateArmyItem
        {
            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName? Name { get; set; }

            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'health'</summary>
            public int? Health { get; set; }

            /// <summary>Property for 'max_health'</summary>
            public int? MaxHealth { get; set; }

            /// <summary>Property for 'jump_drive_cooldown'</summary>
            public string? JumpDriveCooldown { get; set; }

            /// <summary>Property for 'home_planet'</summary>
            public int? HomePlanet { get; set; }

            /// <summary>Property for 'owner'</summary>
            public int? Owner { get; set; }

            /// <summary>Property for 'ship'</summary>
            public int? Ship { get; set; }

            /// <summary>Property for 'leader'</summary>
            public int? Leader { get; set; }

            /// <summary>Property for 'morale'</summary>
            public int? Morale { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateArmyItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateArmyItem model = new GamestateArmyItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.Bind(nameNestedObj);

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetInt("health", out int healthValue) && healthValue != null)
                    model.Health = healthValue;

                if (obj.TryGetInt("max_health", out int maxhealthValue) && maxhealthValue != null)
                    model.MaxHealth = maxhealthValue;

                model.JumpDriveCooldown = obj.TryGetString("jump_drive_cooldown", out string jumpdrivecooldownStringValue) && jumpdrivecooldownStringValue != "none" ? jumpdrivecooldownStringValue : null;

                if (obj.TryGetInt("home_planet", out int homeplanetValue) && homeplanetValue != null)
                    model.HomePlanet = homeplanetValue;

                if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                    model.Owner = ownerValue;

                if (obj.TryGetInt("ship", out int shipValue) && shipValue != null)
                    model.Ship = shipValue;

                if (obj.TryGetInt("leader", out int leaderValue) && leaderValue != null)
                    model.Leader = leaderValue;

                if (obj.TryGetInt("morale", out int moraleValue) && moraleValue != null)
                    model.Morale = moraleValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateDepositItem
        {
            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'deposit_holder'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate? DepositHolder { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateDepositItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateDepositItem model = new GamestateDepositItem();
                model.SourceObject = obj;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetSaveObject("deposit_holder", out SaveObject depositholderNestedObj))
                    model.DepositHolder = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate.Bind(depositholderNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateWarItem
        {
            /// <summary>
            /// </summary>
            public class GamestateWarItemName
            {
                /// <summary>
                /// </summary>
                public class GamestateWarItemNameVariablesItem
                {
                    /// <summary>Property for 'key'</summary>
                    public string? Key { get; set; }

                    /// <summary>Property for 'value'</summary>
                    public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName? Value { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateWarItemNameVariablesItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateWarItemNameVariablesItem model = new GamestateWarItemNameVariablesItem();
                        model.SourceObject = obj;

                        model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                        if (obj.TryGetSaveObject("value", out SaveObject valueNestedObj))
                            model.Value = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneName.Bind(valueNestedObj);


                        return model;
                    }
                }
                /// <summary>Property for 'key'</summary>
                public string? Key { get; set; }

                /// <summary>Property for 'variables'</summary>
                public List<Gamestate.GamestateWarItem.GamestateWarItemName.GamestateWarItemNameVariablesItem?>? Variables { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateWarItemName? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateWarItemName model = new GamestateWarItemName();
                    model.SourceObject = obj;

                    model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                    // TODO: Bind complex type: Variables (List<Gamestate.GamestateWarItem.GamestateWarItemName.GamestateWarItemNameVariablesItem?>)
                    if (obj.TryGetSaveArray("variables", out SaveArray variablesArray) && variablesArray != null)
                        model.Variables = new List<Gamestate.GamestateWarItem.GamestateWarItemName.GamestateWarItemNameVariablesItem?>(); // Initialize empty list


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateWarItemAttackersItem
            {
                /// <summary>Property for 'call_type'</summary>
                public string? CallType { get; set; }

                /// <summary>Property for 'country'</summary>
                public int? Country { get; set; }

                /// <summary>Property for 'caller'</summary>
                public long? Caller { get; set; }

                /// <summary>Property for 'fleets_gone_mia'</summary>
                public int? FleetsGoneMia { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateWarItemAttackersItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateWarItemAttackersItem model = new GamestateWarItemAttackersItem();
                    model.SourceObject = obj;

                    model.CallType = obj.TryGetString("call_type", out string calltypeStringValue) && calltypeStringValue != "none" ? calltypeStringValue : null;

                    if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                        model.Country = countryValue;

                    if (obj.TryGetLong("caller", out long callerValue) && callerValue != null)
                        model.Caller = callerValue;

                    if (obj.TryGetInt("fleets_gone_mia", out int fleetsgonemiaValue) && fleetsgonemiaValue != null)
                        model.FleetsGoneMia = fleetsgonemiaValue;


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateWarItemAttackerWarGoal
            {
                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateWarItemAttackerWarGoal? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateWarItemAttackerWarGoal model = new GamestateWarItemAttackerWarGoal();
                    model.SourceObject = obj;

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateWarItem.GamestateWarItemName? Name { get; set; }

            /// <summary>Property for 'start_date'</summary>
            public DateTime? StartDate { get; set; }

            /// <summary>Property for 'attackers'</summary>
            public List<Gamestate.GamestateWarItem.GamestateWarItemAttackersItem?>? Attackers { get; set; }

            /// <summary>Property for 'defenders'</summary>
            public List<Gamestate.GamestateWarItem.GamestateWarItemAttackersItem?>? Defenders { get; set; }

            /// <summary>Property for 'attacker_war_goal'</summary>
            public Gamestate.GamestateWarItem.GamestateWarItemAttackerWarGoal? AttackerWarGoal { get; set; }

            /// <summary>Property for 'defender_war_goal'</summary>
            public Gamestate.GamestateWarItem.GamestateWarItemAttackerWarGoal? DefenderWarGoal { get; set; }

            /// <summary>Property for 'have_defender_war_goal'</summary>
            public bool? HaveDefenderWarGoal { get; set; }

            /// <summary>Property for 'attacker_war_exhaustion'</summary>
            public float? AttackerWarExhaustion { get; set; }

            /// <summary>Property for 'defender_war_exhaustion'</summary>
            public float? DefenderWarExhaustion { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateWarItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateWarItem model = new GamestateWarItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateWarItem.GamestateWarItemName.Bind(nameNestedObj);

                if (obj.TryGetDateTime("start_date", out DateTime startdateValue) && startdateValue != null)
                    model.StartDate = startdateValue;

                // TODO: Bind complex type: Attackers (List<Gamestate.GamestateWarItem.GamestateWarItemAttackersItem?>)
                if (obj.TryGetSaveArray("attackers", out SaveArray attackersArray) && attackersArray != null)
                    model.Attackers = new List<Gamestate.GamestateWarItem.GamestateWarItemAttackersItem?>(); // Initialize empty list

                // TODO: Bind complex type: Defenders (List<Gamestate.GamestateWarItem.GamestateWarItemAttackersItem?>)
                if (obj.TryGetSaveArray("defenders", out SaveArray defendersArray) && defendersArray != null)
                    model.Defenders = new List<Gamestate.GamestateWarItem.GamestateWarItemAttackersItem?>(); // Initialize empty list

                if (obj.TryGetSaveObject("attacker_war_goal", out SaveObject attackerwargoalNestedObj))
                    model.AttackerWarGoal = Gamestate.GamestateWarItem.GamestateWarItemAttackerWarGoal.Bind(attackerwargoalNestedObj);

                if (obj.TryGetSaveObject("defender_war_goal", out SaveObject defenderwargoalNestedObj))
                    model.DefenderWarGoal = Gamestate.GamestateWarItem.GamestateWarItemAttackerWarGoal.Bind(defenderwargoalNestedObj);

                if (obj.TryGetBool("have_defender_war_goal", out bool havedefenderwargoalValue) && havedefenderwargoalValue != null)
                    model.HaveDefenderWarGoal = havedefenderwargoalValue;

                if (obj.TryGetFloat("attacker_war_exhaustion", out float attackerwarexhaustionValue) && attackerwarexhaustionValue != null)
                    model.AttackerWarExhaustion = attackerwarexhaustionValue;

                if (obj.TryGetFloat("defender_war_exhaustion", out float defenderwarexhaustionValue) && defenderwarexhaustionValue != null)
                    model.DefenderWarExhaustion = defenderwarexhaustionValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateStrikeCraft
        {
            /// <summary>Property for 'none'</summary>
            public string? None { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateStrikeCraft? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateStrikeCraft model = new GamestateStrikeCraft();
                model.SourceObject = obj;

                model.None = obj.TryGetString("none", out string noneStringValue) && noneStringValue != "none" ? noneStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateAmbientObjectItem
        {
            /// <summary>
            /// </summary>
            public class GamestateAmbientObjectItemProperties
            {
                /// <summary>
                /// </summary>
                public class GamestateAmbientObjectItemPropertiesAttach
                {
                    /// <summary>Property for 'type'</summary>
                    public int? AType { get; set; }

                    /// <summary>Property for 'id'</summary>
                    public long? Id { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateAmbientObjectItemPropertiesAttach? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateAmbientObjectItemPropertiesAttach model = new GamestateAmbientObjectItemPropertiesAttach();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("type", out int atypeValue) && atypeValue != null)
                            model.AType = atypeValue;

                        if (obj.TryGetLong("id", out long idValue) && idValue != null)
                            model.Id = idValue;


                        return model;
                    }
                }
                /// <summary>Property for 'coordinate'</summary>
                public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

                /// <summary>Property for 'attach'</summary>
                public Gamestate.GamestateAmbientObjectItem.GamestateAmbientObjectItemProperties.GamestateAmbientObjectItemPropertiesAttach? Attach { get; set; }

                /// <summary>Property for 'offset'</summary>
                public List<float?>? Offset { get; set; }

                /// <summary>Property for 'scale'</summary>
                public int? Scale { get; set; }

                /// <summary>Property for 'entity_face_object'</summary>
                public Gamestate.GamestateAmbientObjectItem.GamestateAmbientObjectItemProperties.GamestateAmbientObjectItemPropertiesAttach? EntityFaceObject { get; set; }

                /// <summary>Property for 'appear_state'</summary>
                public string? AppearState { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateAmbientObjectItemProperties? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateAmbientObjectItemProperties model = new GamestateAmbientObjectItemProperties();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                        model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                    if (obj.TryGetSaveObject("attach", out SaveObject attachNestedObj))
                        model.Attach = Gamestate.GamestateAmbientObjectItem.GamestateAmbientObjectItemProperties.GamestateAmbientObjectItemPropertiesAttach.Bind(attachNestedObj);

                    // TODO: Bind complex type: Offset (List<float?>)
                    if (obj.TryGetSaveArray("offset", out SaveArray offsetArray) && offsetArray != null)
                        model.Offset = new List<float?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (offsetArray != null)
                {
                    foreach (var item in offsetArray.Items)
                    {
                        if (item is Scalar<float> scalarValue)
                        {
                            model.Offset.Add(scalarValue.Value);
                        }
                    }
                }

                    if (obj.TryGetInt("scale", out int scaleValue) && scaleValue != null)
                        model.Scale = scaleValue;

                    if (obj.TryGetSaveObject("entity_face_object", out SaveObject entityfaceobjectNestedObj))
                        model.EntityFaceObject = Gamestate.GamestateAmbientObjectItem.GamestateAmbientObjectItemProperties.GamestateAmbientObjectItemPropertiesAttach.Bind(entityfaceobjectNestedObj);

                    model.AppearState = obj.TryGetString("appear_state", out string appearstateStringValue) && appearstateStringValue != "none" ? appearstateStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'coordinate'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

            /// <summary>Property for 'data'</summary>
            public string? Data { get; set; }

            /// <summary>Property for 'properties'</summary>
            public Gamestate.GamestateAmbientObjectItem.GamestateAmbientObjectItemProperties? Properties { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateAmbientObjectItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateAmbientObjectItem model = new GamestateAmbientObjectItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                    model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                model.Data = obj.TryGetString("data", out string dataStringValue) && dataStringValue != "none" ? dataStringValue : null;

                if (obj.TryGetSaveObject("properties", out SaveObject propertiesNestedObj))
                    model.Properties = Gamestate.GamestateAmbientObjectItem.GamestateAmbientObjectItemProperties.Bind(propertiesNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateOrbitalLineItem
        {
            /// <summary>Property for 'orbit'</summary>
            public int? Orbit { get; set; }

            /// <summary>Property for 'moon_of'</summary>
            public int? MoonOf { get; set; }

            /// <summary>Property for 'coordinate'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateOrbitalLineItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateOrbitalLineItem model = new GamestateOrbitalLineItem();
                model.SourceObject = obj;

                if (obj.TryGetInt("orbit", out int orbitValue) && orbitValue != null)
                    model.Orbit = orbitValue;

                if (obj.TryGetInt("moon_of", out int moonofValue) && moonofValue != null)
                    model.MoonOf = moonofValue;

                if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                    model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateOpenPlayerEventSelectionHistory
        {
            /// <summary>
            /// </summary>
            public class GamestateOpenPlayerEventSelectionHistorySelectedItem
            {
                /// <summary>Property for 'player_event'</summary>
                public int? PlayerEvent { get; set; }

                /// <summary>Property for 'human'</summary>
                public int? Human { get; set; }

                /// <summary>Property for 'option'</summary>
                public int? Option { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateOpenPlayerEventSelectionHistorySelectedItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateOpenPlayerEventSelectionHistorySelectedItem model = new GamestateOpenPlayerEventSelectionHistorySelectedItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("player_event", out int playereventValue) && playereventValue != null)
                        model.PlayerEvent = playereventValue;

                    if (obj.TryGetInt("human", out int humanValue) && humanValue != null)
                        model.Human = humanValue;

                    if (obj.TryGetInt("option", out int optionValue) && optionValue != null)
                        model.Option = optionValue;


                    return model;
                }
            }
            /// <summary>Property for 'selected'</summary>
            public List<Gamestate.GamestateOpenPlayerEventSelectionHistory.GamestateOpenPlayerEventSelectionHistorySelectedItem?>? Selected { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateOpenPlayerEventSelectionHistory? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateOpenPlayerEventSelectionHistory model = new GamestateOpenPlayerEventSelectionHistory();
                model.SourceObject = obj;

                // TODO: Bind complex type: Selected (List<Gamestate.GamestateOpenPlayerEventSelectionHistory.GamestateOpenPlayerEventSelectionHistorySelectedItem?>)
                if (obj.TryGetSaveArray("selected", out SaveArray selectedArray) && selectedArray != null)
                    model.Selected = new List<Gamestate.GamestateOpenPlayerEventSelectionHistory.GamestateOpenPlayerEventSelectionHistorySelectedItem?>(); // Initialize empty list


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateRandomNameDatabase
        {
            /// <summary>Property for 'species_modification_prefix'</summary>
            public List<string>? SpeciesModificationPrefix { get; set; }

            /// <summary>Property for 'species_modification_postfix'</summary>
            public List<string>? SpeciesModificationPostfix { get; set; }

            /// <summary>Property for 'star_names'</summary>
            public List<string>? StarNames { get; set; }

            /// <summary>Property for 'custom_star_names'</summary>
            public Dictionary<string, List<string>>? CustomStarNames { get; set; }

            /// <summary>Property for 'black_hole_names'</summary>
            public List<string>? BlackHoleNames { get; set; }

            /// <summary>Property for 'nebula_names'</summary>
            public List<string>? NebulaNames { get; set; }

            /// <summary>Property for 'asteroid_prefix'</summary>
            public List<string>? AsteroidPrefix { get; set; }

            /// <summary>Property for 'asteroid_postfix'</summary>
            public List<string>? AsteroidPostfix { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateRandomNameDatabase? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateRandomNameDatabase model = new GamestateRandomNameDatabase();
                model.SourceObject = obj;

                // TODO: Bind complex type: SpeciesModificationPrefix (List<string>)
                if (obj.TryGetSaveArray("species_modification_prefix", out SaveArray speciesmodificationprefixArray) && speciesmodificationprefixArray != null)
                    model.SpeciesModificationPrefix = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (speciesmodificationprefixArray != null)
                {
                    foreach (var item in speciesmodificationprefixArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.SpeciesModificationPrefix.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: SpeciesModificationPostfix (List<string>)
                if (obj.TryGetSaveArray("species_modification_postfix", out SaveArray speciesmodificationpostfixArray) && speciesmodificationpostfixArray != null)
                    model.SpeciesModificationPostfix = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (speciesmodificationpostfixArray != null)
                {
                    foreach (var item in speciesmodificationpostfixArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.SpeciesModificationPostfix.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: StarNames (List<string>)
                if (obj.TryGetSaveArray("star_names", out SaveArray starnamesArray) && starnamesArray != null)
                    model.StarNames = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (starnamesArray != null)
                {
                    foreach (var item in starnamesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.StarNames.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: CustomStarNames (Dictionary<string, List<string>>)
                if (obj.TryGetSaveObject("custom_star_names", out SaveObject customstarnamesDictObj) && customstarnamesDictObj != null)
                    model.CustomStarNames = new Dictionary<string, List<string>>(); // Initialize empty dictionary

                // TODO: Bind complex type: BlackHoleNames (List<string>)
                if (obj.TryGetSaveArray("black_hole_names", out SaveArray blackholenamesArray) && blackholenamesArray != null)
                    model.BlackHoleNames = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (blackholenamesArray != null)
                {
                    foreach (var item in blackholenamesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.BlackHoleNames.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: NebulaNames (List<string>)
                if (obj.TryGetSaveArray("nebula_names", out SaveArray nebulanamesArray) && nebulanamesArray != null)
                    model.NebulaNames = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (nebulanamesArray != null)
                {
                    foreach (var item in nebulanamesArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.NebulaNames.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: AsteroidPrefix (List<string>)
                if (obj.TryGetSaveArray("asteroid_prefix", out SaveArray asteroidprefixArray) && asteroidprefixArray != null)
                    model.AsteroidPrefix = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (asteroidprefixArray != null)
                {
                    foreach (var item in asteroidprefixArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.AsteroidPrefix.Add(scalarValue.Value);
                        }
                    }
                }

                // TODO: Bind complex type: AsteroidPostfix (List<string>)
                if (obj.TryGetSaveArray("asteroid_postfix", out SaveArray asteroidpostfixArray) && asteroidpostfixArray != null)
                    model.AsteroidPostfix = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (asteroidpostfixArray != null)
                {
                    foreach (var item in asteroidpostfixArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.AsteroidPostfix.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateGalaxy
        {
            /// <summary>
            /// </summary>
            public class GamestateGalaxyDesign
            {
                /// <summary>
                /// </summary>
                public class GamestateGalaxyDesignSpecies
                {
                    /// <summary>Property for 'class'</summary>
                    public string? AClass { get; set; }

                    /// <summary>Property for 'portrait'</summary>
                    public string? Portrait { get; set; }

                    /// <summary>Property for 'species_name'</summary>
                    public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? SpeciesName { get; set; }

                    /// <summary>Property for 'species_plural'</summary>
                    public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? SpeciesPlural { get; set; }

                    /// <summary>Property for 'species_adjective'</summary>
                    public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? SpeciesAdjective { get; set; }

                    /// <summary>Property for 'name_list'</summary>
                    public string? NameList { get; set; }

                    /// <summary>Property for 'gender'</summary>
                    public string? Gender { get; set; }

                    /// <summary>Property for 'trait'</summary>
                    public string? Trait { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateGalaxyDesignSpecies? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateGalaxyDesignSpecies model = new GamestateGalaxyDesignSpecies();
                        model.SourceObject = obj;

                        model.AClass = obj.TryGetString("class", out string aclassStringValue) && aclassStringValue != "none" ? aclassStringValue : null;

                        model.Portrait = obj.TryGetString("portrait", out string portraitStringValue) && portraitStringValue != "none" ? portraitStringValue : null;

                        if (obj.TryGetSaveObject("species_name", out SaveObject speciesnameNestedObj))
                            model.SpeciesName = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(speciesnameNestedObj);

                        if (obj.TryGetSaveObject("species_plural", out SaveObject speciespluralNestedObj))
                            model.SpeciesPlural = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(speciespluralNestedObj);

                        if (obj.TryGetSaveObject("species_adjective", out SaveObject speciesadjectiveNestedObj))
                            model.SpeciesAdjective = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(speciesadjectiveNestedObj);

                        model.NameList = obj.TryGetString("name_list", out string namelistStringValue) && namelistStringValue != "none" ? namelistStringValue : null;

                        model.Gender = obj.TryGetString("gender", out string genderStringValue) && genderStringValue != "none" ? genderStringValue : null;

                        model.Trait = obj.TryGetString("trait", out string traitStringValue) && traitStringValue != "none" ? traitStringValue : null;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateGalaxyDesignRuler
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateGalaxyDesignRulerName
                    {
                        /// <summary>Property for 'full_names'</summary>
                        public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? FullNames { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateGalaxyDesignRulerName? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateGalaxyDesignRulerName model = new GamestateGalaxyDesignRulerName();
                            model.SourceObject = obj;

                            if (obj.TryGetSaveObject("full_names", out SaveObject fullnamesNestedObj))
                                model.FullNames = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(fullnamesNestedObj);


                            return model;
                        }
                    }
                    /// <summary>Property for 'gender'</summary>
                    public string? Gender { get; set; }

                    /// <summary>Property for 'name'</summary>
                    public Gamestate.GamestateGalaxy.GamestateGalaxyDesign.GamestateGalaxyDesignRuler.GamestateGalaxyDesignRulerName? Name { get; set; }

                    /// <summary>Property for 'portrait'</summary>
                    public string? Portrait { get; set; }

                    /// <summary>Property for 'texture'</summary>
                    public int? Texture { get; set; }

                    /// <summary>Property for 'attachment'</summary>
                    public int? Attachment { get; set; }

                    /// <summary>Property for 'clothes'</summary>
                    public int? Clothes { get; set; }

                    /// <summary>Property for 'trait'</summary>
                    public string? Trait { get; set; }

                    /// <summary>Property for 'leader_class'</summary>
                    public string? LeaderClass { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateGalaxyDesignRuler? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateGalaxyDesignRuler model = new GamestateGalaxyDesignRuler();
                        model.SourceObject = obj;

                        model.Gender = obj.TryGetString("gender", out string genderStringValue) && genderStringValue != "none" ? genderStringValue : null;

                        if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                            model.Name = Gamestate.GamestateGalaxy.GamestateGalaxyDesign.GamestateGalaxyDesignRuler.GamestateGalaxyDesignRulerName.Bind(nameNestedObj);

                        model.Portrait = obj.TryGetString("portrait", out string portraitStringValue) && portraitStringValue != "none" ? portraitStringValue : null;

                        if (obj.TryGetInt("texture", out int textureValue) && textureValue != null)
                            model.Texture = textureValue;

                        if (obj.TryGetInt("attachment", out int attachmentValue) && attachmentValue != null)
                            model.Attachment = attachmentValue;

                        if (obj.TryGetInt("clothes", out int clothesValue) && clothesValue != null)
                            model.Clothes = clothesValue;

                        model.Trait = obj.TryGetString("trait", out string traitStringValue) && traitStringValue != "none" ? traitStringValue : null;

                        model.LeaderClass = obj.TryGetString("leader_class", out string leaderclassStringValue) && leaderclassStringValue != "none" ? leaderclassStringValue : null;


                        return model;
                    }
                }
                /// <summary>Property for 'key'</summary>
                public string? Key { get; set; }

                /// <summary>Property for 'ship_prefix'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? ShipPrefix { get; set; }

                /// <summary>Property for 'species'</summary>
                public Gamestate.GamestateGalaxy.GamestateGalaxyDesign.GamestateGalaxyDesignSpecies? Species { get; set; }

                /// <summary>Property for 'name'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

                /// <summary>Property for 'adjective'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Adjective { get; set; }

                /// <summary>Property for 'authority'</summary>
                public string? Authority { get; set; }

                /// <summary>Property for 'flags'</summary>
                public List<string>? Flags { get; set; }

                /// <summary>Property for 'government'</summary>
                public string? Government { get; set; }

                /// <summary>Property for 'planet_name'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? PlanetName { get; set; }

                /// <summary>Property for 'planet_class'</summary>
                public string? PlanetClass { get; set; }

                /// <summary>Property for 'system_name'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? SystemName { get; set; }

                /// <summary>Property for 'initializer'</summary>
                public string? Initializer { get; set; }

                /// <summary>Property for 'graphical_culture'</summary>
                public string? GraphicalCulture { get; set; }

                /// <summary>Property for 'city_graphical_culture'</summary>
                public string? CityGraphicalCulture { get; set; }

                /// <summary>Property for 'empire_flag'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemFlag? EmpireFlag { get; set; }

                /// <summary>Property for 'ruler'</summary>
                public Gamestate.GamestateGalaxy.GamestateGalaxyDesign.GamestateGalaxyDesignRuler? Ruler { get; set; }

                /// <summary>Property for 'spawn_as_fallen'</summary>
                public bool? SpawnAsFallen { get; set; }

                /// <summary>Property for 'ignore_portrait_duplication'</summary>
                public bool? IgnorePortraitDuplication { get; set; }

                /// <summary>Property for 'room'</summary>
                public string? Room { get; set; }

                /// <summary>Property for 'spawn_enabled'</summary>
                public bool? SpawnEnabled { get; set; }

                /// <summary>Property for 'ethic'</summary>
                public string? Ethic { get; set; }

                /// <summary>Property for 'civics'</summary>
                public List<string>? Civics { get; set; }

                /// <summary>Property for 'origin'</summary>
                public string? Origin { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateGalaxyDesign? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateGalaxyDesign model = new GamestateGalaxyDesign();
                    model.SourceObject = obj;

                    model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                    if (obj.TryGetSaveObject("ship_prefix", out SaveObject shipprefixNestedObj))
                        model.ShipPrefix = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(shipprefixNestedObj);

                    if (obj.TryGetSaveObject("species", out SaveObject speciesNestedObj))
                        model.Species = Gamestate.GamestateGalaxy.GamestateGalaxyDesign.GamestateGalaxyDesignSpecies.Bind(speciesNestedObj);

                    if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                        model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                    if (obj.TryGetSaveObject("adjective", out SaveObject adjectiveNestedObj))
                        model.Adjective = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(adjectiveNestedObj);

                    model.Authority = obj.TryGetString("authority", out string authorityStringValue) && authorityStringValue != "none" ? authorityStringValue : null;

                    // TODO: Bind complex type: Flags (List<string>)
                    if (obj.TryGetSaveArray("flags", out SaveArray flagsArray) && flagsArray != null)
                        model.Flags = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (flagsArray != null)
                {
                    foreach (var item in flagsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.Flags.Add(scalarValue.Value);
                        }
                    }
                }

                    model.Government = obj.TryGetString("government", out string governmentStringValue) && governmentStringValue != "none" ? governmentStringValue : null;

                    if (obj.TryGetSaveObject("planet_name", out SaveObject planetnameNestedObj))
                        model.PlanetName = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(planetnameNestedObj);

                    model.PlanetClass = obj.TryGetString("planet_class", out string planetclassStringValue) && planetclassStringValue != "none" ? planetclassStringValue : null;

                    if (obj.TryGetSaveObject("system_name", out SaveObject systemnameNestedObj))
                        model.SystemName = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(systemnameNestedObj);

                    model.Initializer = obj.TryGetString("initializer", out string initializerStringValue) && initializerStringValue != "none" ? initializerStringValue : null;

                    model.GraphicalCulture = obj.TryGetString("graphical_culture", out string graphicalcultureStringValue) && graphicalcultureStringValue != "none" ? graphicalcultureStringValue : null;

                    model.CityGraphicalCulture = obj.TryGetString("city_graphical_culture", out string citygraphicalcultureStringValue) && citygraphicalcultureStringValue != "none" ? citygraphicalcultureStringValue : null;

                    if (obj.TryGetSaveObject("empire_flag", out SaveObject empireflagNestedObj))
                        model.EmpireFlag = Gamestate.GamestateCountryItem.GamestateCountryItemFlag.Bind(empireflagNestedObj);

                    if (obj.TryGetSaveObject("ruler", out SaveObject rulerNestedObj))
                        model.Ruler = Gamestate.GamestateGalaxy.GamestateGalaxyDesign.GamestateGalaxyDesignRuler.Bind(rulerNestedObj);

                    if (obj.TryGetBool("spawn_as_fallen", out bool spawnasfallenValue) && spawnasfallenValue != null)
                        model.SpawnAsFallen = spawnasfallenValue;

                    if (obj.TryGetBool("ignore_portrait_duplication", out bool ignoreportraitduplicationValue) && ignoreportraitduplicationValue != null)
                        model.IgnorePortraitDuplication = ignoreportraitduplicationValue;

                    model.Room = obj.TryGetString("room", out string roomStringValue) && roomStringValue != "none" ? roomStringValue : null;

                    if (obj.TryGetBool("spawn_enabled", out bool spawnenabledValue) && spawnenabledValue != null)
                        model.SpawnEnabled = spawnenabledValue;

                    model.Ethic = obj.TryGetString("ethic", out string ethicStringValue) && ethicStringValue != "none" ? ethicStringValue : null;

                    // TODO: Bind complex type: Civics (List<string>)
                    if (obj.TryGetSaveArray("civics", out SaveArray civicsArray) && civicsArray != null)
                        model.Civics = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (civicsArray != null)
                {
                    foreach (var item in civicsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.Civics.Add(scalarValue.Value);
                        }
                    }
                }

                    model.Origin = obj.TryGetString("origin", out string originStringValue) && originStringValue != "none" ? originStringValue : null;


                    return model;
                }
            }
            /// <summary>Property for 'template'</summary>
            public string? Template { get; set; }

            /// <summary>Property for 'shape'</summary>
            public string? Shape { get; set; }

            /// <summary>Property for 'num_empires'</summary>
            public int? NumEmpires { get; set; }

            /// <summary>Property for 'num_advanced_empires'</summary>
            public int? NumAdvancedEmpires { get; set; }

            /// <summary>Property for 'num_fallen_empires'</summary>
            public int? NumFallenEmpires { get; set; }

            /// <summary>Property for 'num_marauder_empires'</summary>
            public int? NumMarauderEmpires { get; set; }

            /// <summary>Property for 'habitability'</summary>
            public int? Habitability { get; set; }

            /// <summary>Property for 'primitive'</summary>
            public int? Primitive { get; set; }

            /// <summary>Property for 'advanced_starts_near_player'</summary>
            public bool? AdvancedStartsNearPlayer { get; set; }

            /// <summary>Property for 'caravaneers_enabled'</summary>
            public bool? CaravaneersEnabled { get; set; }

            /// <summary>Property for 'xeno_compatibility_enabled'</summary>
            public bool? XenoCompatibilityEnabled { get; set; }

            /// <summary>Property for 'crises'</summary>
            public int? Crises { get; set; }

            /// <summary>Property for 'technology'</summary>
            public int? Technology { get; set; }

            /// <summary>Property for 'traditions'</summary>
            public int? Traditions { get; set; }

            /// <summary>Property for 'logistic_ceiling'</summary>
            public float? LogisticCeiling { get; set; }

            /// <summary>Property for 'growth_scale'</summary>
            public float? GrowthScale { get; set; }

            /// <summary>Property for 'clustered'</summary>
            public bool? Clustered { get; set; }

            /// <summary>Property for 'random_empires'</summary>
            public bool? RandomEmpires { get; set; }

            /// <summary>Property for 'random_fallen_empires'</summary>
            public bool? RandomFallenEmpires { get; set; }

            /// <summary>Property for 'random_marauder_empires'</summary>
            public bool? RandomMarauderEmpires { get; set; }

            /// <summary>Property for 'random_advanced_empires'</summary>
            public bool? RandomAdvancedEmpires { get; set; }

            /// <summary>Property for 'core_radius'</summary>
            public float? CoreRadius { get; set; }

            /// <summary>Property for 'player_locations'</summary>
            public string? PlayerLocations { get; set; }

            /// <summary>Property for 'difficulty'</summary>
            public string? Difficulty { get; set; }

            /// <summary>Property for 'aggressiveness'</summary>
            public string? Aggressiveness { get; set; }

            /// <summary>Property for 'crisis_type'</summary>
            public string? CrisisType { get; set; }

            /// <summary>Property for 'scaling'</summary>
            public string? Scaling { get; set; }

            /// <summary>Property for 'technology_difficulty_scale'</summary>
            public string? TechnologyDifficultyScale { get; set; }

            /// <summary>Property for 'lgate_enabled'</summary>
            public bool? LgateEnabled { get; set; }

            /// <summary>Property for 'name'</summary>
            public Guid? Name { get; set; }

            /// <summary>Property for 'ironman'</summary>
            public bool? Ironman { get; set; }

            /// <summary>Property for 'num_gateways'</summary>
            public int? NumGateways { get; set; }

            /// <summary>Property for 'num_wormhole_pairs'</summary>
            public int? NumWormholePairs { get; set; }

            /// <summary>Property for 'num_hyperlanes'</summary>
            public int? NumHyperlanes { get; set; }

            /// <summary>Property for 'mid_game_start'</summary>
            public int? MidGameStart { get; set; }

            /// <summary>Property for 'end_game_start'</summary>
            public int? EndGameStart { get; set; }

            /// <summary>Property for 'victory_year'</summary>
            public int? VictoryYear { get; set; }

            /// <summary>Property for 'num_guaranteed_colonies'</summary>
            public int? NumGuaranteedColonies { get; set; }

            /// <summary>Property for 'difficulty_adjusted_ai_modifiers'</summary>
            public bool? DifficultyAdjustedAiModifiers { get; set; }

            /// <summary>Property for 'cosmic_storm_early_game_spawn_chance_scale'</summary>
            public int? CosmicStormEarlyGameSpawnChanceScale { get; set; }

            /// <summary>Property for 'cosmic_storm_mid_game_spawn_chance_scale'</summary>
            public int? CosmicStormMidGameSpawnChanceScale { get; set; }

            /// <summary>Property for 'cosmic_storm_late_game_spawn_chance_scale'</summary>
            public int? CosmicStormLateGameSpawnChanceScale { get; set; }

            /// <summary>Property for 'cosmic_storm_early_game_spawn_max_cap'</summary>
            public int? CosmicStormEarlyGameSpawnMaxCap { get; set; }

            /// <summary>Property for 'cosmic_storm_mid_game_spawn_max_cap'</summary>
            public int? CosmicStormMidGameSpawnMaxCap { get; set; }

            /// <summary>Property for 'cosmic_storm_late_game_spawn_max_cap'</summary>
            public int? CosmicStormLateGameSpawnMaxCap { get; set; }

            /// <summary>Property for 'cosmic_storm_spawn_cooldown_scale'</summary>
            public int? CosmicStormSpawnCooldownScale { get; set; }

            /// <summary>Property for 'voidworms_scaling'</summary>
            public int? VoidwormsScaling { get; set; }

            /// <summary>Property for 'cutholoids_scaling'</summary>
            public int? CutholoidsScaling { get; set; }

            /// <summary>Property for 'design'</summary>
            public Gamestate.GamestateGalaxy.GamestateGalaxyDesign? Design { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateGalaxy? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateGalaxy model = new GamestateGalaxy();
                model.SourceObject = obj;

                model.Template = obj.TryGetString("template", out string templateStringValue) && templateStringValue != "none" ? templateStringValue : null;

                model.Shape = obj.TryGetString("shape", out string shapeStringValue) && shapeStringValue != "none" ? shapeStringValue : null;

                if (obj.TryGetInt("num_empires", out int numempiresValue) && numempiresValue != null)
                    model.NumEmpires = numempiresValue;

                if (obj.TryGetInt("num_advanced_empires", out int numadvancedempiresValue) && numadvancedempiresValue != null)
                    model.NumAdvancedEmpires = numadvancedempiresValue;

                if (obj.TryGetInt("num_fallen_empires", out int numfallenempiresValue) && numfallenempiresValue != null)
                    model.NumFallenEmpires = numfallenempiresValue;

                if (obj.TryGetInt("num_marauder_empires", out int nummarauderempiresValue) && nummarauderempiresValue != null)
                    model.NumMarauderEmpires = nummarauderempiresValue;

                if (obj.TryGetInt("habitability", out int habitabilityValue) && habitabilityValue != null)
                    model.Habitability = habitabilityValue;

                if (obj.TryGetInt("primitive", out int primitiveValue) && primitiveValue != null)
                    model.Primitive = primitiveValue;

                if (obj.TryGetBool("advanced_starts_near_player", out bool advancedstartsnearplayerValue) && advancedstartsnearplayerValue != null)
                    model.AdvancedStartsNearPlayer = advancedstartsnearplayerValue;

                if (obj.TryGetBool("caravaneers_enabled", out bool caravaneersenabledValue) && caravaneersenabledValue != null)
                    model.CaravaneersEnabled = caravaneersenabledValue;

                if (obj.TryGetBool("xeno_compatibility_enabled", out bool xenocompatibilityenabledValue) && xenocompatibilityenabledValue != null)
                    model.XenoCompatibilityEnabled = xenocompatibilityenabledValue;

                if (obj.TryGetInt("crises", out int crisesValue) && crisesValue != null)
                    model.Crises = crisesValue;

                if (obj.TryGetInt("technology", out int technologyValue) && technologyValue != null)
                    model.Technology = technologyValue;

                if (obj.TryGetInt("traditions", out int traditionsValue) && traditionsValue != null)
                    model.Traditions = traditionsValue;

                if (obj.TryGetFloat("logistic_ceiling", out float logisticceilingValue) && logisticceilingValue != null)
                    model.LogisticCeiling = logisticceilingValue;

                if (obj.TryGetFloat("growth_scale", out float growthscaleValue) && growthscaleValue != null)
                    model.GrowthScale = growthscaleValue;

                if (obj.TryGetBool("clustered", out bool clusteredValue) && clusteredValue != null)
                    model.Clustered = clusteredValue;

                if (obj.TryGetBool("random_empires", out bool randomempiresValue) && randomempiresValue != null)
                    model.RandomEmpires = randomempiresValue;

                if (obj.TryGetBool("random_fallen_empires", out bool randomfallenempiresValue) && randomfallenempiresValue != null)
                    model.RandomFallenEmpires = randomfallenempiresValue;

                if (obj.TryGetBool("random_marauder_empires", out bool randommarauderempiresValue) && randommarauderempiresValue != null)
                    model.RandomMarauderEmpires = randommarauderempiresValue;

                if (obj.TryGetBool("random_advanced_empires", out bool randomadvancedempiresValue) && randomadvancedempiresValue != null)
                    model.RandomAdvancedEmpires = randomadvancedempiresValue;

                if (obj.TryGetFloat("core_radius", out float coreradiusValue) && coreradiusValue != null)
                    model.CoreRadius = coreradiusValue;

                model.PlayerLocations = obj.TryGetString("player_locations", out string playerlocationsStringValue) && playerlocationsStringValue != "none" ? playerlocationsStringValue : null;

                model.Difficulty = obj.TryGetString("difficulty", out string difficultyStringValue) && difficultyStringValue != "none" ? difficultyStringValue : null;

                model.Aggressiveness = obj.TryGetString("aggressiveness", out string aggressivenessStringValue) && aggressivenessStringValue != "none" ? aggressivenessStringValue : null;

                model.CrisisType = obj.TryGetString("crisis_type", out string crisistypeStringValue) && crisistypeStringValue != "none" ? crisistypeStringValue : null;

                model.Scaling = obj.TryGetString("scaling", out string scalingStringValue) && scalingStringValue != "none" ? scalingStringValue : null;

                model.TechnologyDifficultyScale = obj.TryGetString("technology_difficulty_scale", out string technologydifficultyscaleStringValue) && technologydifficultyscaleStringValue != "none" ? technologydifficultyscaleStringValue : null;

                if (obj.TryGetBool("lgate_enabled", out bool lgateenabledValue) && lgateenabledValue != null)
                    model.LgateEnabled = lgateenabledValue;

                if (obj.TryGetGuid("name", out Guid nameValue) && nameValue != null)
                    model.Name = nameValue;

                if (obj.TryGetBool("ironman", out bool ironmanValue) && ironmanValue != null)
                    model.Ironman = ironmanValue;

                if (obj.TryGetInt("num_gateways", out int numgatewaysValue) && numgatewaysValue != null)
                    model.NumGateways = numgatewaysValue;

                if (obj.TryGetInt("num_wormhole_pairs", out int numwormholepairsValue) && numwormholepairsValue != null)
                    model.NumWormholePairs = numwormholepairsValue;

                if (obj.TryGetInt("num_hyperlanes", out int numhyperlanesValue) && numhyperlanesValue != null)
                    model.NumHyperlanes = numhyperlanesValue;

                if (obj.TryGetInt("mid_game_start", out int midgamestartValue) && midgamestartValue != null)
                    model.MidGameStart = midgamestartValue;

                if (obj.TryGetInt("end_game_start", out int endgamestartValue) && endgamestartValue != null)
                    model.EndGameStart = endgamestartValue;

                if (obj.TryGetInt("victory_year", out int victoryyearValue) && victoryyearValue != null)
                    model.VictoryYear = victoryyearValue;

                if (obj.TryGetInt("num_guaranteed_colonies", out int numguaranteedcoloniesValue) && numguaranteedcoloniesValue != null)
                    model.NumGuaranteedColonies = numguaranteedcoloniesValue;

                if (obj.TryGetBool("difficulty_adjusted_ai_modifiers", out bool difficultyadjustedaimodifiersValue) && difficultyadjustedaimodifiersValue != null)
                    model.DifficultyAdjustedAiModifiers = difficultyadjustedaimodifiersValue;

                if (obj.TryGetInt("cosmic_storm_early_game_spawn_chance_scale", out int cosmicstormearlygamespawnchancescaleValue) && cosmicstormearlygamespawnchancescaleValue != null)
                    model.CosmicStormEarlyGameSpawnChanceScale = cosmicstormearlygamespawnchancescaleValue;

                if (obj.TryGetInt("cosmic_storm_mid_game_spawn_chance_scale", out int cosmicstormmidgamespawnchancescaleValue) && cosmicstormmidgamespawnchancescaleValue != null)
                    model.CosmicStormMidGameSpawnChanceScale = cosmicstormmidgamespawnchancescaleValue;

                if (obj.TryGetInt("cosmic_storm_late_game_spawn_chance_scale", out int cosmicstormlategamespawnchancescaleValue) && cosmicstormlategamespawnchancescaleValue != null)
                    model.CosmicStormLateGameSpawnChanceScale = cosmicstormlategamespawnchancescaleValue;

                if (obj.TryGetInt("cosmic_storm_early_game_spawn_max_cap", out int cosmicstormearlygamespawnmaxcapValue) && cosmicstormearlygamespawnmaxcapValue != null)
                    model.CosmicStormEarlyGameSpawnMaxCap = cosmicstormearlygamespawnmaxcapValue;

                if (obj.TryGetInt("cosmic_storm_mid_game_spawn_max_cap", out int cosmicstormmidgamespawnmaxcapValue) && cosmicstormmidgamespawnmaxcapValue != null)
                    model.CosmicStormMidGameSpawnMaxCap = cosmicstormmidgamespawnmaxcapValue;

                if (obj.TryGetInt("cosmic_storm_late_game_spawn_max_cap", out int cosmicstormlategamespawnmaxcapValue) && cosmicstormlategamespawnmaxcapValue != null)
                    model.CosmicStormLateGameSpawnMaxCap = cosmicstormlategamespawnmaxcapValue;

                if (obj.TryGetInt("cosmic_storm_spawn_cooldown_scale", out int cosmicstormspawncooldownscaleValue) && cosmicstormspawncooldownscaleValue != null)
                    model.CosmicStormSpawnCooldownScale = cosmicstormspawncooldownscaleValue;

                if (obj.TryGetInt("voidworms_scaling", out int voidwormsscalingValue) && voidwormsscalingValue != null)
                    model.VoidwormsScaling = voidwormsscalingValue;

                if (obj.TryGetInt("cutholoids_scaling", out int cutholoidsscalingValue) && cutholoidsscalingValue != null)
                    model.CutholoidsScaling = cutholoidsscalingValue;

                if (obj.TryGetSaveObject("design", out SaveObject designNestedObj))
                    model.Design = Gamestate.GamestateGalaxy.GamestateGalaxyDesign.Bind(designNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateFlags
        {
            /// <summary>Property for 'origin_lost_colony_used'</summary>
            public int? OriginLostColonyUsed { get; set; }

            /// <summary>Property for 'origin_machine_used'</summary>
            public int? OriginMachineUsed { get; set; }

            /// <summary>Property for 'fumongus_spawned'</summary>
            public int? FumongusSpawned { get; set; }

            /// <summary>Property for 'spawn_caravaneer_2'</summary>
            public int? SpawnCaravaneer2 { get; set; }

            /// <summary>Property for 'spawn_caravaneer_3'</summary>
            public int? SpawnCaravaneer3 { get; set; }

            /// <summary>Property for 'origin_shattered_ring_used'</summary>
            public int? OriginShatteredRingUsed { get; set; }

            /// <summary>Property for 'game_started'</summary>
            public int? GameStarted { get; set; }

            /// <summary>Property for 'origin_lithoid_used'</summary>
            public int? OriginLithoidUsed { get; set; }

            /// <summary>Property for 'anomaly_ANCREL_RUBRICATOR_CAT'</summary>
            public int? AnomalyANCRELRUBRICATORCAT { get; set; }

            /// <summary>Property for 'anomaly_irregular_energy_cat'</summary>
            public int? AnomalyIrregularEnergyCat { get; set; }

            /// <summary>Property for 'asteroid_sighted_pre_ftl_global'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted? AsteroidSightedPreFtlGlobal { get; set; }

            /// <summary>Property for 'nuclear_war_pre_ftl_global'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted? NuclearWarPreFtlGlobal { get; set; }

            /// <summary>Property for 'cosmic_storm_has_occurred'</summary>
            public int? CosmicStormHasOccurred { get; set; }

            /// <summary>Property for 'seismic_disturbance_global'</summary>
            public int? SeismicDisturbanceGlobal { get; set; }

            /// <summary>Property for 'site_ice_trauma_found'</summary>
            public int? SiteIceTraumaFound { get; set; }

            /// <summary>Property for 'hivers_appeared'</summary>
            public int? HiversAppeared { get; set; }

            /// <summary>Property for 'solarpunk_discovered'</summary>
            public int? SolarpunkDiscovered { get; set; }

            /// <summary>Property for 'xenophile_leader_2'</summary>
            public int? XenophileLeader2 { get; set; }

            /// <summary>Property for 'fumongus_resolved'</summary>
            public int? FumongusResolved { get; set; }

            /// <summary>Property for 'anomaly_BARR_BASE_CAT'</summary>
            public int? AnomalyBARRBASECAT { get; set; }

            /// <summary>Property for 'fumongus_active'</summary>
            public int? FumongusActive { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateFlags? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateFlags model = new GamestateFlags();
                model.SourceObject = obj;

                if (obj.TryGetInt("origin_lost_colony_used", out int originlostcolonyusedValue) && originlostcolonyusedValue != null)
                    model.OriginLostColonyUsed = originlostcolonyusedValue;

                if (obj.TryGetInt("origin_machine_used", out int originmachineusedValue) && originmachineusedValue != null)
                    model.OriginMachineUsed = originmachineusedValue;

                if (obj.TryGetInt("fumongus_spawned", out int fumongusspawnedValue) && fumongusspawnedValue != null)
                    model.FumongusSpawned = fumongusspawnedValue;

                if (obj.TryGetInt("spawn_caravaneer_2", out int spawncaravaneer2Value) && spawncaravaneer2Value != null)
                    model.SpawnCaravaneer2 = spawncaravaneer2Value;

                if (obj.TryGetInt("spawn_caravaneer_3", out int spawncaravaneer3Value) && spawncaravaneer3Value != null)
                    model.SpawnCaravaneer3 = spawncaravaneer3Value;

                if (obj.TryGetInt("origin_shattered_ring_used", out int originshatteredringusedValue) && originshatteredringusedValue != null)
                    model.OriginShatteredRingUsed = originshatteredringusedValue;

                if (obj.TryGetInt("game_started", out int gamestartedValue) && gamestartedValue != null)
                    model.GameStarted = gamestartedValue;

                if (obj.TryGetInt("origin_lithoid_used", out int originlithoidusedValue) && originlithoidusedValue != null)
                    model.OriginLithoidUsed = originlithoidusedValue;

                if (obj.TryGetInt("anomaly_ANCREL_RUBRICATOR_CAT", out int anomalyancrelrubricatorcatValue) && anomalyancrelrubricatorcatValue != null)
                    model.AnomalyANCRELRUBRICATORCAT = anomalyancrelrubricatorcatValue;

                if (obj.TryGetInt("anomaly_irregular_energy_cat", out int anomalyirregularenergycatValue) && anomalyirregularenergycatValue != null)
                    model.AnomalyIrregularEnergyCat = anomalyirregularenergycatValue;

                if (obj.TryGetSaveObject("asteroid_sighted_pre_ftl_global", out SaveObject asteroidsightedpreftlglobalNestedObj))
                    model.AsteroidSightedPreFtlGlobal = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted.Bind(asteroidsightedpreftlglobalNestedObj);

                if (obj.TryGetSaveObject("nuclear_war_pre_ftl_global", out SaveObject nuclearwarpreftlglobalNestedObj))
                    model.NuclearWarPreFtlGlobal = Gamestate.GamestateCountryItem.GamestateCountryItemFlags.GamestateCountryItemFlagsRecentFirstContactProcessStarted.Bind(nuclearwarpreftlglobalNestedObj);

                if (obj.TryGetInt("cosmic_storm_has_occurred", out int cosmicstormhasoccurredValue) && cosmicstormhasoccurredValue != null)
                    model.CosmicStormHasOccurred = cosmicstormhasoccurredValue;

                if (obj.TryGetInt("seismic_disturbance_global", out int seismicdisturbanceglobalValue) && seismicdisturbanceglobalValue != null)
                    model.SeismicDisturbanceGlobal = seismicdisturbanceglobalValue;

                if (obj.TryGetInt("site_ice_trauma_found", out int siteicetraumafoundValue) && siteicetraumafoundValue != null)
                    model.SiteIceTraumaFound = siteicetraumafoundValue;

                if (obj.TryGetInt("hivers_appeared", out int hiversappearedValue) && hiversappearedValue != null)
                    model.HiversAppeared = hiversappearedValue;

                if (obj.TryGetInt("solarpunk_discovered", out int solarpunkdiscoveredValue) && solarpunkdiscoveredValue != null)
                    model.SolarpunkDiscovered = solarpunkdiscoveredValue;

                if (obj.TryGetInt("xenophile_leader_2", out int xenophileleader2Value) && xenophileleader2Value != null)
                    model.XenophileLeader2 = xenophileleader2Value;

                if (obj.TryGetInt("fumongus_resolved", out int fumongusresolvedValue) && fumongusresolvedValue != null)
                    model.FumongusResolved = fumongusresolvedValue;

                if (obj.TryGetInt("anomaly_BARR_BASE_CAT", out int anomalybarrbasecatValue) && anomalybarrbasecatValue != null)
                    model.AnomalyBARRBASECAT = anomalybarrbasecatValue;

                if (obj.TryGetInt("fumongus_active", out int fumongusactiveValue) && fumongusactiveValue != null)
                    model.FumongusActive = fumongusactiveValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateShipDesign
        {
            /// <summary>Property for 'none'</summary>
            public string? None { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateShipDesign? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateShipDesign model = new GamestateShipDesign();
                model.SourceObject = obj;

                model.None = obj.TryGetString("none", out string noneStringValue) && noneStringValue != "none" ? noneStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestatePopFactionsItem
        {
            /// <summary>Property for 'country'</summary>
            public int? Country { get; set; }

            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateWarItem.GamestateWarItemName? Name { get; set; }

            /// <summary>Property for 'parameters'</summary>
            public List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem?>? Parameters { get; set; }

            /// <summary>Property for 'support_percent'</summary>
            public float? SupportPercent { get; set; }

            /// <summary>Property for 'support_power'</summary>
            public int? SupportPower { get; set; }

            /// <summary>Property for 'faction_approval'</summary>
            public float? FactionApproval { get; set; }

            /// <summary>Property for 'members'</summary>
            public List<int?>? Members { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestatePopFactionsItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestatePopFactionsItem model = new GamestatePopFactionsItem();
                model.SourceObject = obj;

                if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                    model.Country = countryValue;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateWarItem.GamestateWarItemName.Bind(nameNestedObj);

                // TODO: Bind complex type: Parameters (List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem?>)
                if (obj.TryGetSaveArray("parameters", out SaveArray parametersArray) && parametersArray != null)
                    model.Parameters = new List<Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem?>(); // Initialize empty list

                if (obj.TryGetFloat("support_percent", out float supportpercentValue) && supportpercentValue != null)
                    model.SupportPercent = supportpercentValue;

                if (obj.TryGetInt("support_power", out int supportpowerValue) && supportpowerValue != null)
                    model.SupportPower = supportpowerValue;

                if (obj.TryGetFloat("faction_approval", out float factionapprovalValue) && factionapprovalValue != null)
                    model.FactionApproval = factionapprovalValue;

                // TODO: Bind complex type: Members (List<int?>)
                if (obj.TryGetSaveArray("members", out SaveArray membersArray) && membersArray != null)
                    model.Members = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (membersArray != null)
                {
                    foreach (var item in membersArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Members.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateMegastructuresItem
        {
            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'coordinate'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

            /// <summary>Property for 'owner'</summary>
            public int? Owner { get; set; }

            /// <summary>Property for 'planet'</summary>
            public long? Planet { get; set; }

            /// <summary>Property for 'orbitals'</summary>
            public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? Orbitals { get; set; }

            /// <summary>Property for 'build_queue'</summary>
            public long? BuildQueue { get; set; }

            /// <summary>Property for 'dismantle_progress'</summary>
            public int? DismantleProgress { get; set; }

            /// <summary>Property for 'dismantle_finish_date'</summary>
            public string? DismantleFinishDate { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateMegastructuresItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateMegastructuresItem model = new GamestateMegastructuresItem();
                model.SourceObject = obj;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                    model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                    model.Owner = ownerValue;

                if (obj.TryGetLong("planet", out long planetValue) && planetValue != null)
                    model.Planet = planetValue;

                if (obj.TryGetSaveObject("orbitals", out SaveObject orbitalsNestedObj))
                    model.Orbitals = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(orbitalsNestedObj);

                if (obj.TryGetLong("build_queue", out long buildqueueValue) && buildqueueValue != null)
                    model.BuildQueue = buildqueueValue;

                if (obj.TryGetInt("dismantle_progress", out int dismantleprogressValue) && dismantleprogressValue != null)
                    model.DismantleProgress = dismantleprogressValue;

                model.DismantleFinishDate = obj.TryGetString("dismantle_finish_date", out string dismantlefinishdateStringValue) && dismantlefinishdateStringValue != "none" ? dismantlefinishdateStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateBypassesItem
        {
            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'active'</summary>
            public bool? Active { get; set; }

            /// <summary>Property for 'owner'</summary>
            public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate? Owner { get; set; }

            /// <summary>Property for 'lock_country'</summary>
            public long? LockCountry { get; set; }

            /// <summary>Property for 'lock_remaining_days'</summary>
            public int? LockRemainingDays { get; set; }

            /// <summary>Property for 'is_manual_lock'</summary>
            public bool? IsManualLock { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateBypassesItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateBypassesItem model = new GamestateBypassesItem();
                model.SourceObject = obj;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetBool("active", out bool activeValue) && activeValue != null)
                    model.Active = activeValue;

                if (obj.TryGetSaveObject("owner", out SaveObject ownerNestedObj))
                    model.Owner = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate.Bind(ownerNestedObj);

                if (obj.TryGetLong("lock_country", out long lockcountryValue) && lockcountryValue != null)
                    model.LockCountry = lockcountryValue;

                if (obj.TryGetInt("lock_remaining_days", out int lockremainingdaysValue) && lockremainingdaysValue != null)
                    model.LockRemainingDays = lockremainingdaysValue;

                if (obj.TryGetBool("is_manual_lock", out bool ismanuallockValue) && ismanuallockValue != null)
                    model.IsManualLock = ismanuallockValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateNaturalWormholesItem
        {
            /// <summary>Property for 'coordinate'</summary>
            public Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate? Coordinate { get; set; }

            /// <summary>Property for 'bypass'</summary>
            public int? Bypass { get; set; }

            /// <summary>Property for 'graphics_entity_name'</summary>
            public string? GraphicsEntityName { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateNaturalWormholesItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateNaturalWormholesItem model = new GamestateNaturalWormholesItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("coordinate", out SaveObject coordinateNestedObj))
                    model.Coordinate = Gamestate.GamestatePlanets.GamestatePlanetsPlanet.GamestatePlanetsPlanetNone.GamestatePlanetsPlanetNoneCoordinate.Bind(coordinateNestedObj);

                if (obj.TryGetInt("bypass", out int bypassValue) && bypassValue != null)
                    model.Bypass = bypassValue;

                model.GraphicsEntityName = obj.TryGetString("graphics_entity_name", out string graphicsentitynameStringValue) && graphicsentitynameStringValue != "none" ? graphicsentitynameStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateTradeRoutesItem
        {
            /// <summary>
            /// </summary>
            public class GamestateTradeRoutesItemPathItem
            {
                /// <summary>Property for 'id'</summary>
                public int? Id { get; set; }

                /// <summary>Property for 'collected'</summary>
                public int? Collected { get; set; }

                /// <summary>Property for 'delivered'</summary>
                public int? Delivered { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateTradeRoutesItemPathItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateTradeRoutesItemPathItem model = new GamestateTradeRoutesItemPathItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("id", out int idValue) && idValue != null)
                        model.Id = idValue;

                    if (obj.TryGetInt("collected", out int collectedValue) && collectedValue != null)
                        model.Collected = collectedValue;

                    if (obj.TryGetInt("delivered", out int deliveredValue) && deliveredValue != null)
                        model.Delivered = deliveredValue;


                    return model;
                }
            }
            /// <summary>Property for 'owner'</summary>
            public int? Owner { get; set; }

            /// <summary>Property for 'from'</summary>
            public int? From { get; set; }

            /// <summary>Property for 'to'</summary>
            public int? To { get; set; }

            /// <summary>Property for 'delivered'</summary>
            public int? Delivered { get; set; }

            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'path'</summary>
            public List<Gamestate.GamestateTradeRoutesItem.GamestateTradeRoutesItemPathItem?>? Path { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateTradeRoutesItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateTradeRoutesItem model = new GamestateTradeRoutesItem();
                model.SourceObject = obj;

                if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                    model.Owner = ownerValue;

                if (obj.TryGetInt("from", out int fromValue) && fromValue != null)
                    model.From = fromValue;

                if (obj.TryGetInt("to", out int toValue) && toValue != null)
                    model.To = toValue;

                if (obj.TryGetInt("delivered", out int deliveredValue) && deliveredValue != null)
                    model.Delivered = deliveredValue;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                // TODO: Bind complex type: Path (List<Gamestate.GamestateTradeRoutesItem.GamestateTradeRoutesItemPathItem?>)
                if (obj.TryGetSaveArray("path", out SaveArray pathArray) && pathArray != null)
                    model.Path = new List<Gamestate.GamestateTradeRoutesItem.GamestateTradeRoutesItemPathItem?>(); // Initialize empty list


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateSectorsItem
        {
            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

            /// <summary>Property for 'systems'</summary>
            public List<int?>? Systems { get; set; }

            /// <summary>Property for 'local_capital'</summary>
            public int? LocalCapital { get; set; }

            /// <summary>Property for 'owner'</summary>
            public int? Owner { get; set; }

            /// <summary>Property for 'auto_expand'</summary>
            public bool? AutoExpand { get; set; }

            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateSectorsItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateSectorsItem model = new GamestateSectorsItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                // TODO: Bind complex type: Systems (List<int?>)
                if (obj.TryGetSaveArray("systems", out SaveArray systemsArray) && systemsArray != null)
                    model.Systems = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (systemsArray != null)
                {
                    foreach (var item in systemsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Systems.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetInt("local_capital", out int localcapitalValue) && localcapitalValue != null)
                    model.LocalCapital = localcapitalValue;

                if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                    model.Owner = ownerValue;

                if (obj.TryGetBool("auto_expand", out bool autoexpandValue) && autoexpandValue != null)
                    model.AutoExpand = autoexpandValue;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateBuildingsItem
        {
            /// <summary>Property for 'type'</summary>
            public string? AType { get; set; }

            /// <summary>Property for 'position'</summary>
            public int? Position { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateBuildingsItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateBuildingsItem model = new GamestateBuildingsItem();
                model.SourceObject = obj;

                model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                if (obj.TryGetInt("position", out int positionValue) && positionValue != null)
                    model.Position = positionValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateArchaeologicalSites
        {
            /// <summary>
            /// </summary>
            public class GamestateArchaeologicalSitesSitesItem
            {
                /// <summary>Property for 'location'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate? Location { get; set; }

                /// <summary>Property for 'last_excavator_country'</summary>
                public long? LastExcavatorCountry { get; set; }

                /// <summary>Property for 'excavator_fleet'</summary>
                public long? ExcavatorFleet { get; set; }

                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>Property for 'index'</summary>
                public int? Index { get; set; }

                /// <summary>Property for 'clues'</summary>
                public int? Clues { get; set; }

                /// <summary>Property for 'last_roll'</summary>
                public int? LastRoll { get; set; }

                /// <summary>Property for 'days_left'</summary>
                public int? DaysLeft { get; set; }

                /// <summary>Property for 'difficulty'</summary>
                public int? Difficulty { get; set; }

                /// <summary>Property for 'locked'</summary>
                public bool? Locked { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateArchaeologicalSitesSitesItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateArchaeologicalSitesSitesItem model = new GamestateArchaeologicalSitesSitesItem();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("location", out SaveObject locationNestedObj))
                        model.Location = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsSpecialProject.GamestateCountryItemEventsSpecialProjectCoordinate.Bind(locationNestedObj);

                    if (obj.TryGetLong("last_excavator_country", out long lastexcavatorcountryValue) && lastexcavatorcountryValue != null)
                        model.LastExcavatorCountry = lastexcavatorcountryValue;

                    if (obj.TryGetLong("excavator_fleet", out long excavatorfleetValue) && excavatorfleetValue != null)
                        model.ExcavatorFleet = excavatorfleetValue;

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                    if (obj.TryGetInt("index", out int indexValue) && indexValue != null)
                        model.Index = indexValue;

                    if (obj.TryGetInt("clues", out int cluesValue) && cluesValue != null)
                        model.Clues = cluesValue;

                    if (obj.TryGetInt("last_roll", out int lastrollValue) && lastrollValue != null)
                        model.LastRoll = lastrollValue;

                    if (obj.TryGetInt("days_left", out int daysleftValue) && daysleftValue != null)
                        model.DaysLeft = daysleftValue;

                    if (obj.TryGetInt("difficulty", out int difficultyValue) && difficultyValue != null)
                        model.Difficulty = difficultyValue;

                    if (obj.TryGetBool("locked", out bool lockedValue) && lockedValue != null)
                        model.Locked = lockedValue;


                    return model;
                }
            }
            /// <summary>Property for 'sites'</summary>
            public Dictionary<int, Gamestate.GamestateArchaeologicalSites.GamestateArchaeologicalSitesSitesItem?>? Sites { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateArchaeologicalSites? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateArchaeologicalSites model = new GamestateArchaeologicalSites();
                model.SourceObject = obj;

                // TODO: Bind complex type: Sites (Dictionary<int, Gamestate.GamestateArchaeologicalSites.GamestateArchaeologicalSitesSitesItem?>)
                if (obj.TryGetSaveObject("sites", out SaveObject sitesDictObj) && sitesDictObj != null)
                    model.Sites = new Dictionary<int, Gamestate.GamestateArchaeologicalSites.GamestateArchaeologicalSitesSitesItem?>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateEspionageOperations
        {
            /// <summary>
            /// </summary>
            public class GamestateEspionageOperationsOperationsItem
            {
                /// <summary>Property for 'target'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData? Target { get; set; }

                /// <summary>Property for 'spy_network'</summary>
                public int? SpyNetwork { get; set; }

                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>Property for 'index'</summary>
                public int? Index { get; set; }

                /// <summary>Property for 'last_roll'</summary>
                public int? LastRoll { get; set; }

                /// <summary>Property for 'days_left'</summary>
                public int? DaysLeft { get; set; }

                /// <summary>Property for 'difficulty'</summary>
                public int? Difficulty { get; set; }

                /// <summary>Property for 'info'</summary>
                public int? Info { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateEspionageOperationsOperationsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateEspionageOperationsOperationsItem model = new GamestateEspionageOperationsOperationsItem();
                    model.SourceObject = obj;

                    if (obj.TryGetSaveObject("target", out SaveObject targetNestedObj))
                        model.Target = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData.Bind(targetNestedObj);

                    if (obj.TryGetInt("spy_network", out int spynetworkValue) && spynetworkValue != null)
                        model.SpyNetwork = spynetworkValue;

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                    if (obj.TryGetInt("index", out int indexValue) && indexValue != null)
                        model.Index = indexValue;

                    if (obj.TryGetInt("last_roll", out int lastrollValue) && lastrollValue != null)
                        model.LastRoll = lastrollValue;

                    if (obj.TryGetInt("days_left", out int daysleftValue) && daysleftValue != null)
                        model.DaysLeft = daysleftValue;

                    if (obj.TryGetInt("difficulty", out int difficultyValue) && difficultyValue != null)
                        model.Difficulty = difficultyValue;

                    if (obj.TryGetInt("info", out int infoValue) && infoValue != null)
                        model.Info = infoValue;


                    return model;
                }
            }
            /// <summary>Property for 'operations'</summary>
            public Dictionary<int, Gamestate.GamestateEspionageOperations.GamestateEspionageOperationsOperationsItem?>? Operations { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateEspionageOperations? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateEspionageOperations model = new GamestateEspionageOperations();
                model.SourceObject = obj;

                // TODO: Bind complex type: Operations (Dictionary<int, Gamestate.GamestateEspionageOperations.GamestateEspionageOperationsOperationsItem?>)
                if (obj.TryGetSaveObject("operations", out SaveObject operationsDictObj) && operationsDictObj != null)
                    model.Operations = new Dictionary<int, Gamestate.GamestateEspionageOperations.GamestateEspionageOperationsOperationsItem?>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateAgreements
        {
            /// <summary>
            /// </summary>
            public class GamestateAgreementsAgreementsItem
            {
                /// <summary>
                /// </summary>
                public class GamestateAgreementsAgreementsItemTermData
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateAgreementsAgreementsItemTermDataDiscreteTermsItem
                    {
                        /// <summary>Property for 'key'</summary>
                        public string? Key { get; set; }

                        /// <summary>Property for 'value'</summary>
                        public string? Value { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateAgreementsAgreementsItemTermDataDiscreteTermsItem? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateAgreementsAgreementsItemTermDataDiscreteTermsItem model = new GamestateAgreementsAgreementsItemTermDataDiscreteTermsItem();
                            model.SourceObject = obj;

                            model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                            model.Value = obj.TryGetString("value", out string valueStringValue) && valueStringValue != "none" ? valueStringValue : null;


                            return model;
                        }
                    }
                    /// <summary>
                    /// </summary>
                    public class GamestateAgreementsAgreementsItemTermDataResourceTermsItem
                    {
                        /// <summary>Property for 'key'</summary>
                        public string? Key { get; set; }

                        /// <summary>Property for 'value'</summary>
                        public int? Value { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateAgreementsAgreementsItemTermDataResourceTermsItem? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateAgreementsAgreementsItemTermDataResourceTermsItem model = new GamestateAgreementsAgreementsItemTermDataResourceTermsItem();
                            model.SourceObject = obj;

                            model.Key = obj.TryGetString("key", out string keyStringValue) && keyStringValue != "none" ? keyStringValue : null;

                            if (obj.TryGetInt("value", out int valueValue) && valueValue != null)
                                model.Value = valueValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'can_subject_be_integrated'</summary>
                    public bool? CanSubjectBeIntegrated { get; set; }

                    /// <summary>Property for 'can_subject_do_diplomacy'</summary>
                    public bool? CanSubjectDoDiplomacy { get; set; }

                    /// <summary>Property for 'can_subject_vote'</summary>
                    public bool? CanSubjectVote { get; set; }

                    /// <summary>Property for 'has_cooldown_on_first_renegotiation'</summary>
                    public bool? HasCooldownOnFirstRenegotiation { get; set; }

                    /// <summary>Property for 'has_access'</summary>
                    public bool? HasAccess { get; set; }

                    /// <summary>Property for 'has_sensors'</summary>
                    public bool? HasSensors { get; set; }

                    /// <summary>Property for 'joins_overlord_wars'</summary>
                    public string? JoinsOverlordWars { get; set; }

                    /// <summary>Property for 'calls_overlord_to_war'</summary>
                    public string? CallsOverlordToWar { get; set; }

                    /// <summary>Property for 'subject_expansion_type'</summary>
                    public string? SubjectExpansionType { get; set; }

                    /// <summary>Property for 'agreement_preset'</summary>
                    public string? AgreementPreset { get; set; }

                    /// <summary>Property for 'forced_initial_loyalty'</summary>
                    public int? ForcedInitialLoyalty { get; set; }

                    /// <summary>Property for 'discrete_terms'</summary>
                    public List<Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData.GamestateAgreementsAgreementsItemTermDataDiscreteTermsItem?>? DiscreteTerms { get; set; }

                    /// <summary>Property for 'resource_terms'</summary>
                    public List<Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData.GamestateAgreementsAgreementsItemTermDataResourceTermsItem?>? ResourceTerms { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateAgreementsAgreementsItemTermData? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateAgreementsAgreementsItemTermData model = new GamestateAgreementsAgreementsItemTermData();
                        model.SourceObject = obj;

                        if (obj.TryGetBool("can_subject_be_integrated", out bool cansubjectbeintegratedValue) && cansubjectbeintegratedValue != null)
                            model.CanSubjectBeIntegrated = cansubjectbeintegratedValue;

                        if (obj.TryGetBool("can_subject_do_diplomacy", out bool cansubjectdodiplomacyValue) && cansubjectdodiplomacyValue != null)
                            model.CanSubjectDoDiplomacy = cansubjectdodiplomacyValue;

                        if (obj.TryGetBool("can_subject_vote", out bool cansubjectvoteValue) && cansubjectvoteValue != null)
                            model.CanSubjectVote = cansubjectvoteValue;

                        if (obj.TryGetBool("has_cooldown_on_first_renegotiation", out bool hascooldownonfirstrenegotiationValue) && hascooldownonfirstrenegotiationValue != null)
                            model.HasCooldownOnFirstRenegotiation = hascooldownonfirstrenegotiationValue;

                        if (obj.TryGetBool("has_access", out bool hasaccessValue) && hasaccessValue != null)
                            model.HasAccess = hasaccessValue;

                        if (obj.TryGetBool("has_sensors", out bool hassensorsValue) && hassensorsValue != null)
                            model.HasSensors = hassensorsValue;

                        model.JoinsOverlordWars = obj.TryGetString("joins_overlord_wars", out string joinsoverlordwarsStringValue) && joinsoverlordwarsStringValue != "none" ? joinsoverlordwarsStringValue : null;

                        model.CallsOverlordToWar = obj.TryGetString("calls_overlord_to_war", out string callsoverlordtowarStringValue) && callsoverlordtowarStringValue != "none" ? callsoverlordtowarStringValue : null;

                        model.SubjectExpansionType = obj.TryGetString("subject_expansion_type", out string subjectexpansiontypeStringValue) && subjectexpansiontypeStringValue != "none" ? subjectexpansiontypeStringValue : null;

                        model.AgreementPreset = obj.TryGetString("agreement_preset", out string agreementpresetStringValue) && agreementpresetStringValue != "none" ? agreementpresetStringValue : null;

                        if (obj.TryGetInt("forced_initial_loyalty", out int forcedinitialloyaltyValue) && forcedinitialloyaltyValue != null)
                            model.ForcedInitialLoyalty = forcedinitialloyaltyValue;

                        // TODO: Bind complex type: DiscreteTerms (List<Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData.GamestateAgreementsAgreementsItemTermDataDiscreteTermsItem?>)
                        if (obj.TryGetSaveArray("discrete_terms", out SaveArray discretetermsArray) && discretetermsArray != null)
                            model.DiscreteTerms = new List<Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData.GamestateAgreementsAgreementsItemTermDataDiscreteTermsItem?>(); // Initialize empty list

                        // TODO: Bind complex type: ResourceTerms (List<Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData.GamestateAgreementsAgreementsItemTermDataResourceTermsItem?>)
                        if (obj.TryGetSaveArray("resource_terms", out SaveArray resourcetermsArray) && resourcetermsArray != null)
                            model.ResourceTerms = new List<Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData.GamestateAgreementsAgreementsItemTermDataResourceTermsItem?>(); // Initialize empty list


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateAgreementsAgreementsItemSubjectSpecialization
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateAgreementsAgreementsItemSubjectSpecializationSubjectConversionProcess
                    {
                        /// <summary>Property for 'progress'</summary>
                        public int? Progress { get; set; }

                        /// <summary>Property for 'in_progress'</summary>
                        public bool? InProgress { get; set; }

                        /// <summary>Property for 'done'</summary>
                        public bool? Done { get; set; }

                        /// <summary>Property for 'ignore'</summary>
                        public bool? Ignore { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateAgreementsAgreementsItemSubjectSpecializationSubjectConversionProcess? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateAgreementsAgreementsItemSubjectSpecializationSubjectConversionProcess model = new GamestateAgreementsAgreementsItemSubjectSpecializationSubjectConversionProcess();
                            model.SourceObject = obj;

                            if (obj.TryGetInt("progress", out int progressValue) && progressValue != null)
                                model.Progress = progressValue;

                            if (obj.TryGetBool("in_progress", out bool inprogressValue) && inprogressValue != null)
                                model.InProgress = inprogressValue;

                            if (obj.TryGetBool("done", out bool doneValue) && doneValue != null)
                                model.Done = doneValue;

                            if (obj.TryGetBool("ignore", out bool ignoreValue) && ignoreValue != null)
                                model.Ignore = ignoreValue;


                            return model;
                        }
                    }
                    /// <summary>Property for 'subject_conversion_process'</summary>
                    public Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemSubjectSpecialization.GamestateAgreementsAgreementsItemSubjectSpecializationSubjectConversionProcess? SubjectConversionProcess { get; set; }

                    /// <summary>Property for 'level'</summary>
                    public int? Level { get; set; }

                    /// <summary>Property for 'experience'</summary>
                    public int? Experience { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateAgreementsAgreementsItemSubjectSpecialization? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateAgreementsAgreementsItemSubjectSpecialization model = new GamestateAgreementsAgreementsItemSubjectSpecialization();
                        model.SourceObject = obj;

                        if (obj.TryGetSaveObject("subject_conversion_process", out SaveObject subjectconversionprocessNestedObj))
                            model.SubjectConversionProcess = Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemSubjectSpecialization.GamestateAgreementsAgreementsItemSubjectSpecializationSubjectConversionProcess.Bind(subjectconversionprocessNestedObj);

                        if (obj.TryGetInt("level", out int levelValue) && levelValue != null)
                            model.Level = levelValue;

                        if (obj.TryGetInt("experience", out int experienceValue) && experienceValue != null)
                            model.Experience = experienceValue;


                        return model;
                    }
                }
                /// <summary>Property for 'owner'</summary>
                public int? Owner { get; set; }

                /// <summary>Property for 'target'</summary>
                public int? Target { get; set; }

                /// <summary>Property for 'active_status'</summary>
                public string? ActiveStatus { get; set; }

                /// <summary>Property for 'date_added'</summary>
                public DateTime? DateAdded { get; set; }

                /// <summary>Property for 'date_changed'</summary>
                public DateTime? DateChanged { get; set; }

                /// <summary>Property for 'term_data'</summary>
                public Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData? TermData { get; set; }

                /// <summary>Property for 'subject_specialization'</summary>
                public Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemSubjectSpecialization? SubjectSpecialization { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateAgreementsAgreementsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateAgreementsAgreementsItem model = new GamestateAgreementsAgreementsItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                        model.Owner = ownerValue;

                    if (obj.TryGetInt("target", out int targetValue) && targetValue != null)
                        model.Target = targetValue;

                    model.ActiveStatus = obj.TryGetString("active_status", out string activestatusStringValue) && activestatusStringValue != "none" ? activestatusStringValue : null;

                    if (obj.TryGetDateTime("date_added", out DateTime dateaddedValue) && dateaddedValue != null)
                        model.DateAdded = dateaddedValue;

                    if (obj.TryGetDateTime("date_changed", out DateTime datechangedValue) && datechangedValue != null)
                        model.DateChanged = datechangedValue;

                    if (obj.TryGetSaveObject("term_data", out SaveObject termdataNestedObj))
                        model.TermData = Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemTermData.Bind(termdataNestedObj);

                    if (obj.TryGetSaveObject("subject_specialization", out SaveObject subjectspecializationNestedObj))
                        model.SubjectSpecialization = Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem.GamestateAgreementsAgreementsItemSubjectSpecialization.Bind(subjectspecializationNestedObj);


                    return model;
                }
            }
            /// <summary>Property for 'agreements'</summary>
            public Dictionary<int, Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem?>? Agreements { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateAgreements? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateAgreements model = new GamestateAgreements();
                model.SourceObject = obj;

                // TODO: Bind complex type: Agreements (Dictionary<int, Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem?>)
                if (obj.TryGetSaveObject("agreements", out SaveObject agreementsDictObj) && agreementsDictObj != null)
                    model.Agreements = new Dictionary<int, Gamestate.GamestateAgreements.GamestateAgreementsAgreementsItem?>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateGlobalShipDesignItem
        {
            /// <summary>Property for 'name'</summary>
            public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

            /// <summary>Property for 'ship_design'</summary>
            public int? ShipDesign { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateGlobalShipDesignItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateGlobalShipDesignItem model = new GamestateGlobalShipDesignItem();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                    model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                if (obj.TryGetInt("ship_design", out int shipdesignValue) && shipdesignValue != null)
                    model.ShipDesign = shipdesignValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateClustersItem
        {
            /// <summary>
            /// </summary>
            public class GamestateClustersItemPosition
            {
                /// <summary>Property for 'x'</summary>
                public float? X { get; set; }

                /// <summary>Property for 'y'</summary>
                public int? Y { get; set; }

                /// <summary>Property for 'origin'</summary>
                public long? Origin { get; set; }

                /// <summary>Property for 'randomized'</summary>
                public bool? Randomized { get; set; }

                /// <summary>Property for 'visual_height'</summary>
                public float? VisualHeight { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateClustersItemPosition? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateClustersItemPosition model = new GamestateClustersItemPosition();
                    model.SourceObject = obj;

                    if (obj.TryGetFloat("x", out float xValue) && xValue != null)
                        model.X = xValue;

                    if (obj.TryGetInt("y", out int yValue) && yValue != null)
                        model.Y = yValue;

                    if (obj.TryGetLong("origin", out long originValue) && originValue != null)
                        model.Origin = originValue;

                    if (obj.TryGetBool("randomized", out bool randomizedValue) && randomizedValue != null)
                        model.Randomized = randomizedValue;

                    if (obj.TryGetFloat("visual_height", out float visualheightValue) && visualheightValue != null)
                        model.VisualHeight = visualheightValue;


                    return model;
                }
            }
            /// <summary>Property for 'id'</summary>
            public string? Id { get; set; }

            /// <summary>Property for 'position'</summary>
            public Gamestate.GamestateClustersItem.GamestateClustersItemPosition? Position { get; set; }

            /// <summary>Property for 'radius'</summary>
            public int? Radius { get; set; }

            /// <summary>Property for 'objects'</summary>
            public List<int?>? Objects { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateClustersItem? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateClustersItem model = new GamestateClustersItem();
                model.SourceObject = obj;

                model.Id = obj.TryGetString("id", out string idStringValue) && idStringValue != "none" ? idStringValue : null;

                if (obj.TryGetSaveObject("position", out SaveObject positionNestedObj))
                    model.Position = Gamestate.GamestateClustersItem.GamestateClustersItemPosition.Bind(positionNestedObj);

                if (obj.TryGetInt("radius", out int radiusValue) && radiusValue != null)
                    model.Radius = radiusValue;

                // TODO: Bind complex type: Objects (List<int?>)
                if (obj.TryGetSaveArray("objects", out SaveArray objectsArray) && objectsArray != null)
                    model.Objects = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (objectsArray != null)
                {
                    foreach (var item in objectsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Objects.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateUsedSpeciesNames
        {
            /// <summary>Property for 'class'</summary>
            public string? AClass { get; set; }

            /// <summary>Property for 'values'</summary>
            public List<int?>? Values { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateUsedSpeciesNames? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateUsedSpeciesNames model = new GamestateUsedSpeciesNames();
                model.SourceObject = obj;

                model.AClass = obj.TryGetString("class", out string aclassStringValue) && aclassStringValue != "none" ? aclassStringValue : null;

                // TODO: Bind complex type: Values (List<int?>)
                if (obj.TryGetSaveArray("values", out SaveArray valuesArray) && valuesArray != null)
                    model.Values = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (valuesArray != null)
                {
                    foreach (var item in valuesArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Values.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateMarket
        {
            /// <summary>
            /// </summary>
            public class GamestateMarketResourcesBought
            {
                /// <summary>Property for 'country'</summary>
                public int? Country { get; set; }

                /// <summary>Property for 'amount'</summary>
                public List<int?>? Amount { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateMarketResourcesBought? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateMarketResourcesBought model = new GamestateMarketResourcesBought();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                        model.Country = countryValue;

                    // TODO: Bind complex type: Amount (List<int?>)
                    if (obj.TryGetSaveArray("amount", out SaveArray amountArray) && amountArray != null)
                        model.Amount = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (amountArray != null)
                {
                    foreach (var item in amountArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Amount.Add(scalarValue.Value);
                        }
                    }
                }


                    return model;
                }
            }
            /// <summary>
            /// </summary>
            public class GamestateMarketInternalMarketFluctuations
            {
                /// <summary>Property for 'country'</summary>
                public int? Country { get; set; }

                /// <summary>Property for 'resources'</summary>
                public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? Resources { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateMarketInternalMarketFluctuations? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateMarketInternalMarketFluctuations model = new GamestateMarketInternalMarketFluctuations();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                        model.Country = countryValue;

                    if (obj.TryGetSaveObject("resources", out SaveObject resourcesNestedObj))
                        model.Resources = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(resourcesNestedObj);


                    return model;
                }
            }
            /// <summary>Property for 'id'</summary>
            public List<int?>? Id { get; set; }

            /// <summary>Property for 'resources_bought'</summary>
            public Gamestate.GamestateMarket.GamestateMarketResourcesBought? ResourcesBought { get; set; }

            /// <summary>Property for 'resources_sold'</summary>
            public Gamestate.GamestateMarket.GamestateMarketResourcesBought? ResourcesSold { get; set; }

            /// <summary>Property for 'internal_market_fluctuations'</summary>
            public Gamestate.GamestateMarket.GamestateMarketInternalMarketFluctuations? InternalMarketFluctuations { get; set; }

            /// <summary>Property for 'next_monthly_trade_item_id'</summary>
            public int? NextMonthlyTradeItemId { get; set; }

            /// <summary>Property for 'country'</summary>
            public long? Country { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateMarket? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateMarket model = new GamestateMarket();
                model.SourceObject = obj;

                // TODO: Bind complex type: Id (List<int?>)
                if (obj.TryGetSaveArray("id", out SaveArray idArray) && idArray != null)
                    model.Id = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (idArray != null)
                {
                    foreach (var item in idArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Id.Add(scalarValue.Value);
                        }
                    }
                }

                if (obj.TryGetSaveObject("resources_bought", out SaveObject resourcesboughtNestedObj))
                    model.ResourcesBought = Gamestate.GamestateMarket.GamestateMarketResourcesBought.Bind(resourcesboughtNestedObj);

                if (obj.TryGetSaveObject("resources_sold", out SaveObject resourcessoldNestedObj))
                    model.ResourcesSold = Gamestate.GamestateMarket.GamestateMarketResourcesBought.Bind(resourcessoldNestedObj);

                if (obj.TryGetSaveObject("internal_market_fluctuations", out SaveObject internalmarketfluctuationsNestedObj))
                    model.InternalMarketFluctuations = Gamestate.GamestateMarket.GamestateMarketInternalMarketFluctuations.Bind(internalmarketfluctuationsNestedObj);

                if (obj.TryGetInt("next_monthly_trade_item_id", out int nextmonthlytradeitemidValue) && nextmonthlytradeitemidValue != null)
                    model.NextMonthlyTradeItemId = nextmonthlytradeitemidValue;

                if (obj.TryGetLong("country", out long countryValue) && countryValue != null)
                    model.Country = countryValue;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateTradeRoutesManager
        {
            /// <summary>Property for 'trade_routes'</summary>
            public List<int?>? TradeRoutes { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateTradeRoutesManager? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateTradeRoutesManager model = new GamestateTradeRoutesManager();
                model.SourceObject = obj;

                // TODO: Bind complex type: TradeRoutes (List<int?>)
                if (obj.TryGetSaveArray("trade_routes", out SaveArray traderoutesArray) && traderoutesArray != null)
                    model.TradeRoutes = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (traderoutesArray != null)
                {
                    foreach (var item in traderoutesArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.TradeRoutes.Add(scalarValue.Value);
                        }
                    }
                }


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateGalacticCommunity
        {
            /// <summary>
            /// </summary>
            public class GamestateGalacticCommunityEmergencyFund
            {
                /// <summary>Property for 'balance'</summary>
                public int? Balance { get; set; }

                /// <summary>Property for 'contribution_rate'</summary>
                public int? ContributionRate { get; set; }

                /// <summary>Property for 'is_active'</summary>
                public bool? IsActive { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateGalacticCommunityEmergencyFund? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateGalacticCommunityEmergencyFund model = new GamestateGalacticCommunityEmergencyFund();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("balance", out int balanceValue) && balanceValue != null)
                        model.Balance = balanceValue;

                    if (obj.TryGetInt("contribution_rate", out int contributionrateValue) && contributionrateValue != null)
                        model.ContributionRate = contributionrateValue;

                    if (obj.TryGetBool("is_active", out bool isactiveValue) && isactiveValue != null)
                        model.IsActive = isactiveValue;


                    return model;
                }
            }
            /// <summary>Property for 'election'</summary>
            public int? Election { get; set; }

            /// <summary>Property for 'could_end_senate_session'</summary>
            public bool? CouldEndSenateSession { get; set; }

            /// <summary>Property for 'emergency_fund'</summary>
            public Gamestate.GamestateGalacticCommunity.GamestateGalacticCommunityEmergencyFund? EmergencyFund { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateGalacticCommunity? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateGalacticCommunity model = new GamestateGalacticCommunity();
                model.SourceObject = obj;

                if (obj.TryGetInt("election", out int electionValue) && electionValue != null)
                    model.Election = electionValue;

                if (obj.TryGetBool("could_end_senate_session", out bool couldendsenatesessionValue) && couldendsenatesessionValue != null)
                    model.CouldEndSenateSession = couldendsenatesessionValue;

                if (obj.TryGetSaveObject("emergency_fund", out SaveObject emergencyfundNestedObj))
                    model.EmergencyFund = Gamestate.GamestateGalacticCommunity.GamestateGalacticCommunityEmergencyFund.Bind(emergencyfundNestedObj);


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateFirstContacts
        {
            /// <summary>
            /// </summary>
            public class GamestateFirstContactsContactsItem
            {
                /// <summary>
                /// </summary>
                public class GamestateFirstContactsContactsItemAEvent
                {
                    /// <summary>
                    /// </summary>
                    public class GamestateFirstContactsContactsItemAEventScope
                    {
                        /// <summary>Property for 'type'</summary>
                        public string? AType { get; set; }

                        /// <summary>Property for 'id'</summary>
                        public int? Id { get; set; }

                        /// <summary>Property for 'opener_id'</summary>
                        public long? OpenerId { get; set; }

                        /// <summary>Property for 'random'</summary>
                        public List<int?>? Random { get; set; }

                        /// <summary>Property for 'random_allowed'</summary>
                        public bool? RandomAllowed { get; set; }

                        /// <summary>Property for 'root'</summary>
                        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope.GamestateCountryItemEventsEventChainScopeFrom? Root { get; set; }

                        /// <summary>Property for 'from'</summary>
                        public Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent.GamestateAstralRiftsRiftsItemAEventScope? From { get; set; }

                        /// <summary>The source SaveObject this instance was bound from</summary>
                        public SaveObject? SourceObject { get; private set; }

                        /// <summary>Binds a SaveObject to a new instance</summary>
                        public static GamestateFirstContactsContactsItemAEventScope? Bind(SaveObject? obj)
                        {
                            if (obj == null) return null;
                            GamestateFirstContactsContactsItemAEventScope model = new GamestateFirstContactsContactsItemAEventScope();
                            model.SourceObject = obj;

                            model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                            if (obj.TryGetInt("id", out int idValue) && idValue != null)
                                model.Id = idValue;

                            if (obj.TryGetLong("opener_id", out long openeridValue) && openeridValue != null)
                                model.OpenerId = openeridValue;

                            // TODO: Bind complex type: Random (List<int?>)
                            if (obj.TryGetSaveArray("random", out SaveArray randomArray) && randomArray != null)
                                model.Random = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (randomArray != null)
                {
                    foreach (var item in randomArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Random.Add(scalarValue.Value);
                        }
                    }
                }

                            if (obj.TryGetBool("random_allowed", out bool randomallowedValue) && randomallowedValue != null)
                                model.RandomAllowed = randomallowedValue;

                            if (obj.TryGetSaveObject("root", out SaveObject rootNestedObj))
                                model.Root = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsEventChain.GamestateCountryItemEventsEventChainScope.GamestateCountryItemEventsEventChainScopeFrom.Bind(rootNestedObj);

                            if (obj.TryGetSaveObject("from", out SaveObject fromNestedObj))
                                model.From = Gamestate.GamestateAstralRifts.GamestateAstralRiftsRiftsItem.GamestateAstralRiftsRiftsItemAEvent.GamestateAstralRiftsRiftsItemAEventScope.Bind(fromNestedObj);


                            return model;
                        }
                    }
                    /// <summary>Property for 'expired'</summary>
                    public bool? Expired { get; set; }

                    /// <summary>Property for 'event_id'</summary>
                    public string? EventId { get; set; }

                    /// <summary>Property for 'scope'</summary>
                    public Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemAEvent.GamestateFirstContactsContactsItemAEventScope? Scope { get; set; }

                    /// <summary>Property for 'picture'</summary>
                    public string? Picture { get; set; }

                    /// <summary>Property for 'index'</summary>
                    public int? Index { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFirstContactsContactsItemAEvent? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFirstContactsContactsItemAEvent model = new GamestateFirstContactsContactsItemAEvent();
                        model.SourceObject = obj;

                        if (obj.TryGetBool("expired", out bool expiredValue) && expiredValue != null)
                            model.Expired = expiredValue;

                        model.EventId = obj.TryGetString("event_id", out string eventidStringValue) && eventidStringValue != "none" ? eventidStringValue : null;

                        if (obj.TryGetSaveObject("scope", out SaveObject scopeNestedObj))
                            model.Scope = Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemAEvent.GamestateFirstContactsContactsItemAEventScope.Bind(scopeNestedObj);

                        model.Picture = obj.TryGetString("picture", out string pictureStringValue) && pictureStringValue != "none" ? pictureStringValue : null;

                        if (obj.TryGetInt("index", out int indexValue) && indexValue != null)
                            model.Index = indexValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateFirstContactsContactsItemFlags
                {
                    /// <summary>Property for 'enclave_first_contact'</summary>
                    public int? EnclaveFirstContact { get; set; }

                    /// <summary>Property for 'seen_aliens'</summary>
                    public int? SeenAliens { get; set; }

                    /// <summary>Property for 'fc_event_5035'</summary>
                    public int? FcEvent5035 { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFirstContactsContactsItemFlags? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFirstContactsContactsItemFlags model = new GamestateFirstContactsContactsItemFlags();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("enclave_first_contact", out int enclavefirstcontactValue) && enclavefirstcontactValue != null)
                            model.EnclaveFirstContact = enclavefirstcontactValue;

                        if (obj.TryGetInt("seen_aliens", out int seenaliensValue) && seenaliensValue != null)
                            model.SeenAliens = seenaliensValue;

                        if (obj.TryGetInt("fc_event_5035", out int fcevent5035Value) && fcevent5035Value != null)
                            model.FcEvent5035 = fcevent5035Value;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateFirstContactsContactsItemCompletedItem
                {
                    /// <summary>Property for 'date'</summary>
                    public DateTime? Date { get; set; }

                    /// <summary>Property for 'stage'</summary>
                    public string? Stage { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateFirstContactsContactsItemCompletedItem? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateFirstContactsContactsItemCompletedItem model = new GamestateFirstContactsContactsItemCompletedItem();
                        model.SourceObject = obj;

                        if (obj.TryGetDateTime("date", out DateTime dateValue) && dateValue != null)
                            model.Date = dateValue;

                        model.Stage = obj.TryGetString("stage", out string stageStringValue) && stageStringValue != "none" ? stageStringValue : null;


                        return model;
                    }
                }
                /// <summary>Property for 'owner'</summary>
                public int? Owner { get; set; }

                /// <summary>Property for 'country'</summary>
                public int? Country { get; set; }

                /// <summary>Property for 'name'</summary>
                public Gamestate.GamestateWarItem.GamestateWarItemName? Name { get; set; }

                /// <summary>Property for 'location'</summary>
                public int? Location { get; set; }

                /// <summary>Property for 'leader'</summary>
                public int? Leader { get; set; }

                /// <summary>Property for 'date'</summary>
                public DateTime? Date { get; set; }

                /// <summary>Property for 'last_roll'</summary>
                public int? LastRoll { get; set; }

                /// <summary>Property for 'days_left'</summary>
                public int? DaysLeft { get; set; }

                /// <summary>Property for 'difficulty'</summary>
                public int? Difficulty { get; set; }

                /// <summary>Property for 'clues'</summary>
                public int? Clues { get; set; }

                /// <summary>Property for 'stage'</summary>
                public string? Stage { get; set; }

                /// <summary>Property for 'status'</summary>
                public string? Status { get; set; }

                /// <summary>Property for 'event'</summary>
                public Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemAEvent? AEvent { get; set; }

                /// <summary>Property for 'events'</summary>
                public List<Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemAEvent?>? Events { get; set; }

                /// <summary>Property for 'flags'</summary>
                public Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemFlags? Flags { get; set; }

                /// <summary>Property for 'completed'</summary>
                public List<Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemCompletedItem?>? Completed { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateFirstContactsContactsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateFirstContactsContactsItem model = new GamestateFirstContactsContactsItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("owner", out int ownerValue) && ownerValue != null)
                        model.Owner = ownerValue;

                    if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                        model.Country = countryValue;

                    if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                        model.Name = Gamestate.GamestateWarItem.GamestateWarItemName.Bind(nameNestedObj);

                    if (obj.TryGetInt("location", out int locationValue) && locationValue != null)
                        model.Location = locationValue;

                    if (obj.TryGetInt("leader", out int leaderValue) && leaderValue != null)
                        model.Leader = leaderValue;

                    if (obj.TryGetDateTime("date", out DateTime dateValue) && dateValue != null)
                        model.Date = dateValue;

                    if (obj.TryGetInt("last_roll", out int lastrollValue) && lastrollValue != null)
                        model.LastRoll = lastrollValue;

                    if (obj.TryGetInt("days_left", out int daysleftValue) && daysleftValue != null)
                        model.DaysLeft = daysleftValue;

                    if (obj.TryGetInt("difficulty", out int difficultyValue) && difficultyValue != null)
                        model.Difficulty = difficultyValue;

                    if (obj.TryGetInt("clues", out int cluesValue) && cluesValue != null)
                        model.Clues = cluesValue;

                    model.Stage = obj.TryGetString("stage", out string stageStringValue) && stageStringValue != "none" ? stageStringValue : null;

                    model.Status = obj.TryGetString("status", out string statusStringValue) && statusStringValue != "none" ? statusStringValue : null;

                    if (obj.TryGetSaveObject("event", out SaveObject aeventNestedObj))
                        model.AEvent = Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemAEvent.Bind(aeventNestedObj);

                    // TODO: Bind complex type: Events (List<Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemAEvent?>)
                    if (obj.TryGetSaveArray("events", out SaveArray eventsArray) && eventsArray != null)
                        model.Events = new List<Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemAEvent?>(); // Initialize empty list

                    if (obj.TryGetSaveObject("flags", out SaveObject flagsNestedObj))
                        model.Flags = Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemFlags.Bind(flagsNestedObj);

                    // TODO: Bind complex type: Completed (List<Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemCompletedItem?>)
                    if (obj.TryGetSaveArray("completed", out SaveArray completedArray) && completedArray != null)
                        model.Completed = new List<Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem.GamestateFirstContactsContactsItemCompletedItem?>(); // Initialize empty list


                    return model;
                }
            }
            /// <summary>Property for 'contacts'</summary>
            public Dictionary<int, Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem?>? Contacts { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateFirstContacts? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateFirstContacts model = new GamestateFirstContacts();
                model.SourceObject = obj;

                // TODO: Bind complex type: Contacts (Dictionary<int, Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem?>)
                if (obj.TryGetSaveObject("contacts", out SaveObject contactsDictObj) && contactsDictObj != null)
                    model.Contacts = new Dictionary<int, Gamestate.GamestateFirstContacts.GamestateFirstContactsContactsItem?>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateSituations
        {
            /// <summary>
            /// </summary>
            public class GamestateSituationsSituationsItem
            {
                /// <summary>
                /// </summary>
                public class GamestateSituationsSituationsItemVariables
                {
                    /// <summary>Property for 'elapsed_months'</summary>
                    public int? ElapsedMonths { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateSituationsSituationsItemVariables? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateSituationsSituationsItemVariables model = new GamestateSituationsSituationsItemVariables();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("elapsed_months", out int elapsedmonthsValue) && elapsedmonthsValue != null)
                            model.ElapsedMonths = elapsedmonthsValue;


                        return model;
                    }
                }
                /// <summary>Property for 'country'</summary>
                public int? Country { get; set; }

                /// <summary>Property for 'target'</summary>
                public Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData? Target { get; set; }

                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>Property for 'progress'</summary>
                public int? Progress { get; set; }

                /// <summary>Property for 'last_month_progress'</summary>
                public int? LastMonthProgress { get; set; }

                /// <summary>Property for 'approach'</summary>
                public string? Approach { get; set; }

                /// <summary>Property for 'stage_flags'</summary>
                public List<bool?>? StageFlags { get; set; }

                /// <summary>Property for 'variables'</summary>
                public Gamestate.GamestateSituations.GamestateSituationsSituationsItem.GamestateSituationsSituationsItemVariables? Variables { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateSituationsSituationsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateSituationsSituationsItem model = new GamestateSituationsSituationsItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                        model.Country = countryValue;

                    if (obj.TryGetSaveObject("target", out SaveObject targetNestedObj))
                        model.Target = Gamestate.GamestateCountryItem.GamestateCountryItemModules.GamestateCountryItemModulesStandardPopFactionsModule.GamestateCountryItemModulesStandardPopFactionsModulePotential.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItem.GamestateCountryItemModulesStandardPopFactionsModulePotentialParametersItemData.Bind(targetNestedObj);

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                    if (obj.TryGetInt("progress", out int progressValue) && progressValue != null)
                        model.Progress = progressValue;

                    if (obj.TryGetInt("last_month_progress", out int lastmonthprogressValue) && lastmonthprogressValue != null)
                        model.LastMonthProgress = lastmonthprogressValue;

                    model.Approach = obj.TryGetString("approach", out string approachStringValue) && approachStringValue != "none" ? approachStringValue : null;

                    // TODO: Bind complex type: StageFlags (List<bool?>)
                    if (obj.TryGetSaveArray("stage_flags", out SaveArray stageflagsArray) && stageflagsArray != null)
                        model.StageFlags = new List<bool?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (stageflagsArray != null)
                {
                    foreach (var item in stageflagsArray.Items)
                    {
                        if (item is Scalar<bool> scalarValue)
                        {
                            model.StageFlags.Add(scalarValue.Value);
                        }
                    }
                }

                    if (obj.TryGetSaveObject("variables", out SaveObject variablesNestedObj))
                        model.Variables = Gamestate.GamestateSituations.GamestateSituationsSituationsItem.GamestateSituationsSituationsItemVariables.Bind(variablesNestedObj);


                    return model;
                }
            }
            /// <summary>Property for 'situations'</summary>
            public Dictionary<int, Gamestate.GamestateSituations.GamestateSituationsSituationsItem?>? Situations { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateSituations? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateSituations model = new GamestateSituations();
                model.SourceObject = obj;

                // TODO: Bind complex type: Situations (Dictionary<int, Gamestate.GamestateSituations.GamestateSituationsSituationsItem?>)
                if (obj.TryGetSaveObject("situations", out SaveObject situationsDictObj) && situationsDictObj != null)
                    model.Situations = new Dictionary<int, Gamestate.GamestateSituations.GamestateSituationsSituationsItem?>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateCouncilPositions
        {
            /// <summary>
            /// </summary>
            public class GamestateCouncilPositionsCouncilPositionsItem
            {
                /// <summary>Property for 'country'</summary>
                public int? Country { get; set; }

                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>Property for 'leader'</summary>
                public int? Leader { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateCouncilPositionsCouncilPositionsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateCouncilPositionsCouncilPositionsItem model = new GamestateCouncilPositionsCouncilPositionsItem();
                    model.SourceObject = obj;

                    if (obj.TryGetInt("country", out int countryValue) && countryValue != null)
                        model.Country = countryValue;

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                    if (obj.TryGetInt("leader", out int leaderValue) && leaderValue != null)
                        model.Leader = leaderValue;


                    return model;
                }
            }
            /// <summary>Property for 'council_positions'</summary>
            public Dictionary<int, Gamestate.GamestateCouncilPositions.GamestateCouncilPositionsCouncilPositionsItem?>? CouncilPositions { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateCouncilPositions? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateCouncilPositions model = new GamestateCouncilPositions();
                model.SourceObject = obj;

                // TODO: Bind complex type: CouncilPositions (Dictionary<int, Gamestate.GamestateCouncilPositions.GamestateCouncilPositionsCouncilPositionsItem?>)
                if (obj.TryGetSaveObject("council_positions", out SaveObject councilpositionsDictObj) && councilpositionsDictObj != null)
                    model.CouncilPositions = new Dictionary<int, Gamestate.GamestateCouncilPositions.GamestateCouncilPositionsCouncilPositionsItem?>(); // Initialize empty dictionary


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateStorms
        {
            /// <summary>
            /// </summary>
            public class GamestateStormsStormsItem
            {
                /// <summary>
                /// </summary>
                public class GamestateStormsStormsItemStormCurrentPos
                {
                    /// <summary>Property for 'x'</summary>
                    public float? X { get; set; }

                    /// <summary>Property for 'y'</summary>
                    public float? Y { get; set; }

                    /// <summary>Property for 'origin'</summary>
                    public long? Origin { get; set; }

                    /// <summary>Property for 'randomized'</summary>
                    public bool? Randomized { get; set; }

                    /// <summary>Property for 'visual_height'</summary>
                    public float? VisualHeight { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateStormsStormsItemStormCurrentPos? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateStormsStormsItemStormCurrentPos model = new GamestateStormsStormsItemStormCurrentPos();
                        model.SourceObject = obj;

                        if (obj.TryGetFloat("x", out float xValue) && xValue != null)
                            model.X = xValue;

                        if (obj.TryGetFloat("y", out float yValue) && yValue != null)
                            model.Y = yValue;

                        if (obj.TryGetLong("origin", out long originValue) && originValue != null)
                            model.Origin = originValue;

                        if (obj.TryGetBool("randomized", out bool randomizedValue) && randomizedValue != null)
                            model.Randomized = randomizedValue;

                        if (obj.TryGetFloat("visual_height", out float visualheightValue) && visualheightValue != null)
                            model.VisualHeight = visualheightValue;


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateStormsStormsItemCluster
                {
                    /// <summary>Property for 'id'</summary>
                    public string? Id { get; set; }

                    /// <summary>Property for 'position'</summary>
                    public Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemStormCurrentPos? Position { get; set; }

                    /// <summary>Property for 'radius'</summary>
                    public float? Radius { get; set; }

                    /// <summary>Property for 'objects'</summary>
                    public List<int?>? Objects { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateStormsStormsItemCluster? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateStormsStormsItemCluster model = new GamestateStormsStormsItemCluster();
                        model.SourceObject = obj;

                        model.Id = obj.TryGetString("id", out string idStringValue) && idStringValue != "none" ? idStringValue : null;

                        if (obj.TryGetSaveObject("position", out SaveObject positionNestedObj))
                            model.Position = Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemStormCurrentPos.Bind(positionNestedObj);

                        if (obj.TryGetFloat("radius", out float radiusValue) && radiusValue != null)
                            model.Radius = radiusValue;

                        // TODO: Bind complex type: Objects (List<int?>)
                        if (obj.TryGetSaveArray("objects", out SaveArray objectsArray) && objectsArray != null)
                            model.Objects = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (objectsArray != null)
                {
                    foreach (var item in objectsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Objects.Add(scalarValue.Value);
                        }
                    }
                }


                        return model;
                    }
                }
                /// <summary>
                /// </summary>
                public class GamestateStormsStormsItemFlags
                {
                    /// <summary>Property for 'first_storm_met_by_15'</summary>
                    public int? FirstStormMetBy15 { get; set; }

                    /// <summary>Property for 'first_storm_met_by_30'</summary>
                    public int? FirstStormMetBy30 { get; set; }

                    /// <summary>Property for 'first_storm_met_by_1'</summary>
                    public int? FirstStormMetBy1 { get; set; }

                    /// <summary>Property for 'first_storm_met_by_12'</summary>
                    public int? FirstStormMetBy12 { get; set; }

                    /// <summary>Property for 'first_storm_met_by_11'</summary>
                    public int? FirstStormMetBy11 { get; set; }

                    /// <summary>The source SaveObject this instance was bound from</summary>
                    public SaveObject? SourceObject { get; private set; }

                    /// <summary>Binds a SaveObject to a new instance</summary>
                    public static GamestateStormsStormsItemFlags? Bind(SaveObject? obj)
                    {
                        if (obj == null) return null;
                        GamestateStormsStormsItemFlags model = new GamestateStormsStormsItemFlags();
                        model.SourceObject = obj;

                        if (obj.TryGetInt("first_storm_met_by_15", out int firststormmetby15Value) && firststormmetby15Value != null)
                            model.FirstStormMetBy15 = firststormmetby15Value;

                        if (obj.TryGetInt("first_storm_met_by_30", out int firststormmetby30Value) && firststormmetby30Value != null)
                            model.FirstStormMetBy30 = firststormmetby30Value;

                        if (obj.TryGetInt("first_storm_met_by_1", out int firststormmetby1Value) && firststormmetby1Value != null)
                            model.FirstStormMetBy1 = firststormmetby1Value;

                        if (obj.TryGetInt("first_storm_met_by_12", out int firststormmetby12Value) && firststormmetby12Value != null)
                            model.FirstStormMetBy12 = firststormmetby12Value;

                        if (obj.TryGetInt("first_storm_met_by_11", out int firststormmetby11Value) && firststormmetby11Value != null)
                            model.FirstStormMetBy11 = firststormmetby11Value;


                        return model;
                    }
                }
                /// <summary>Property for 'type'</summary>
                public string? AType { get; set; }

                /// <summary>Property for 'cosmic_storm_start_position'</summary>
                public Gamestate.GamestateNebula.GamestateNebulaCoordinate? CosmicStormStartPosition { get; set; }

                /// <summary>Property for 'storm_current_pos'</summary>
                public Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemStormCurrentPos? StormCurrentPos { get; set; }

                /// <summary>Property for 'storm_target_pos'</summary>
                public Gamestate.GamestateNebula.GamestateNebulaCoordinate? StormTargetPos { get; set; }

                /// <summary>Property for 'storm_current_path_index'</summary>
                public int? StormCurrentPathIndex { get; set; }

                /// <summary>Property for 'color'</summary>
                public List<float?>? Color { get; set; }

                /// <summary>Property for 'storm_min_radius'</summary>
                public int? StormMinRadius { get; set; }

                /// <summary>Property for 'storm_max_radius'</summary>
                public int? StormMaxRadius { get; set; }

                /// <summary>Property for 'storm_activation_period_in_months'</summary>
                public int? StormActivationPeriodInMonths { get; set; }

                /// <summary>Property for 'storm_monthly_added_devastation'</summary>
                public float? StormMonthlyAddedDevastation { get; set; }

                /// <summary>Property for 'counter'</summary>
                public int? Counter { get; set; }

                /// <summary>Property for 'cluster'</summary>
                public Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemCluster? Cluster { get; set; }

                /// <summary>Property for 'speed'</summary>
                public float? Speed { get; set; }

                /// <summary>Property for 'allow_storm_movement'</summary>
                public bool? AllowStormMovement { get; set; }

                /// <summary>Property for 'name'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Name { get; set; }

                /// <summary>Property for 'prefix'</summary>
                public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? Prefix { get; set; }

                /// <summary>Property for 'storm_age'</summary>
                public int? StormAge { get; set; }

                /// <summary>Property for 'storm_daily_move_index'</summary>
                public int? StormDailyMoveIndex { get; set; }

                /// <summary>Property for 'storm_micro_move_index'</summary>
                public int? StormMicroMoveIndex { get; set; }

                /// <summary>Property for 'storm_days_till_next_system'</summary>
                public int? StormDaysTillNextSystem { get; set; }

                /// <summary>Property for 'length'</summary>
                public int? Length { get; set; }

                /// <summary>Property for 'distance'</summary>
                public float? Distance { get; set; }

                /// <summary>Property for 'multiplier'</summary>
                public int? Multiplier { get; set; }

                /// <summary>Property for 'path'</summary>
                public List<int?>? Path { get; set; }

                /// <summary>Property for 'affected_country_ids'</summary>
                public List<int?>? AffectedCountryIds { get; set; }

                /// <summary>Property for 'hash'</summary>
                public int? Hash { get; set; }

                /// <summary>Property for 'flags'</summary>
                public Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemFlags? Flags { get; set; }

                /// <summary>The source SaveObject this instance was bound from</summary>
                public SaveObject? SourceObject { get; private set; }

                /// <summary>Binds a SaveObject to a new instance</summary>
                public static GamestateStormsStormsItem? Bind(SaveObject? obj)
                {
                    if (obj == null) return null;
                    GamestateStormsStormsItem model = new GamestateStormsStormsItem();
                    model.SourceObject = obj;

                    model.AType = obj.TryGetString("type", out string atypeStringValue) && atypeStringValue != "none" ? atypeStringValue : null;

                    if (obj.TryGetSaveObject("cosmic_storm_start_position", out SaveObject cosmicstormstartpositionNestedObj))
                        model.CosmicStormStartPosition = Gamestate.GamestateNebula.GamestateNebulaCoordinate.Bind(cosmicstormstartpositionNestedObj);

                    if (obj.TryGetSaveObject("storm_current_pos", out SaveObject stormcurrentposNestedObj))
                        model.StormCurrentPos = Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemStormCurrentPos.Bind(stormcurrentposNestedObj);

                    if (obj.TryGetSaveObject("storm_target_pos", out SaveObject stormtargetposNestedObj))
                        model.StormTargetPos = Gamestate.GamestateNebula.GamestateNebulaCoordinate.Bind(stormtargetposNestedObj);

                    if (obj.TryGetInt("storm_current_path_index", out int stormcurrentpathindexValue) && stormcurrentpathindexValue != null)
                        model.StormCurrentPathIndex = stormcurrentpathindexValue;

                    // TODO: Bind complex type: Color (List<float?>)
                    if (obj.TryGetSaveArray("color", out SaveArray colorArray) && colorArray != null)
                        model.Color = new List<float?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (colorArray != null)
                {
                    foreach (var item in colorArray.Items)
                    {
                        if (item is Scalar<float> scalarValue)
                        {
                            model.Color.Add(scalarValue.Value);
                        }
                    }
                }

                    if (obj.TryGetInt("storm_min_radius", out int stormminradiusValue) && stormminradiusValue != null)
                        model.StormMinRadius = stormminradiusValue;

                    if (obj.TryGetInt("storm_max_radius", out int stormmaxradiusValue) && stormmaxradiusValue != null)
                        model.StormMaxRadius = stormmaxradiusValue;

                    if (obj.TryGetInt("storm_activation_period_in_months", out int stormactivationperiodinmonthsValue) && stormactivationperiodinmonthsValue != null)
                        model.StormActivationPeriodInMonths = stormactivationperiodinmonthsValue;

                    if (obj.TryGetFloat("storm_monthly_added_devastation", out float stormmonthlyaddeddevastationValue) && stormmonthlyaddeddevastationValue != null)
                        model.StormMonthlyAddedDevastation = stormmonthlyaddeddevastationValue;

                    if (obj.TryGetInt("counter", out int counterValue) && counterValue != null)
                        model.Counter = counterValue;

                    if (obj.TryGetSaveObject("cluster", out SaveObject clusterNestedObj))
                        model.Cluster = Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemCluster.Bind(clusterNestedObj);

                    if (obj.TryGetFloat("speed", out float speedValue) && speedValue != null)
                        model.Speed = speedValue;

                    if (obj.TryGetBool("allow_storm_movement", out bool allowstormmovementValue) && allowstormmovementValue != null)
                        model.AllowStormMovement = allowstormmovementValue;

                    if (obj.TryGetSaveObject("name", out SaveObject nameNestedObj))
                        model.Name = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(nameNestedObj);

                    if (obj.TryGetSaveObject("prefix", out SaveObject prefixNestedObj))
                        model.Prefix = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(prefixNestedObj);

                    if (obj.TryGetInt("storm_age", out int stormageValue) && stormageValue != null)
                        model.StormAge = stormageValue;

                    if (obj.TryGetInt("storm_daily_move_index", out int stormdailymoveindexValue) && stormdailymoveindexValue != null)
                        model.StormDailyMoveIndex = stormdailymoveindexValue;

                    if (obj.TryGetInt("storm_micro_move_index", out int stormmicromoveindexValue) && stormmicromoveindexValue != null)
                        model.StormMicroMoveIndex = stormmicromoveindexValue;

                    if (obj.TryGetInt("storm_days_till_next_system", out int stormdaystillnextsystemValue) && stormdaystillnextsystemValue != null)
                        model.StormDaysTillNextSystem = stormdaystillnextsystemValue;

                    if (obj.TryGetInt("length", out int lengthValue) && lengthValue != null)
                        model.Length = lengthValue;

                    if (obj.TryGetFloat("distance", out float distanceValue) && distanceValue != null)
                        model.Distance = distanceValue;

                    if (obj.TryGetInt("multiplier", out int multiplierValue) && multiplierValue != null)
                        model.Multiplier = multiplierValue;

                    // TODO: Bind complex type: Path (List<int?>)
                    if (obj.TryGetSaveArray("path", out SaveArray pathArray) && pathArray != null)
                        model.Path = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (pathArray != null)
                {
                    foreach (var item in pathArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Path.Add(scalarValue.Value);
                        }
                    }
                }

                    // TODO: Bind complex type: AffectedCountryIds (List<int?>)
                    if (obj.TryGetSaveArray("affected_country_ids", out SaveArray affectedcountryidsArray) && affectedcountryidsArray != null)
                        model.AffectedCountryIds = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (affectedcountryidsArray != null)
                {
                    foreach (var item in affectedcountryidsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.AffectedCountryIds.Add(scalarValue.Value);
                        }
                    }
                }

                    if (obj.TryGetInt("hash", out int hashValue) && hashValue != null)
                        model.Hash = hashValue;

                    if (obj.TryGetSaveObject("flags", out SaveObject flagsNestedObj))
                        model.Flags = Gamestate.GamestateStorms.GamestateStormsStormsItem.GamestateStormsStormsItemFlags.Bind(flagsNestedObj);


                    return model;
                }
            }
            /// <summary>Property for 'storms'</summary>
            public Dictionary<int, Gamestate.GamestateStorms.GamestateStormsStormsItem?>? Storms { get; set; }

            /// <summary>Property for 'cosmic_storm_name_list_name'</summary>
            public string? CosmicStormNameListName { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateStorms? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateStorms model = new GamestateStorms();
                model.SourceObject = obj;

                // TODO: Bind complex type: Storms (Dictionary<int, Gamestate.GamestateStorms.GamestateStormsStormsItem?>)
                if (obj.TryGetSaveObject("storms", out SaveObject stormsDictObj) && stormsDictObj != null)
                    model.Storms = new Dictionary<int, Gamestate.GamestateStorms.GamestateStormsStormsItem?>(); // Initialize empty dictionary

                model.CosmicStormNameListName = obj.TryGetString("cosmic_storm_name_list_name", out string cosmicstormnamelistnameStringValue) && cosmicstormnamelistnameStringValue != "none" ? cosmicstormnamelistnameStringValue : null;


                return model;
            }
        }
        /// <summary>
        /// </summary>
        public class GamestateStormInfluenceFields
        {
            /// <summary>Property for 'storm_influence_fields'</summary>
            public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? StormInfluenceFields { get; set; }

            /// <summary>The source SaveObject this instance was bound from</summary>
            public SaveObject? SourceObject { get; private set; }

            /// <summary>Binds a SaveObject to a new instance</summary>
            public static GamestateStormInfluenceFields? Bind(SaveObject? obj)
            {
                if (obj == null) return null;
                GamestateStormInfluenceFields model = new GamestateStormInfluenceFields();
                model.SourceObject = obj;

                if (obj.TryGetSaveObject("storm_influence_fields", out SaveObject storminfluencefieldsNestedObj))
                    model.StormInfluenceFields = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(storminfluencefieldsNestedObj);


                return model;
            }
        }

        /// <summary>
        /// Gets the original SaveObject this instance was bound from.
        /// </summary>
        public SaveObject? SourceObject { get; private set; }

        /// <summary>
        /// Property for 'version'
        /// </summary>
        public string? AVersion { get; set; }

        /// <summary>
        /// Property for 'version_control_revision'
        /// </summary>
        public int? VersionControlRevision { get; set; }

        /// <summary>
        /// Property for 'name'
        /// </summary>
        public string? Name { get; set; }

        /// <summary>
        /// Property for 'date'
        /// </summary>
        public DateTime? Date { get; set; }

        /// <summary>
        /// Property for 'required_dlcs'
        /// </summary>
        public List<string>? RequiredDlcs { get; set; }

        /// <summary>
        /// Property for 'player'
        /// </summary>
        public List<Gamestate.GamestatePlayerItem?>? Player { get; set; }

        /// <summary>
        /// Property for 'tick'
        /// </summary>
        public int? Tick { get; set; }

        /// <summary>
        /// Property for 'date_distortion'
        /// </summary>
        public bool? DateDistortion { get; set; }

        /// <summary>
        /// Property for 'random_log_day'
        /// </summary>
        public int? RandomLogDay { get; set; }

        /// <summary>
        /// Property for 'species_db'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateSpeciesDbItem?>? SpeciesDb { get; set; }

        /// <summary>
        /// Property for 'dummy_species'
        /// </summary>
        public int? DummySpecies { get; set; }

        /// <summary>
        /// Property for 'spy_networks'
        /// </summary>
        public Gamestate.GamestateSpyNetworks? SpyNetworks { get; set; }

        /// <summary>
        /// Property for 'espionage_assets'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateEspionageAssetsItem?>? EspionageAssets { get; set; }

        /// <summary>
        /// Property for 'vivarium_critters'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateVivariumCrittersItem?>? VivariumCritters { get; set; }

        /// <summary>
        /// Property for 'exhibits'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateExhibitsItem?>? Exhibits { get; set; }

        /// <summary>
        /// Property for 'last_created_species_ref'
        /// </summary>
        public int? LastCreatedSpeciesRef { get; set; }

        /// <summary>
        /// Property for 'nebula'
        /// </summary>
        public Gamestate.GamestateNebula? Nebula { get; set; }

        /// <summary>
        /// Property for 'pop'
        /// </summary>
        public Dictionary<int, Gamestate.GamestatePopItem?>? Pop { get; set; }

        /// <summary>
        /// Property for 'last_created_pop'
        /// </summary>
        public int? LastCreatedPop { get; set; }

        /// <summary>
        /// Property for 'galactic_object'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateGalacticObjectItem?>? GalacticObject { get; set; }

        /// <summary>
        /// Property for 'starbase_mgr'
        /// </summary>
        public Gamestate.GamestateStarbaseMgr? StarbaseMgr { get; set; }

        /// <summary>
        /// Property for 'planets'
        /// </summary>
        public Gamestate.GamestatePlanets? Planets { get; set; }

        /// <summary>
        /// Property for 'astral_rifts'
        /// </summary>
        public Gamestate.GamestateAstralRifts? AstralRifts { get; set; }

        /// <summary>
        /// Property for 'country'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateCountryItem?>? Country { get; set; }

        /// <summary>
        /// Property for 'construction'
        /// </summary>
        public Gamestate.GamestateConstruction? Construction { get; set; }

        /// <summary>
        /// Property for 'federation'
        /// </summary>
        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? Federation { get; set; }

        /// <summary>
        /// Property for 'truce'
        /// </summary>
        public Gamestate.GamestateTruce? Truce { get; set; }

        /// <summary>
        /// Property for 'trade_deal'
        /// </summary>
        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? TradeDeal { get; set; }

        /// <summary>
        /// Property for 'last_created_country'
        /// </summary>
        public int? LastCreatedCountry { get; set; }

        /// <summary>
        /// Property for 'last_refugee_country'
        /// </summary>
        public int? LastRefugeeCountry { get; set; }

        /// <summary>
        /// Property for 'last_created_system'
        /// </summary>
        public int? LastCreatedSystem { get; set; }

        /// <summary>
        /// Property for 'leaders'
        /// </summary>
        public Gamestate.GamestateLeaders? Leaders { get; set; }

        /// <summary>
        /// Property for 'system_initializer_counter'
        /// </summary>
        public Gamestate.GamestateSystemInitializerCounter? SystemInitializerCounter { get; set; }

        /// <summary>
        /// Property for 'saved_leaders'
        /// </summary>
        public Gamestate.GamestateSavedLeaders? SavedLeaders { get; set; }

        /// <summary>
        /// Property for 'ships'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateShipsItem?>? Ships { get; set; }

        /// <summary>
        /// Property for 'fleet'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateFleetItem?>? Fleet { get; set; }

        /// <summary>
        /// Property for 'fleet_template'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateFleetTemplateItem?>? FleetTemplate { get; set; }

        /// <summary>
        /// Property for 'last_created_fleet'
        /// </summary>
        public int? LastCreatedFleet { get; set; }

        /// <summary>
        /// Property for 'last_created_ship'
        /// </summary>
        public int? LastCreatedShip { get; set; }

        /// <summary>
        /// Property for 'last_created_leader'
        /// </summary>
        public int? LastCreatedLeader { get; set; }

        /// <summary>
        /// Property for 'last_created_army'
        /// </summary>
        public int? LastCreatedArmy { get; set; }

        /// <summary>
        /// Property for 'last_created_design'
        /// </summary>
        public int? LastCreatedDesign { get; set; }

        /// <summary>
        /// Property for 'army'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateArmyItem?>? Army { get; set; }

        /// <summary>
        /// Property for 'deposit'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateDepositItem?>? Deposit { get; set; }

        /// <summary>
        /// Property for 'ground_combat'
        /// </summary>
        public Dictionary<int, string>? GroundCombat { get; set; }

        /// <summary>
        /// Property for 'fired_event_ids'
        /// </summary>
        public List<string>? FiredEventIds { get; set; }

        /// <summary>
        /// Property for 'war'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateWarItem?>? War { get; set; }

        /// <summary>
        /// Property for 'debris'
        /// </summary>
        public Gamestate.GamestateTruce? Debris { get; set; }

        /// <summary>
        /// Property for 'missile'
        /// </summary>
        public Dictionary<long, string>? Missile { get; set; }

        /// <summary>
        /// Property for 'strike_craft'
        /// </summary>
        public Gamestate.GamestateStrikeCraft? StrikeCraft { get; set; }

        /// <summary>
        /// Property for 'ambient_object'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateAmbientObjectItem?>? AmbientObject { get; set; }

        /// <summary>
        /// Property for 'orbital_line'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateOrbitalLineItem?>? OrbitalLine { get; set; }

        /// <summary>
        /// Property for 'last_created_ambient_object'
        /// </summary>
        public int? LastCreatedAmbientObject { get; set; }

        /// <summary>
        /// Property for 'last_created_cosmic_storm'
        /// </summary>
        public int? LastCreatedCosmicStorm { get; set; }

        /// <summary>
        /// Property for 'last_diplo_action_id'
        /// </summary>
        public int? LastDiploActionId { get; set; }

        /// <summary>
        /// Property for 'last_notification_id'
        /// </summary>
        public int? LastNotificationId { get; set; }

        /// <summary>
        /// Property for 'last_event_id'
        /// </summary>
        public int? LastEventId { get; set; }

        /// <summary>
        /// Property for 'open_player_event_selection_history'
        /// </summary>
        public Gamestate.GamestateOpenPlayerEventSelectionHistory? OpenPlayerEventSelectionHistory { get; set; }

        /// <summary>
        /// Property for 'random_name_database'
        /// </summary>
        public Gamestate.GamestateRandomNameDatabase? RandomNameDatabase { get; set; }

        /// <summary>
        /// Property for 'name_list'
        /// </summary>
        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? NameList { get; set; }

        /// <summary>
        /// Property for 'galaxy'
        /// </summary>
        public Gamestate.GamestateGalaxy? Galaxy { get; set; }

        /// <summary>
        /// Property for 'galaxy_radius'
        /// </summary>
        public float? GalaxyRadius { get; set; }

        /// <summary>
        /// Property for 'flags'
        /// </summary>
        public Gamestate.GamestateFlags? Flags { get; set; }

        /// <summary>
        /// Property for 'saved_event_target'
        /// </summary>
        public Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget? SavedEventTarget { get; set; }

        /// <summary>
        /// Property for 'ship_design'
        /// </summary>
        public Gamestate.GamestateShipDesign? ShipDesign { get; set; }

        /// <summary>
        /// Property for 'pop_factions'
        /// </summary>
        public Dictionary<int, Gamestate.GamestatePopFactionsItem?>? PopFactions { get; set; }

        /// <summary>
        /// Property for 'last_created_pop_faction'
        /// </summary>
        public int? LastCreatedPopFaction { get; set; }

        /// <summary>
        /// Property for 'last_killed_country_name'
        /// </summary>
        public Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName? LastKilledCountryName { get; set; }

        /// <summary>
        /// Property for 'megastructures'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateMegastructuresItem?>? Megastructures { get; set; }

        /// <summary>
        /// Property for 'bypasses'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateBypassesItem?>? Bypasses { get; set; }

        /// <summary>
        /// Property for 'natural_wormholes'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateNaturalWormholesItem?>? NaturalWormholes { get; set; }

        /// <summary>
        /// Property for 'trade_routes'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateTradeRoutesItem?>? TradeRoutes { get; set; }

        /// <summary>
        /// Property for 'sectors'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateSectorsItem?>? Sectors { get; set; }

        /// <summary>
        /// Property for 'buildings'
        /// </summary>
        public Dictionary<int, Gamestate.GamestateBuildingsItem?>? Buildings { get; set; }

        /// <summary>
        /// Property for 'archaeological_sites'
        /// </summary>
        public Gamestate.GamestateArchaeologicalSites? ArchaeologicalSites { get; set; }

        /// <summary>
        /// Property for 'espionage_operations'
        /// </summary>
        public Gamestate.GamestateEspionageOperations? EspionageOperations { get; set; }

        /// <summary>
        /// Property for 'agreements'
        /// </summary>
        public Gamestate.GamestateAgreements? Agreements { get; set; }

        /// <summary>
        /// Property for 'global_ship_design'
        /// </summary>
        public List<Gamestate.GamestateGlobalShipDesignItem?>? GlobalShipDesign { get; set; }

        /// <summary>
        /// Property for 'achievement'
        /// </summary>
        public List<int?>? Achievement { get; set; }

        /// <summary>
        /// Property for 'clusters'
        /// </summary>
        public List<Gamestate.GamestateClustersItem?>? Clusters { get; set; }

        /// <summary>
        /// Property for 'rim_galactic_objects'
        /// </summary>
        public List<int?>? RimGalacticObjects { get; set; }

        /// <summary>
        /// Property for 'additional_crisis_strength'
        /// </summary>
        public int? AdditionalCrisisStrength { get; set; }

        /// <summary>
        /// Property for 'used_color'
        /// </summary>
        public string? UsedColor { get; set; }

        /// <summary>
        /// Property for 'used_symbols'
        /// </summary>
        public List<int?>? UsedSymbols { get; set; }

        /// <summary>
        /// Property for 'used_species_names'
        /// </summary>
        public Gamestate.GamestateUsedSpeciesNames? UsedSpeciesNames { get; set; }

        /// <summary>
        /// Property for 'used_species_portrait'
        /// </summary>
        public Gamestate.GamestateUsedSpeciesNames? UsedSpeciesPortrait { get; set; }

        /// <summary>
        /// Property for 'random_seed'
        /// </summary>
        public int? RandomSeed { get; set; }

        /// <summary>
        /// Property for 'random_count'
        /// </summary>
        public int? RandomCount { get; set; }

        /// <summary>
        /// Property for 'market'
        /// </summary>
        public Gamestate.GamestateMarket? Market { get; set; }

        /// <summary>
        /// Property for 'trade_routes_manager'
        /// </summary>
        public Gamestate.GamestateTradeRoutesManager? TradeRoutesManager { get; set; }

        /// <summary>
        /// Property for 'slave_market_manager'
        /// </summary>
        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? SlaveMarketManager { get; set; }

        /// <summary>
        /// Property for 'galactic_community'
        /// </summary>
        public Gamestate.GamestateGalacticCommunity? GalacticCommunity { get; set; }

        /// <summary>
        /// Property for 'first_contacts'
        /// </summary>
        public Gamestate.GamestateFirstContacts? FirstContacts { get; set; }

        /// <summary>
        /// Property for 'situations'
        /// </summary>
        public Gamestate.GamestateSituations? Situations { get; set; }

        /// <summary>
        /// Property for 'council_positions'
        /// </summary>
        public Gamestate.GamestateCouncilPositions? CouncilPositions { get; set; }

        /// <summary>
        /// Property for 'automation_resources'
        /// </summary>
        public Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits? AutomationResources { get; set; }

        /// <summary>
        /// Property for 'storms'
        /// </summary>
        public Gamestate.GamestateStorms? Storms { get; set; }

        /// <summary>
        /// Property for 'storm_influence_fields'
        /// </summary>
        public Gamestate.GamestateStormInfluenceFields? StormInfluenceFields { get; set; }

        /// <summary>
        /// Property for 'show_politics_tab'
        /// </summary>
        public bool? ShowPoliticsTab { get; set; }

        /// <summary>
        /// Binds a SaveObject to a new instance of this partial class.
        /// </summary>
        /// <param name="obj">The SaveObject to bind. Can be null.</param>
        /// <returns>A new instance or null if input is null.</returns>
        public static Gamestate? Bind(SaveObject? obj)
        {
            if (obj == null) return null;

            Gamestate model = new Gamestate();
            model.SourceObject = obj; // Store reference to source object

            model.AVersion = obj.TryGetString("version", out string aversionStringValue) && aversionStringValue != "none" ? aversionStringValue : null;

            if (obj.TryGetInt("version_control_revision", out int versioncontrolrevisionValue))
                model.VersionControlRevision = versioncontrolrevisionValue;

            model.Name = obj.TryGetString("name", out string nameStringValue) && nameStringValue != "none" ? nameStringValue : null;

            if (obj.TryGetDateTime("date", out DateTime dateValue))
                model.Date = dateValue;

            // TODO: Bind complex type: RequiredDlcs (List<string>)
            if (obj.TryGetSaveArray("required_dlcs", out SaveArray requireddlcsArray) && requireddlcsArray != null)
                model.RequiredDlcs = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (requireddlcsArray != null)
                {
                    foreach (var item in requireddlcsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.RequiredDlcs.Add(scalarValue.Value);
                        }
                    }
                }

            // TODO: Bind complex type: Player (List<Gamestate.GamestatePlayerItem?>)
            if (obj.TryGetSaveArray("player", out SaveArray playerArray) && playerArray != null)
                model.Player = new List<Gamestate.GamestatePlayerItem?>(); // Initialize empty list

            if (obj.TryGetInt("tick", out int tickValue))
                model.Tick = tickValue;

            if (obj.TryGetBool("date_distortion", out bool datedistortionValue))
                model.DateDistortion = datedistortionValue;

            if (obj.TryGetInt("random_log_day", out int randomlogdayValue))
                model.RandomLogDay = randomlogdayValue;

            // TODO: Bind complex type: SpeciesDb (Dictionary<int, Gamestate.GamestateSpeciesDbItem?>)
            if (obj.TryGetSaveObject("species_db", out SaveObject speciesdbDictObj) && speciesdbDictObj != null)
                model.SpeciesDb = new Dictionary<int, Gamestate.GamestateSpeciesDbItem?>(); // Initialize empty dictionary

            if (obj.TryGetInt("dummy_species", out int dummyspeciesValue))
                model.DummySpecies = dummyspeciesValue;

            if (obj.TryGetSaveObject("spy_networks", out SaveObject spynetworksNestedObj))
                model.SpyNetworks = Gamestate.GamestateSpyNetworks.Bind(spynetworksNestedObj);

            // TODO: Bind complex type: EspionageAssets (Dictionary<int, Gamestate.GamestateEspionageAssetsItem?>)
            if (obj.TryGetSaveObject("espionage_assets", out SaveObject espionageassetsDictObj) && espionageassetsDictObj != null)
                model.EspionageAssets = new Dictionary<int, Gamestate.GamestateEspionageAssetsItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: VivariumCritters (Dictionary<int, Gamestate.GamestateVivariumCrittersItem?>)
            if (obj.TryGetSaveObject("vivarium_critters", out SaveObject vivariumcrittersDictObj) && vivariumcrittersDictObj != null)
                model.VivariumCritters = new Dictionary<int, Gamestate.GamestateVivariumCrittersItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: Exhibits (Dictionary<int, Gamestate.GamestateExhibitsItem?>)
            if (obj.TryGetSaveObject("exhibits", out SaveObject exhibitsDictObj) && exhibitsDictObj != null)
                model.Exhibits = new Dictionary<int, Gamestate.GamestateExhibitsItem?>(); // Initialize empty dictionary

            if (obj.TryGetInt("last_created_species_ref", out int lastcreatedspeciesrefValue))
                model.LastCreatedSpeciesRef = lastcreatedspeciesrefValue;

            if (obj.TryGetSaveObject("nebula", out SaveObject nebulaNestedObj))
                model.Nebula = Gamestate.GamestateNebula.Bind(nebulaNestedObj);

            // TODO: Bind complex type: Pop (Dictionary<int, Gamestate.GamestatePopItem?>)
            if (obj.TryGetSaveObject("pop", out SaveObject popDictObj) && popDictObj != null)
                model.Pop = new Dictionary<int, Gamestate.GamestatePopItem?>(); // Initialize empty dictionary

            if (obj.TryGetInt("last_created_pop", out int lastcreatedpopValue))
                model.LastCreatedPop = lastcreatedpopValue;

            // TODO: Bind complex type: GalacticObject (Dictionary<int, Gamestate.GamestateGalacticObjectItem?>)
            if (obj.TryGetSaveObject("galactic_object", out SaveObject galacticobjectDictObj) && galacticobjectDictObj != null)
                model.GalacticObject = new Dictionary<int, Gamestate.GamestateGalacticObjectItem?>(); // Initialize empty dictionary

            if (obj.TryGetSaveObject("starbase_mgr", out SaveObject starbasemgrNestedObj))
                model.StarbaseMgr = Gamestate.GamestateStarbaseMgr.Bind(starbasemgrNestedObj);

            if (obj.TryGetSaveObject("planets", out SaveObject planetsNestedObj))
                model.Planets = Gamestate.GamestatePlanets.Bind(planetsNestedObj);

            if (obj.TryGetSaveObject("astral_rifts", out SaveObject astralriftsNestedObj))
                model.AstralRifts = Gamestate.GamestateAstralRifts.Bind(astralriftsNestedObj);

            // TODO: Bind complex type: Country (Dictionary<int, Gamestate.GamestateCountryItem?>)
            if (obj.TryGetSaveObject("country", out SaveObject countryDictObj) && countryDictObj != null)
                model.Country = new Dictionary<int, Gamestate.GamestateCountryItem?>(); // Initialize empty dictionary

            if (obj.TryGetSaveObject("construction", out SaveObject constructionNestedObj))
                model.Construction = Gamestate.GamestateConstruction.Bind(constructionNestedObj);

            if (obj.TryGetSaveObject("federation", out SaveObject federationNestedObj))
                model.Federation = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(federationNestedObj);

            if (obj.TryGetSaveObject("truce", out SaveObject truceNestedObj))
                model.Truce = Gamestate.GamestateTruce.Bind(truceNestedObj);

            if (obj.TryGetSaveObject("trade_deal", out SaveObject tradedealNestedObj))
                model.TradeDeal = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(tradedealNestedObj);

            if (obj.TryGetInt("last_created_country", out int lastcreatedcountryValue))
                model.LastCreatedCountry = lastcreatedcountryValue;

            if (obj.TryGetInt("last_refugee_country", out int lastrefugeecountryValue))
                model.LastRefugeeCountry = lastrefugeecountryValue;

            if (obj.TryGetInt("last_created_system", out int lastcreatedsystemValue))
                model.LastCreatedSystem = lastcreatedsystemValue;

            if (obj.TryGetSaveObject("leaders", out SaveObject leadersNestedObj))
                model.Leaders = Gamestate.GamestateLeaders.Bind(leadersNestedObj);

            if (obj.TryGetSaveObject("system_initializer_counter", out SaveObject systeminitializercounterNestedObj))
                model.SystemInitializerCounter = Gamestate.GamestateSystemInitializerCounter.Bind(systeminitializercounterNestedObj);

            if (obj.TryGetSaveObject("saved_leaders", out SaveObject savedleadersNestedObj))
                model.SavedLeaders = Gamestate.GamestateSavedLeaders.Bind(savedleadersNestedObj);

            // TODO: Bind complex type: Ships (Dictionary<int, Gamestate.GamestateShipsItem?>)
            if (obj.TryGetSaveObject("ships", out SaveObject shipsDictObj) && shipsDictObj != null)
                model.Ships = new Dictionary<int, Gamestate.GamestateShipsItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: Fleet (Dictionary<int, Gamestate.GamestateFleetItem?>)
            if (obj.TryGetSaveObject("fleet", out SaveObject fleetDictObj) && fleetDictObj != null)
                model.Fleet = new Dictionary<int, Gamestate.GamestateFleetItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: FleetTemplate (Dictionary<int, Gamestate.GamestateFleetTemplateItem?>)
            if (obj.TryGetSaveObject("fleet_template", out SaveObject fleettemplateDictObj) && fleettemplateDictObj != null)
                model.FleetTemplate = new Dictionary<int, Gamestate.GamestateFleetTemplateItem?>(); // Initialize empty dictionary

            if (obj.TryGetInt("last_created_fleet", out int lastcreatedfleetValue))
                model.LastCreatedFleet = lastcreatedfleetValue;

            if (obj.TryGetInt("last_created_ship", out int lastcreatedshipValue))
                model.LastCreatedShip = lastcreatedshipValue;

            if (obj.TryGetInt("last_created_leader", out int lastcreatedleaderValue))
                model.LastCreatedLeader = lastcreatedleaderValue;

            if (obj.TryGetInt("last_created_army", out int lastcreatedarmyValue))
                model.LastCreatedArmy = lastcreatedarmyValue;

            if (obj.TryGetInt("last_created_design", out int lastcreateddesignValue))
                model.LastCreatedDesign = lastcreateddesignValue;

            // TODO: Bind complex type: Army (Dictionary<int, Gamestate.GamestateArmyItem?>)
            if (obj.TryGetSaveObject("army", out SaveObject armyDictObj) && armyDictObj != null)
                model.Army = new Dictionary<int, Gamestate.GamestateArmyItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: Deposit (Dictionary<int, Gamestate.GamestateDepositItem?>)
            if (obj.TryGetSaveObject("deposit", out SaveObject depositDictObj) && depositDictObj != null)
                model.Deposit = new Dictionary<int, Gamestate.GamestateDepositItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: GroundCombat (Dictionary<int, string>)
            if (obj.TryGetSaveObject("ground_combat", out SaveObject groundcombatDictObj) && groundcombatDictObj != null)
                model.GroundCombat = new Dictionary<int, string>(); // Initialize empty dictionary

            // TODO: Bind complex type: FiredEventIds (List<string>)
            if (obj.TryGetSaveArray("fired_event_ids", out SaveArray firedeventidsArray) && firedeventidsArray != null)
                model.FiredEventIds = new List<string>(); // Initialize empty list
                // Populate list from array of scalar values
                if (firedeventidsArray != null)
                {
                    foreach (var item in firedeventidsArray.Items)
                    {
                        if (item is Scalar<string> scalarValue)
                        {
                            model.FiredEventIds.Add(scalarValue.Value);
                        }
                    }
                }

            // TODO: Bind complex type: War (Dictionary<int, Gamestate.GamestateWarItem?>)
            if (obj.TryGetSaveObject("war", out SaveObject warDictObj) && warDictObj != null)
                model.War = new Dictionary<int, Gamestate.GamestateWarItem?>(); // Initialize empty dictionary

            if (obj.TryGetSaveObject("debris", out SaveObject debrisNestedObj))
                model.Debris = Gamestate.GamestateTruce.Bind(debrisNestedObj);

            // TODO: Bind complex type: Missile (Dictionary<long, string>)
            if (obj.TryGetSaveObject("missile", out SaveObject missileDictObj) && missileDictObj != null)
                model.Missile = new Dictionary<long, string>(); // Initialize empty dictionary

            if (obj.TryGetSaveObject("strike_craft", out SaveObject strikecraftNestedObj))
                model.StrikeCraft = Gamestate.GamestateStrikeCraft.Bind(strikecraftNestedObj);

            // TODO: Bind complex type: AmbientObject (Dictionary<int, Gamestate.GamestateAmbientObjectItem?>)
            if (obj.TryGetSaveObject("ambient_object", out SaveObject ambientobjectDictObj) && ambientobjectDictObj != null)
                model.AmbientObject = new Dictionary<int, Gamestate.GamestateAmbientObjectItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: OrbitalLine (Dictionary<int, Gamestate.GamestateOrbitalLineItem?>)
            if (obj.TryGetSaveObject("orbital_line", out SaveObject orbitallineDictObj) && orbitallineDictObj != null)
                model.OrbitalLine = new Dictionary<int, Gamestate.GamestateOrbitalLineItem?>(); // Initialize empty dictionary

            if (obj.TryGetInt("last_created_ambient_object", out int lastcreatedambientobjectValue))
                model.LastCreatedAmbientObject = lastcreatedambientobjectValue;

            if (obj.TryGetInt("last_created_cosmic_storm", out int lastcreatedcosmicstormValue))
                model.LastCreatedCosmicStorm = lastcreatedcosmicstormValue;

            if (obj.TryGetInt("last_diplo_action_id", out int lastdiploactionidValue))
                model.LastDiploActionId = lastdiploactionidValue;

            if (obj.TryGetInt("last_notification_id", out int lastnotificationidValue))
                model.LastNotificationId = lastnotificationidValue;

            if (obj.TryGetInt("last_event_id", out int lasteventidValue))
                model.LastEventId = lasteventidValue;

            if (obj.TryGetSaveObject("open_player_event_selection_history", out SaveObject openplayereventselectionhistoryNestedObj))
                model.OpenPlayerEventSelectionHistory = Gamestate.GamestateOpenPlayerEventSelectionHistory.Bind(openplayereventselectionhistoryNestedObj);

            if (obj.TryGetSaveObject("random_name_database", out SaveObject randomnamedatabaseNestedObj))
                model.RandomNameDatabase = Gamestate.GamestateRandomNameDatabase.Bind(randomnamedatabaseNestedObj);

            if (obj.TryGetSaveObject("name_list", out SaveObject namelistNestedObj))
                model.NameList = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(namelistNestedObj);

            if (obj.TryGetSaveObject("galaxy", out SaveObject galaxyNestedObj))
                model.Galaxy = Gamestate.GamestateGalaxy.Bind(galaxyNestedObj);

            if (obj.TryGetFloat("galaxy_radius", out float galaxyradiusValue))
                model.GalaxyRadius = galaxyradiusValue;

            if (obj.TryGetSaveObject("flags", out SaveObject flagsNestedObj))
                model.Flags = Gamestate.GamestateFlags.Bind(flagsNestedObj);

            if (obj.TryGetSaveObject("saved_event_target", out SaveObject savedeventtargetNestedObj))
                model.SavedEventTarget = Gamestate.GamestateCountryItem.GamestateCountryItemEvents.GamestateCountryItemEventsPoiItem.GamestateCountryItemEventsPoiItemScope.GamestateCountryItemEventsPoiItemScopeRoot.GamestateCountryItemEventsPoiItemScopeRootFrom.GamestateCountryItemEventsPoiItemScopeRootFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFrom.GamestateCountryItemEventsPoiItemScopeRootFromFromFromSavedEventTarget.Bind(savedeventtargetNestedObj);

            if (obj.TryGetSaveObject("ship_design", out SaveObject shipdesignNestedObj))
                model.ShipDesign = Gamestate.GamestateShipDesign.Bind(shipdesignNestedObj);

            // TODO: Bind complex type: PopFactions (Dictionary<int, Gamestate.GamestatePopFactionsItem?>)
            if (obj.TryGetSaveObject("pop_factions", out SaveObject popfactionsDictObj) && popfactionsDictObj != null)
                model.PopFactions = new Dictionary<int, Gamestate.GamestatePopFactionsItem?>(); // Initialize empty dictionary

            if (obj.TryGetInt("last_created_pop_faction", out int lastcreatedpopfactionValue))
                model.LastCreatedPopFaction = lastcreatedpopfactionValue;

            if (obj.TryGetSaveObject("last_killed_country_name", out SaveObject lastkilledcountrynameNestedObj))
                model.LastKilledCountryName = Gamestate.GamestateVivariumCrittersItem.GamestateVivariumCrittersItemName.Bind(lastkilledcountrynameNestedObj);

            // TODO: Bind complex type: Megastructures (Dictionary<int, Gamestate.GamestateMegastructuresItem?>)
            if (obj.TryGetSaveObject("megastructures", out SaveObject megastructuresDictObj) && megastructuresDictObj != null)
                model.Megastructures = new Dictionary<int, Gamestate.GamestateMegastructuresItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: Bypasses (Dictionary<int, Gamestate.GamestateBypassesItem?>)
            if (obj.TryGetSaveObject("bypasses", out SaveObject bypassesDictObj) && bypassesDictObj != null)
                model.Bypasses = new Dictionary<int, Gamestate.GamestateBypassesItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: NaturalWormholes (Dictionary<int, Gamestate.GamestateNaturalWormholesItem?>)
            if (obj.TryGetSaveObject("natural_wormholes", out SaveObject naturalwormholesDictObj) && naturalwormholesDictObj != null)
                model.NaturalWormholes = new Dictionary<int, Gamestate.GamestateNaturalWormholesItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: TradeRoutes (Dictionary<int, Gamestate.GamestateTradeRoutesItem?>)
            if (obj.TryGetSaveObject("trade_routes", out SaveObject traderoutesDictObj) && traderoutesDictObj != null)
                model.TradeRoutes = new Dictionary<int, Gamestate.GamestateTradeRoutesItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: Sectors (Dictionary<int, Gamestate.GamestateSectorsItem?>)
            if (obj.TryGetSaveObject("sectors", out SaveObject sectorsDictObj) && sectorsDictObj != null)
                model.Sectors = new Dictionary<int, Gamestate.GamestateSectorsItem?>(); // Initialize empty dictionary

            // TODO: Bind complex type: Buildings (Dictionary<int, Gamestate.GamestateBuildingsItem?>)
            if (obj.TryGetSaveObject("buildings", out SaveObject buildingsDictObj) && buildingsDictObj != null)
                model.Buildings = new Dictionary<int, Gamestate.GamestateBuildingsItem?>(); // Initialize empty dictionary

            if (obj.TryGetSaveObject("archaeological_sites", out SaveObject archaeologicalsitesNestedObj))
                model.ArchaeologicalSites = Gamestate.GamestateArchaeologicalSites.Bind(archaeologicalsitesNestedObj);

            if (obj.TryGetSaveObject("espionage_operations", out SaveObject espionageoperationsNestedObj))
                model.EspionageOperations = Gamestate.GamestateEspionageOperations.Bind(espionageoperationsNestedObj);

            if (obj.TryGetSaveObject("agreements", out SaveObject agreementsNestedObj))
                model.Agreements = Gamestate.GamestateAgreements.Bind(agreementsNestedObj);

            // TODO: Bind complex type: GlobalShipDesign (List<Gamestate.GamestateGlobalShipDesignItem?>)
            if (obj.TryGetSaveArray("global_ship_design", out SaveArray globalshipdesignArray) && globalshipdesignArray != null)
                model.GlobalShipDesign = new List<Gamestate.GamestateGlobalShipDesignItem?>(); // Initialize empty list

            // TODO: Bind complex type: Achievement (List<int?>)
            if (obj.TryGetSaveArray("achievement", out SaveArray achievementArray) && achievementArray != null)
                model.Achievement = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (achievementArray != null)
                {
                    foreach (var item in achievementArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.Achievement.Add(scalarValue.Value);
                        }
                    }
                }

            // TODO: Bind complex type: Clusters (List<Gamestate.GamestateClustersItem?>)
            if (obj.TryGetSaveArray("clusters", out SaveArray clustersArray) && clustersArray != null)
                model.Clusters = new List<Gamestate.GamestateClustersItem?>(); // Initialize empty list

            // TODO: Bind complex type: RimGalacticObjects (List<int?>)
            if (obj.TryGetSaveArray("rim_galactic_objects", out SaveArray rimgalacticobjectsArray) && rimgalacticobjectsArray != null)
                model.RimGalacticObjects = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (rimgalacticobjectsArray != null)
                {
                    foreach (var item in rimgalacticobjectsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.RimGalacticObjects.Add(scalarValue.Value);
                        }
                    }
                }

            if (obj.TryGetInt("additional_crisis_strength", out int additionalcrisisstrengthValue))
                model.AdditionalCrisisStrength = additionalcrisisstrengthValue;

            model.UsedColor = obj.TryGetString("used_color", out string usedcolorStringValue) && usedcolorStringValue != "none" ? usedcolorStringValue : null;

            // TODO: Bind complex type: UsedSymbols (List<int?>)
            if (obj.TryGetSaveArray("used_symbols", out SaveArray usedsymbolsArray) && usedsymbolsArray != null)
                model.UsedSymbols = new List<int?>(); // Initialize empty list
                // Populate list from array of scalar values
                if (usedsymbolsArray != null)
                {
                    foreach (var item in usedsymbolsArray.Items)
                    {
                        if (item is Scalar<int> scalarValue)
                        {
                            model.UsedSymbols.Add(scalarValue.Value);
                        }
                    }
                }

            if (obj.TryGetSaveObject("used_species_names", out SaveObject usedspeciesnamesNestedObj))
                model.UsedSpeciesNames = Gamestate.GamestateUsedSpeciesNames.Bind(usedspeciesnamesNestedObj);

            if (obj.TryGetSaveObject("used_species_portrait", out SaveObject usedspeciesportraitNestedObj))
                model.UsedSpeciesPortrait = Gamestate.GamestateUsedSpeciesNames.Bind(usedspeciesportraitNestedObj);

            if (obj.TryGetInt("random_seed", out int randomseedValue))
                model.RandomSeed = randomseedValue;

            if (obj.TryGetInt("random_count", out int randomcountValue))
                model.RandomCount = randomcountValue;

            if (obj.TryGetSaveObject("market", out SaveObject marketNestedObj))
                model.Market = Gamestate.GamestateMarket.Bind(marketNestedObj);

            if (obj.TryGetSaveObject("trade_routes_manager", out SaveObject traderoutesmanagerNestedObj))
                model.TradeRoutesManager = Gamestate.GamestateTradeRoutesManager.Bind(traderoutesmanagerNestedObj);

            if (obj.TryGetSaveObject("slave_market_manager", out SaveObject slavemarketmanagerNestedObj))
                model.SlaveMarketManager = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(slavemarketmanagerNestedObj);

            if (obj.TryGetSaveObject("galactic_community", out SaveObject galacticcommunityNestedObj))
                model.GalacticCommunity = Gamestate.GamestateGalacticCommunity.Bind(galacticcommunityNestedObj);

            if (obj.TryGetSaveObject("first_contacts", out SaveObject firstcontactsNestedObj))
                model.FirstContacts = Gamestate.GamestateFirstContacts.Bind(firstcontactsNestedObj);

            if (obj.TryGetSaveObject("situations", out SaveObject situationsNestedObj))
                model.Situations = Gamestate.GamestateSituations.Bind(situationsNestedObj);

            if (obj.TryGetSaveObject("council_positions", out SaveObject councilpositionsNestedObj))
                model.CouncilPositions = Gamestate.GamestateCouncilPositions.Bind(councilpositionsNestedObj);

            if (obj.TryGetSaveObject("automation_resources", out SaveObject automationresourcesNestedObj))
                model.AutomationResources = Gamestate.GamestateSpeciesDbItem.GamestateSpeciesDbItemTraits.Bind(automationresourcesNestedObj);

            if (obj.TryGetSaveObject("storms", out SaveObject stormsNestedObj))
                model.Storms = Gamestate.GamestateStorms.Bind(stormsNestedObj);

            if (obj.TryGetSaveObject("storm_influence_fields", out SaveObject storminfluencefieldsNestedObj))
                model.StormInfluenceFields = Gamestate.GamestateStormInfluenceFields.Bind(storminfluencefieldsNestedObj);

            if (obj.TryGetBool("show_politics_tab", out bool showpoliticstabValue))
                model.ShowPoliticsTab = showpoliticstabValue;


            return model;
        }
    }
}

